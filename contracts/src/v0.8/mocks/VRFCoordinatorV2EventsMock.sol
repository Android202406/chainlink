// SPDX-License-Identifier: MIT
// Warning: this is an autogenerated file! DO NOT EDIT.

pragma solidity ^0.8.6;

contract VRFCoordinatorV2EventsMock {
    struct FeeConfig {uint32 fulfillmentFlatFeeLinkPPMTier1;uint32 fulfillmentFlatFeeLinkPPMTier2;uint32 fulfillmentFlatFeeLinkPPMTier3;uint32 fulfillmentFlatFeeLinkPPMTier4;uint32 fulfillmentFlatFeeLinkPPMTier5;uint24 reqsForTier2;uint24 reqsForTier3;uint24 reqsForTier4;uint24 reqsForTier5; }
    event ConfigSet(uint16 minimumRequestConfirmations,uint32 maxGasLimit,uint32 stalenessSeconds,uint32 gasAfterPaymentCalculation,int256 fallbackWeiPerUnitLink,FeeConfig feeConfig);
    event FundsRecovered(address to,uint256 amount);
    event OwnershipTransferRequested(address indexed from,address indexed to);
    event OwnershipTransferred(address indexed from,address indexed to);
    event ProvingKeyDeregistered(bytes32 keyHash,address indexed oracle);
    event ProvingKeyRegistered(bytes32 keyHash,address indexed oracle);
    event RandomWordsFulfilled(uint256 indexed requestId,uint256 outputSeed,uint96 payment,bool success);
    event RandomWordsRequested(bytes32 indexed keyHash,uint256 requestId,uint256 preSeed,uint64 indexed subId,uint16 minimumRequestConfirmations,uint32 callbackGasLimit,uint32 numWords,address indexed sender);
    event SubscriptionCanceled(uint64 indexed subId,address to,uint256 amount);
    event SubscriptionConsumerAdded(uint64 indexed subId,address consumer);
    event SubscriptionConsumerRemoved(uint64 indexed subId,address consumer);
    event SubscriptionCreated(uint64 indexed subId,address owner);
    event SubscriptionFunded(uint64 indexed subId,uint256 oldBalance,uint256 newBalance);
    event SubscriptionOwnerTransferRequested(uint64 indexed subId,address from,address to);
    event SubscriptionOwnerTransferred(uint64 indexed subId,address from,address to);
    function emitConfigSet(uint16 minimumRequestConfirmations,uint32 maxGasLimit,uint32 stalenessSeconds,uint32 gasAfterPaymentCalculation,int256 fallbackWeiPerUnitLink,FeeConfig memory feeConfig) public {
        emit ConfigSet(minimumRequestConfirmations,maxGasLimit,stalenessSeconds,gasAfterPaymentCalculation,fallbackWeiPerUnitLink,feeConfig);
    }
    function emitFundsRecovered(address to,uint256 amount) public {
        emit FundsRecovered(to,amount);
    }
    function emitOwnershipTransferRequested(address from,address to) public {
        emit OwnershipTransferRequested(from,to);
    }
    function emitOwnershipTransferred(address from,address to) public {
        emit OwnershipTransferred(from,to);
    }
    function emitProvingKeyDeregistered(bytes32 keyHash,address oracle) public {
        emit ProvingKeyDeregistered(keyHash,oracle);
    }
    function emitProvingKeyRegistered(bytes32 keyHash,address oracle) public {
        emit ProvingKeyRegistered(keyHash,oracle);
    }
    function emitRandomWordsFulfilled(uint256 requestId,uint256 outputSeed,uint96 payment,bool success) public {
        emit RandomWordsFulfilled(requestId,outputSeed,payment,success);
    }
    function emitRandomWordsRequested(bytes32 keyHash,uint256 requestId,uint256 preSeed,uint64 subId,uint16 minimumRequestConfirmations,uint32 callbackGasLimit,uint32 numWords,address sender) public {
        emit RandomWordsRequested(keyHash,requestId,preSeed,subId,minimumRequestConfirmations,callbackGasLimit,numWords,sender);
    }
    function emitSubscriptionCanceled(uint64 subId,address to,uint256 amount) public {
        emit SubscriptionCanceled(subId,to,amount);
    }
    function emitSubscriptionConsumerAdded(uint64 subId,address consumer) public {
        emit SubscriptionConsumerAdded(subId,consumer);
    }
    function emitSubscriptionConsumerRemoved(uint64 subId,address consumer) public {
        emit SubscriptionConsumerRemoved(subId,consumer);
    }
    function emitSubscriptionCreated(uint64 subId,address owner) public {
        emit SubscriptionCreated(subId,owner);
    }
    function emitSubscriptionFunded(uint64 subId,uint256 oldBalance,uint256 newBalance) public {
        emit SubscriptionFunded(subId,oldBalance,newBalance);
    }
    function emitSubscriptionOwnerTransferRequested(uint64 subId,address from,address to) public {
        emit SubscriptionOwnerTransferRequested(subId,from,to);
    }
    function emitSubscriptionOwnerTransferred(uint64 subId,address from,address to) public {
        emit SubscriptionOwnerTransferred(subId,from,to);
    }
}
