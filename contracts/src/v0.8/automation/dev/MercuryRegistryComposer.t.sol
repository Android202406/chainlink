pragma solidity ^0.8.0;

import {console} from "forge-std/console.sol";
import {Test} from "forge-std/Test.sol";
import "./MercuryRegistryComposer.sol";
import "../interfaces/StreamsLookupCompatibleInterface.sol";

contract MercuryRegistryComposerTest is Test {
  address internal constant OWNER = 0x00007e64E1fB0C487F25dd6D3601ff6aF8d32e4e;
  int192 internal constant DEVIATION_THRESHOLD = 10_000; // 1%
  uint32 internal constant STALENESS_SECONDS = 3600; // 1 hour

  address s_verifier = 0x09DFf56A4fF44e0f4436260A04F5CFa65636A481;

  string[] feedIds;
  string s_BTCUSDFeedId = "0x4254432d5553442d415242495452554d2d544553544e45540000000000000000";
  string s_ETHUSDFeedId = "0x4554482d5553442d415242495452554d2d544553544e45540000000000000000";
  MercuryRegistryComposer s_testRegistry;

  function setUp() public virtual {
    // Set owner, and fork Arbitrum Goerli Testnet (chain ID 421613).
    // The fork is only used with the `FORK_TEST` flag enabeld, as to not disrupt CI. For CI, a mock verifier is used instead.
    vm.startPrank(OWNER);
    try vm.envBool("FORK_TEST") returns (bool /* fork testing enabled */) {
      vm.selectFork(vm.createFork("https://goerli-rollup.arbitrum.io/rpc"));
    } catch {
      s_verifier = address(new MockVerifierProxy());
    }
    vm.chainId(31337); // restore chain Id

    // Use a BTC feed and ETH feed.
    feedIds = new string[](2);
    feedIds[0] = s_BTCUSDFeedId;
    feedIds[1] = s_ETHUSDFeedId;

    // Deviation threshold and staleness are the same for all feeds.
    int192[] memory thresholds = new int192[](1);
    thresholds[0] = DEVIATION_THRESHOLD;
    uint32[] memory stalenessSeconds = new uint32[](1);
    stalenessSeconds[0] = STALENESS_SECONDS;

    // Initialize with BTC feed.
    string[] memory initialFeedIds = new string[](1);
    initialFeedIds[0] = feedIds[0];
    string[] memory initialFeedNames = new string[](1);
    initialFeedNames[0] = "BTC/USD";
    s_testRegistry = new MercuryRegistryComposer(
      initialFeedIds,
      initialFeedNames,
      thresholds,
      stalenessSeconds,
      address(0) // verifier unset
    );
    s_testRegistry.setVerifier(s_verifier); // set verifier

    // Add ETH feed.
    string[] memory addedFeedIds = new string[](1);
    addedFeedIds[0] = feedIds[1];
    string[] memory addedFeedNames = new string[](1);
    addedFeedNames[0] = "ETH/USD";
    s_testRegistry.addFeeds(addedFeedIds, addedFeedNames, thresholds, stalenessSeconds);
  }

  // TODO: add assertions and build more complete tests.
  function testMercuryRegistry() public {

    bytes memory performData = hex"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000b8130303036646134613836633439333364643461383762323164643238373161656132396637303662636465343363373030333933353561633562363634666235303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030353464353831303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306530303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303232303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303032383030303031303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303132303432353434333264353535333434326434313532343234393534353235353464326435343435353335343465343535343030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303635303866623331303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303032366532373865356632303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030323665323433616565363030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303236653261653335363830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030323836393237313531343237353566616363363130633966666230623164376262663233646532363730373030643933633036643930616335333666343335373338623965373630303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303032383639323731303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303036353038666233313030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303233643937323066613464343035396333353362636636323839363164663334623931653035326434343437623239316465363239616331326136323931363735653433343763393535336133636562613633656533323062303131633363356434646338343565343131326664363732393234346339613036376361326165333030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303233303565393632306432633139396365623138333538353739653733656437633563346439383631323636663436326261353132643536383132313031363736323734623334626661333831643831383839386132323332373563653866633930356630343633353265323766393336386266336132613464356634626236632c

    // Perform upkeep to update on-chain state.
    s_testRegistry.performUpkeep{gas: 4500000}(performData);

    MercuryRegistryComposer.Feed[] memory feeds = s_testRegistry.getLatestFeedData(feedIds);
    console.log(uint192(feeds[0].price));
    console.log(uint192(feeds[1].price));
  }
}


contract MockVerifierProxy is IVerifierProxy {
  function verify(bytes calldata payload) external payable override returns (bytes memory) {
    (, bytes memory reportData, , , ) = abi.decode(payload, (bytes32[3], bytes, bytes32[], bytes32[], bytes32));
    return reportData;
  }
}
