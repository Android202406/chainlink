// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	big "github.com/smartcontractkit/chainlink/v2/core/chains/evm/utils/big"

	context "context"

	forwarders "github.com/smartcontractkit/chainlink/v2/core/chains/evm/forwarders"

	mock "github.com/stretchr/testify/mock"

	sqlutil "github.com/smartcontractkit/chainlink-common/pkg/sqlutil"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// CreateForwarder provides a mock function with given fields: ctx, addr, evmChainId
func (_m *ORM) CreateForwarder(ctx context.Context, addr common.Address, evmChainId big.Big) (forwarders.Forwarder, error) {
	ret := _m.Called(ctx, addr, evmChainId)

	if len(ret) == 0 {
		panic("no return value specified for CreateForwarder")
	}

	var r0 forwarders.Forwarder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, big.Big) (forwarders.Forwarder, error)); ok {
		return rf(ctx, addr, evmChainId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, big.Big) forwarders.Forwarder); ok {
		r0 = rf(ctx, addr, evmChainId)
	} else {
		r0 = ret.Get(0).(forwarders.Forwarder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, big.Big) error); ok {
		r1 = rf(ctx, addr, evmChainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteForwarder provides a mock function with given fields: ctx, id, cleanup
func (_m *ORM) DeleteForwarder(ctx context.Context, id int64, cleanup func(sqlutil.DataSource, int64, common.Address) error) error {
	ret := _m.Called(ctx, id, cleanup)

	if len(ret) == 0 {
		panic("no return value specified for DeleteForwarder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, func(sqlutil.DataSource, int64, common.Address) error) error); ok {
		r0 = rf(ctx, id, cleanup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindForwardersByChain provides a mock function with given fields: ctx, evmChainId
func (_m *ORM) FindForwardersByChain(ctx context.Context, evmChainId big.Big) ([]forwarders.Forwarder, error) {
	ret := _m.Called(ctx, evmChainId)

	if len(ret) == 0 {
		panic("no return value specified for FindForwardersByChain")
	}

	var r0 []forwarders.Forwarder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, big.Big) ([]forwarders.Forwarder, error)); ok {
		return rf(ctx, evmChainId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, big.Big) []forwarders.Forwarder); ok {
		r0 = rf(ctx, evmChainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]forwarders.Forwarder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, big.Big) error); ok {
		r1 = rf(ctx, evmChainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewORM creates a new instance of ORM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewORM(t interface {
	mock.TestingT
	Cleanup(func())
}) *ORM {
	mock := &ORM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
