// Code generated by protoc-gen-go-wsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-wsrpc v0.0.1
// - protoc             v3.21.9

package proto

import (
	context "context"
	wsrpc "github.com/smartcontractkit/wsrpc"
)

// TransmissionClient is the client API for Transmission service.
type TransmissionClient interface {
	SendUserOperation(ctx context.Context, in *SendUserOperationRequest) (*SendUserOperationResponse, error)
}

type transmissionClient struct {
	cc wsrpc.ClientInterface
}

func NewTransmissionClient(cc wsrpc.ClientInterface) TransmissionClient {
	return &transmissionClient{cc}
}

func (c *transmissionClient) SendUserOperation(ctx context.Context, in *SendUserOperationRequest) (*SendUserOperationResponse, error) {
	out := new(SendUserOperationResponse)
	err := c.cc.Invoke(ctx, "SendUserOperation", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransmissionServer is the server API for Transmission service.
type TransmissionServer interface {
	SendUserOperation(context.Context, *SendUserOperationRequest) (*SendUserOperationResponse, error)
}

func RegisterTransmissionServer(s wsrpc.ServiceRegistrar, srv TransmissionServer) {
	s.RegisterService(&Transmission_ServiceDesc, srv)
}

func _Transmission_SendUserOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendUserOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(TransmissionServer).SendUserOperation(ctx, in)
}

// Transmission_ServiceDesc is the wsrpc.ServiceDesc for Transmission service.
// It's only intended for direct use with wsrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transmission_ServiceDesc = wsrpc.ServiceDesc{
	ServiceName: "proto.Transmission",
	HandlerType: (*TransmissionServer)(nil),
	Methods: []wsrpc.MethodDesc{
		{
			MethodName: "SendUserOperation",
			Handler:    _Transmission_SendUserOperation_Handler,
		},
	},
}
