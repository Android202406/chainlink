syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink/services/transmission/proto";

package proto;

service Transmission {
    rpc SendUserOperation(SendUserOperationRequest) returns (SendUserOperationResponse);
}

message SendUserOperationRequest {
	UserOperation userOperation = 1;
    string entryPoint = 2;
}

message UserOperation {
    // The account making the operation
    string sender = 1;
    // Anti-replay parameter; also used as the salt for first-time account creation. Actual type is uint256
    bytes nonce = 2;
    // The initCode of the account (needed if and only if the account is not yet on-chain and needs to be created)
    bytes initCode = 3;
    // The data to pass to the sender during the main execution call
    bytes callData = 4;
    // The amount of gas to allocate the main execution call. Actual type is uint256
    bytes callGasLimit = 5;
    // The amount of gas to allocate for the verification step. Actual type is uint256
    bytes verificationGasLimit = 6;
    // The amount of gas to pay for to compensate the bundler for pre-verification execution and calldata. Actual type is uint256
    bytes preVerificationGas = 7;
    // Maximum fee per gas. Actual type is uint256
    bytes maxFeePerGas = 8;
    // Maximum priority fee per gas. Actual type is uint256
    bytes maxPriorityFeePerGas = 9;
    // Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster (empty for self-sponsored transaction)
    bytes paymasterAndData = 10;
    // Data passed into the account along with the nonce during the verification step 
    bytes signature = 11;
}

message SendUserOperationResponse {
    string userOpHash = 1;
    Error error = 2;
}

message Error {
    int32 code = 1;
    string message = 2;
}

