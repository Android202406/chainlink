// Code generated by mockery v2.38.0. DO NOT EDIT.

package capreg

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCapabilityFactory is an autogenerated mock type for the CapabilityFactory type
type MockCapabilityFactory struct {
	mock.Mock
}

// CapabilityID provides a mock function with given fields:
func (_m *MockCapabilityFactory) CapabilityID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CapabilityID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockCapabilityFactory) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx, d
func (_m *MockCapabilityFactory) Start(ctx context.Context, d DON) error {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DON) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx, d
func (_m *MockCapabilityFactory) Stop(ctx context.Context, d DON) error {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DON) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, d
func (_m *MockCapabilityFactory) Update(ctx context.Context, d DON) error {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DON) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCapabilityFactory creates a new instance of MockCapabilityFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCapabilityFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCapabilityFactory {
	mock := &MockCapabilityFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
