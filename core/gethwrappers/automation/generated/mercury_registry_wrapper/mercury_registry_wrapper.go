// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mercury_registry_wrapper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type MercuryRegistryFeed struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM uint32
	StalenessSeconds       uint32
}

var MercuryRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"DuplicateFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"currentTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incomingTimestamp\",\"type\":\"uint32\"}],\"name\":\"StaleReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedParamKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"timeParamKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"StreamsLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"addFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"lookupData\",\"type\":\"bytes\"}],\"name\":\"checkCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int192\",\"name\":\"onChain\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"offChain\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"}],\"name\":\"deviationExceedsThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"}],\"name\":\"getLatestFeedData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"deviationPercentagePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"internalType\":\"structMercuryRegistry.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"deviationPercentagePPM\",\"type\":\"uint32\"}],\"name\":\"packPriceDeviationAndStaleness\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"}],\"name\":\"revertForFeedLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_feedMapping\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"deviationPercentagePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_feeds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_verifier\",\"outputs\":[{\"internalType\":\"contractIVerifierProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"uint32[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"setFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003de138038062003de183398101604081905262000034916200082c565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000f5565b5050600280546001600160a01b0319166001600160a01b03841617905550620000ea85858585620001a1565b505050505062000b1f565b6001600160a01b038116331415620001505760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001ab620003e1565b838383838251845114620001d2576040516351a7f87960e01b815260040160405180910390fd5b8151845114620001f5576040516351a7f87960e01b815260040160405180910390fd5b805184511462000218576040516351a7f87960e01b815260040160405180910390fd5b60005b6003548110156200029157600060046003838154811062000240576200024062000af3565b9060005260206000200160405162000259919062000927565b908152604051908190036020019020600501805491151560ff1990921691909117905580620002888162000ac9565b9150506200021b565b5060005b8851811015620003c0576000898281518110620002b657620002b662000af3565b60200260200101519050600481604051620002d2919062000909565b9081526040519081900360200190206005015460ff16156200030b57806040516384da80d360e01b8152600401620000829190620009cb565b62000373818a848151811062000325576200032562000af3565b60200260200101518a858151811062000342576200034262000af3565b60200260200101518a86815181106200035f576200035f62000af3565b60200260200101516200043f60201b60201c565b600160048260405162000387919062000909565b908152604051908190036020019020600501805491151560ff199092169190911790555080620003b78162000ac9565b91505062000295565b508751620003d69060039060208b01906200053d565b505050505050505050565b6000546001600160a01b031633146200043d5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640162000082565b565b8260048560405162000452919062000909565b9081526020016040518091039020600301908051906020019062000478929190620005a1565b50816004856040516200048c919062000909565b908152602001604051809103902060050160016101000a81548163ffffffff021916908363ffffffff16021790555080600485604051620004ce919062000909565b908152602001604051809103902060050160056101000a81548163ffffffff021916908363ffffffff1602179055508360048560405162000510919062000909565b9081526020016040518091039020600401908051906020019062000536929190620005a1565b5050505050565b8280548282559060005260206000209081019282156200058f579160200282015b828111156200058f57825180516200057e918491602090910190620005a1565b50916020019190600101906200055e565b506200059d9291506200062c565b5090565b828054620005af9062000a8c565b90600052602060002090601f016020900481019282620005d357600085556200061e565b82601f10620005ee57805160ff19168380011785556200061e565b828001600101855582156200061e579182015b828111156200061e57825182559160200191906001019062000601565b506200059d9291506200064d565b808211156200059d57600062000643828262000664565b506001016200062c565b5b808211156200059d57600081556001016200064e565b508054620006729062000a8c565b6000825580601f1062000683575050565b601f016020900490600052602060002090810190620006a391906200064d565b50565b6000601f8381840112620006b957600080fd5b82516020620006d2620006cc8362000a33565b62000a00565b80838252828201915082870188848660051b8a01011115620006f357600080fd5b60005b85811015620007965781516001600160401b03808211156200071757600080fd5b818b0191508b603f8301126200072c57600080fd5b8682015160408282111562000745576200074562000b09565b62000758828c01601f19168a0162000a00565b92508183528d818386010111156200076f57600080fd5b62000780828a850183870162000a59565b50508552509284019290840190600101620006f6565b509098975050505050505050565b600082601f830112620007b657600080fd5b81516020620007c9620006cc8362000a33565b80838252828201915082860187848660051b8901011115620007ea57600080fd5b6000805b868110156200081e57825163ffffffff811681146200080b578283fd5b85529385019391850191600101620007ee565b509198975050505050505050565b600080600080600060a086880312156200084557600080fd5b85516001600160401b03808211156200085d57600080fd5b6200086b89838a01620006a6565b965060208801519150808211156200088257600080fd5b6200089089838a01620006a6565b95506040880151915080821115620008a757600080fd5b620008b589838a01620007a4565b94506060880151915080821115620008cc57600080fd5b50620008db88828901620007a4565b608088015190935090506001600160a01b0381168114620008fb57600080fd5b809150509295509295909350565b600082516200091d81846020870162000a59565b9190910192915050565b600080835481600182811c9150808316806200094457607f831692505b60208084108214156200096557634e487b7160e01b86526022600452602486fd5b8180156200097c57600181146200098e57620009bd565b60ff19861689528489019650620009bd565b60008a81526020902060005b86811015620009b55781548b8201529085019083016200099a565b505084890196505b509498975050505050505050565b6020815260008251806020840152620009ec81604085016020870162000a59565b601f01601f19169190910160400192915050565b604051601f8201601f191681016001600160401b038111828210171562000a2b5762000a2b62000b09565b604052919050565b60006001600160401b0382111562000a4f5762000a4f62000b09565b5060051b60200190565b60005b8381101562000a7657818101518382015260200162000a5c565b8381111562000a86576000848401525b50505050565b600181811c9082168062000aa157607f821691505b6020821081141562000ac357634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000aec57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6132b28062000b2f6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636690a96b116100975780639cd8ebe9116100665780639cd8ebe914610298578063b88ecb05146102ab578063da730836146102cb578063f2fde38b146102eb57600080fd5b80636690a96b146101e85780636e04ff0d1461023e57806379ba5097146102515780638da5cb5b1461025957600080fd5b80634b56a42e116100d35780634b56a42e146101695780635437988d1461018a5780635d48ccd21461019d57806360130381146101c057600080fd5b8063157e91571461010557806330eaf1691461012e57806333b3d10b146101435780634585e33b14610156575b600080fd5b610118610113366004612814565b6102fe565b6040516101259190612bc1565b60405180910390f35b61014161013c36600461253c565b6103aa565b005b61014161015136600461253c565b610664565b6101416101643660046125e9565b61086b565b61017c61017736600461242d565b610c9e565b604051610125929190612ba6565b610141610198366004612307565b611014565b6101b06101ab366004612690565b611063565b6040519015158152602001610125565b6101d36101ce366004612737565b6110d3565b60405161012599989796959493929190612d08565b6102306101f63660046126db565b63ffffffff9081169181169216602093841b77ffffffffffffffffffffffffffffffffffffffff000000001617831b9190911790911b1790565b604051908152602001610125565b61017c61024c3660046125e9565b61125b565b61014161134a565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610125565b61017c6102a6366004612507565b611447565b6102be6102b9366004612507565b6116d2565b6040516101259190612a7a565b6002546102739073ffffffffffffffffffffffffffffffffffffffff1681565b6101416102f9366004612307565b6119af565b6003818154811061030e57600080fd5b906000526020600020016000915090508054610329906130e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610355906130e8565b80156103a25780601f10610377576101008083540402835291602001916103a2565b820191906000526020600020905b81548152906001019060200180831161038557829003601f168201915b505050505081565b6103b26119c3565b8383838382518451146103f1576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815184511461042c576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114610467576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6003548110156104f557600060046003838154811061048b5761048b613226565b906000526020600020016040516104a291906128ce565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055806104ed8161313c565b91505061046a565b5060005b885181101561064557600089828151811061051657610516613226565b6020026020010151905060048160405161053091906128b2565b9081526040519081900360200190206005015460ff161561058857806040517f84da80d300000000000000000000000000000000000000000000000000000000815260040161057f9190612bc1565b60405180910390fd5b6105df818a848151811061059e5761059e613226565b60200260200101518a85815181106105b8576105b8613226565b60200260200101518a86815181106105d2576105d2613226565b6020026020010151611a46565b60016004826040516105f191906128b2565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055508061063d8161313c565b9150506104f9565b5087516106599060039060208b0190611f88565b505050505050505050565b61066c6119c3565b8383838382518451146106ab576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81518451146106e6576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114610721576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b885181101561065957600089828151811061074157610741613226565b6020026020010151905060048160405161075b91906128b2565b9081526040519081900360200190206005015460ff16156107aa57806040517f84da80d300000000000000000000000000000000000000000000000000000000815260040161057f9190612bc1565b6107c0818a848151811061059e5761059e613226565b60016004826040516107d291906128b2565b9081526040516020918190038201902060050180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155600380546001810182556000919091528251610856927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90920191840190611fe5565b505080806108639061313c565b915050610724565b60006108798284018461242d565b50905060005b8151811015610c9857600254825160009173ffffffffffffffffffffffffffffffffffffffff1690638e760afe908590859081106108bf576108bf613226565b60200260200101516040518263ffffffff1660e01b81526004016108e39190612bc1565b600060405180830381600087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610957919081019061265b565b80602001905181019061096a919061276c565b9050600061099c826000015160405160200161098891815260200190565b604051602081830303815290604052611b38565b90506004816040516109ae91906128b2565b9081526040519081900360200190206005015460ff166109fc57806040517f716a11d800000000000000000000000000000000000000000000000000000000815260040161057f9190612bc1565b816020015163ffffffff16600482604051610a1791906128b2565b9081526040519081900360200190205463ffffffff161115610a905780600482604051610a4491906128b2565b9081526040516020918190038201812054918501517f4041aa9100000000000000000000000000000000000000000000000000000000825261057f939263ffffffff1691600401612c93565b8160600151600482604051610aa591906128b2565b908152602001604051809103902060010160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508160800151600482604051610b1491906128b2565b908152602001604051809103902060020160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508160400151600482604051610b8391906128b2565b908152602001604051809103902060000160046101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508160200151600482604051610bf291906128b2565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055507ffd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc2826020015183604001518460600151856080015185604051610c68959493929190612cc3565b60405180910390a162030d405a1015610c8357505050505050565b50508080610c909061313c565b91505061087f565b50505050565b600060606000845167ffffffffffffffff811115610cbe57610cbe613255565b604051908082528060200260200182016040528015610cf157816020015b6060815260200190600190039081610cdc5790505b5090506000805b8651811015610fbc576000610d25888381518110610d1857610d18613226565b6020026020010151611d69565b90506000610d43826000015160405160200161098891815260200190565b90506000600482604051610d5791906128b2565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b810b810b928501929092526001810154820b820b820b928401929092526002820154810b810b900b6060830152600381018054608084019190610dca906130e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610df6906130e8565b8015610e435780601f10610e1857610100808354040283529160200191610e43565b820191906000526020600020905b815481529060010190602001808311610e2657829003601f168201915b50505050508152602001600482018054610e5c906130e8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e88906130e8565b8015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b50505091835250506005919091015460ff8116151560208084019190915261010080830463ffffffff9081166040860152650100000000009093048316606090940193909352918301518351928701519394501691610f349190613097565b63ffffffff161180610f5b5750610f5b816020015184604001518360e0015160030b611063565b15610fa657898481518110610f7257610f72613226565b6020026020010151868681518110610f8c57610f8c613226565b60200260200101819052508480610fa29061313c565b9550505b5050508080610fb49061313c565b915050610cf8565b5080825260008286604051602001610fd59291906129e6565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052925115159792965091945050505050565b61101c6119c3565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080620f4240611074858761301e565b61107e9190612f23565b905060008160170b12156110985761109581613189565b90505b6000620f4240846110a98289612f23565b6110b39190612f23565b6110bd9190612e9b565b90508060170b8260170b13925050509392505050565b8051602081830181018051600482529282019190930120915280546001820154600283015460038401805463ffffffff851695640100000000909504601790810b9594810b9493900b929190611128906130e8565b80601f0160208091040260200160405190810160405280929190818152602001828054611154906130e8565b80156111a15780601f10611176576101008083540402835291602001916111a1565b820191906000526020600020905b81548152906001019060200180831161118457829003601f168201915b5050505050908060040180546111b6906130e8565b80601f01602080910402602001604051908101604052809291908181526020018280546111e2906130e8565b801561122f5780601f106112045761010080835404028352916020019161122f565b820191906000526020600020905b81548152906001019060200180831161121257829003601f168201915b5050506005909301549192505060ff81169063ffffffff61010082048116916501000000000090041689565b6000606060006003805480602002602001604051908101604052809291908181526020016000905b8282101561132f5783829060005260206000200180546112a2906130e8565b80601f01602080910402602001604051908101604052809291908181526020018280546112ce906130e8565b801561131b5780601f106112f05761010080835404028352916020019161131b565b820191906000526020600020905b8154815290600101906020018083116112fe57829003601f168201915b505050505081526020019060010190611283565b50505050905061133e81611447565b92509250509250929050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146113cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161057f565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600060606000611455611dec565b60408051808201909152601481527f434845434b5f574954485f46554e4354494f4e53000000000000000000000000602082015290915060005b855181101561162b5760006115f160048884815181106114b1576114b1613226565b60200260200101516040516114c691906128b2565b908152602001604051809103902060000160049054906101000a900460170b60048985815181106114f9576114f9613226565b602002602001015160405161150e91906128b2565b90815260405190819003602001902054895163ffffffff909116906004908b908790811061153e5761153e613226565b602002602001015160405161155391906128b2565b908152602001604051809103902060050160059054906101000a900463ffffffff1660048b878151811061158957611589613226565b602002602001015160405161159e91906128b2565b908152604051602091819003820190206005015477ffffffffffffffffffffffffffffffffffffffff0000000094821b9490941663ffffffff93841617811b91831691909117901b610100909204161790565b90508281604051602001611606929190612890565b60405160208183030381529060405292505080806116239061313c565b91505061148f565b506040518060400160405280600981526020017f6665656449644865780000000000000000000000000000000000000000000000815250856040518060400160405280600b81526020017f626c6f636b4e756d62657200000000000000000000000000000000000000000081525084846040517ff055e4a200000000000000000000000000000000000000000000000000000000815260040161057f959493929190612bd4565b60606000825167ffffffffffffffff8111156116f0576116f0613255565b60405190808252806020026020018201604052801561178457816020015b60408051610120810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161170e5790505b50905060005b83518110156119a85760048482815181106117a7576117a7613226565b60200260200101516040516117bc91906128b2565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b810b810b928501929092526001810154820b820b820b928401929092526002820154810b810b900b606083015260038101805460808401919061182f906130e8565b80601f016020809104026020016040519081016040528092919081815260200182805461185b906130e8565b80156118a85780601f1061187d576101008083540402835291602001916118a8565b820191906000526020600020905b81548152906001019060200180831161188b57829003601f168201915b505050505081526020016004820180546118c1906130e8565b80601f01602080910402602001604051908101604052809291908181526020018280546118ed906130e8565b801561193a5780601f1061190f5761010080835404028352916020019161193a565b820191906000526020600020905b81548152906001019060200180831161191d57829003601f168201915b50505091835250506005919091015460ff81161515602083015263ffffffff6101008204811660408401526501000000000090910416606090910152825183908390811061198a5761198a613226565b602002602001018190525080806119a09061313c565b91505061178a565b5092915050565b6119b76119c3565b6119c081611e92565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314611a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161057f565b565b82600485604051611a5791906128b2565b90815260200160405180910390206003019080519060200190611a7b929190611fe5565b5081600485604051611a8d91906128b2565b908152602001604051809103902060050160016101000a81548163ffffffff021916908363ffffffff16021790555080600485604051611acd91906128b2565b908152602001604051809103902060050160056101000a81548163ffffffff021916908363ffffffff16021790555083600485604051611b0d91906128b2565b90815260200160405180910390206004019080519060200190611b31929190611fe5565b5050505050565b6060600082516002611b4a9190612fe1565b67ffffffffffffffff811115611b6257611b62613255565b6040519080825280601f01601f191660200182016040528015611b8c576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b8451811015611d3f57818251868381518110611be557611be5613226565b0160200151611bf7919060f81c612f0f565b81518110611c0757611c07613226565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611c3a836002612fe1565b81518110611c4a57611c4a613226565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868381518110611c8e57611c8e613226565b0160200151611ca0919060f81c613175565b81518110611cb057611cb0613226565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611ce3836002612fe1565b611cee906001612e83565b81518110611cfe57611cfe613226565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080611d378161313c565b915050611bc7565b5081604051602001611d5191906129a1565b60405160208183030381529060405292505050919050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152600082806020019051810190611dc89190612344565b505050915050600081806020019051810190611de4919061276c565b949350505050565b60004661a4b1811480611e01575062066eed81145b15611e8b57606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4d57600080fd5b505afa158015611e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e85919061282d565b91505090565b4391505090565b73ffffffffffffffffffffffffffffffffffffffff8116331415611f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161057f565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215611fd5579160200282015b82811115611fd55782518051611fc5918491602090910190611fe5565b5091602001919060010190611fa8565b50611fe1929150612065565b5090565b828054611ff1906130e8565b90600052602060002090601f0160209004810192826120135760008555612059565b82601f1061202c57805160ff1916838001178555612059565b82800160010185558215612059579182015b8281111561205957825182559160200191906001019061203e565b50611fe1929150612082565b80821115611fe15760006120798282612097565b50600101612065565b5b80821115611fe15760008155600101612083565b5080546120a3906130e8565b6000825580601f106120b3575050565b601f0160209004906000526020600020908101906119c09190612082565b600082601f8301126120e257600080fd5b815160206120f76120f283612e19565b612dca565b80838252828201915082860187848660051b890101111561211757600080fd5b60005b858110156121365781518452928401929084019060010161211a565b5090979650505050505050565b600082601f83011261215457600080fd5b813560206121646120f283612e19565b80838252828201915082860187848660051b890101111561218457600080fd5b6000805b868110156121c757823567ffffffffffffffff8111156121a6578283fd5b6121b48b88838d010161223e565b8652509385019391850191600101612188565b509198975050505050505050565b600082601f8301126121e657600080fd5b813560206121f66120f283612e19565b80838252828201915082860187848660051b890101111561221657600080fd5b60005b8581101561213657813561222c81613293565b84529284019290840190600101612219565b600082601f83011261224f57600080fd5b813561225d6120f282612e3d565b81815284602083860101111561227257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126122a057600080fd5b81516122ae6120f282612e3d565b8181528460208386010111156122c357600080fd5b611de48260208301602087016130bc565b80516122df81613284565b919050565b80516122df81613293565b805167ffffffffffffffff811681146122df57600080fd5b60006020828403121561231957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461233d57600080fd5b9392505050565b600080600080600060e0868803121561235c57600080fd5b86601f87011261236b57600080fd5b612373612d7d565b8087606089018a81111561238657600080fd5b60005b60038110156123a8578251855260209485019490920191600101612389565b505191975090915067ffffffffffffffff9050808211156123c857600080fd5b6123d489838a0161228f565b955060808801519150808211156123ea57600080fd5b6123f689838a016120d1565b945060a088015191508082111561240c57600080fd5b50612419888289016120d1565b92505060c086015190509295509295909350565b6000806040838503121561244057600080fd5b823567ffffffffffffffff8082111561245857600080fd5b818501915085601f83011261246c57600080fd5b8135602061247c6120f283612e19565b8083825282820191508286018a848660051b890101111561249c57600080fd5b60005b858110156124d7578135878111156124b657600080fd5b6124c48d87838c010161223e565b855250928401929084019060010161249f565b509097505050860135925050808211156124f057600080fd5b506124fd8582860161223e565b9150509250929050565b60006020828403121561251957600080fd5b813567ffffffffffffffff81111561253057600080fd5b611de484828501612143565b6000806000806080858703121561255257600080fd5b843567ffffffffffffffff8082111561256a57600080fd5b61257688838901612143565b9550602087013591508082111561258c57600080fd5b61259888838901612143565b945060408701359150808211156125ae57600080fd5b6125ba888389016121d5565b935060608701359150808211156125d057600080fd5b506125dd878288016121d5565b91505092959194509250565b600080602083850312156125fc57600080fd5b823567ffffffffffffffff8082111561261457600080fd5b818501915085601f83011261262857600080fd5b81358181111561263757600080fd5b86602082850101111561264957600080fd5b60209290920196919550909350505050565b60006020828403121561266d57600080fd5b815167ffffffffffffffff81111561268457600080fd5b611de48482850161228f565b6000806000606084860312156126a557600080fd5b83356126b081613284565b925060208401356126c081613284565b915060408401356126d081613284565b809150509250925092565b600080600080608085870312156126f157600080fd5b84356126fc81613284565b9350602085013561270c81613293565b9250604085013561271c81613293565b9150606085013561272c81613293565b939692955090935050565b60006020828403121561274957600080fd5b813567ffffffffffffffff81111561276057600080fd5b611de48482850161223e565b6000610120828403121561277f57600080fd5b612787612da6565b82518152612797602084016122e4565b60208201526127a8604084016122d4565b60408201526127b9606084016122d4565b60608201526127ca608084016122d4565b60808201526127db60a084016122ef565b60a082015260c083015160c08201526127f660e084016122ef565b60e08201526101006128098185016122ef565b908201529392505050565b60006020828403121561282657600080fd5b5035919050565b60006020828403121561283f57600080fd5b5051919050565b6000815180845261285e8160208601602086016130bc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600083516128a28184602088016130bc565b9190910191825250602001919050565b600082516128c48184602087016130bc565b9190910192915050565b600080835481600182811c9150808316806128ea57607f831692505b6020808410821415612923577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b818015612937576001811461296657612993565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650612993565b60008a81526020902060005b8681101561298b5781548b820152908501908301612972565b505084890196505b509498975050505050505050565b7f30780000000000000000000000000000000000000000000000000000000000008152600082516129d98160028501602087016130bc565b9190910160020192915050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015612a5b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018552612a49868351612846565b95509382019390820190600101612a0f565b505085840381870152505050612a718185612846565b95945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612b98578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805163ffffffff16845261012088820151612af18a87018260170b9052565b5087820151612b048987018260170b9052565b50606080830151612b198288018260170b9052565b50506080808301518282880152612b3283880182612846565b9250505060a08083015186830382880152612b4d8382612846565b9250505060c080830151612b648288018215159052565b505060e08281015163ffffffff90811691870191909152610100928301511691909401529386019390860190600101612aa1565b509098975050505050505050565b8215158152604060208201526000611de46040830184612846565b60208152600061233d6020830184612846565b60a081526000612be760a0830188612846565b6020838203818501528188518084528284019150828160051b850101838b0160005b83811015612c55577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0878403018552612c43838351612846565b94860194925090850190600101612c09565b50508681036040880152612c69818b612846565b9450505050508460608401528281036080840152612c878185612846565b98975050505050505050565b606081526000612ca66060830186612846565b63ffffffff94851660208401529290931660409091015292915050565b63ffffffff861681528460170b60208201528360170b60408201528260170b606082015260a060808201526000612cfd60a0830184612846565b979650505050505050565b600061012063ffffffff808d1684528b60170b60208501528a60170b60408501528960170b6060850152816080850152612d448285018a612846565b915083820360a0850152612d588289612846565b96151560c085015294851660e084015250509116610100909101529695505050505050565b6040516060810167ffffffffffffffff81118282101715612da057612da0613255565b60405290565b604051610120810167ffffffffffffffff81118282101715612da057612da0613255565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612e1157612e11613255565b604052919050565b600067ffffffffffffffff821115612e3357612e33613255565b5060051b60200190565b600067ffffffffffffffff821115612e5757612e57613255565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008219821115612e9657612e966131c8565b500190565b60008160170b8360170b80612eb257612eb26131f7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffff80000000000000000000000000000000000000000000000083141615612f0657612f066131c8565b90059392505050565b600082612f1e57612f1e6131f7565b500490565b60008160170b8360170b777fffffffffffffffffffffffffffffffffffffffffffffff600082136000841383830485118282161615612f6457612f646131c8565b7fffffffffffffffff8000000000000000000000000000000000000000000000006000851286820586128184161615612f9f57612f9f6131c8565b60008712925085820587128484161615612fbb57612fbb6131c8565b85850587128184161615612fd157612fd16131c8565b5050509290910295945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613019576130196131c8565b500290565b60008160170b8360170b60008112817fffffffffffffffff80000000000000000000000000000000000000000000000001831281151615613061576130616131c8565b81777fffffffffffffffffffffffffffffffffffffffffffffff01831381161561308d5761308d6131c8565b5090039392505050565b600063ffffffff838116908316818110156130b4576130b46131c8565b039392505050565b60005b838110156130d75781810151838201526020016130bf565b83811115610c985750506000910152565b600181811c908216806130fc57607f821691505b60208210811415613136577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561316e5761316e6131c8565b5060010190565b600082613184576131846131f7565b500690565b60008160170b7fffffffffffffffff8000000000000000000000000000000000000000000000008114156131bf576131bf6131c8565b60000392915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060170b81146119c057600080fd5b63ffffffff811681146119c057600080fdfea164736f6c6343000806000a",
}

var MercuryRegistryABI = MercuryRegistryMetaData.ABI

var MercuryRegistryBin = MercuryRegistryMetaData.Bin

func DeployMercuryRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32, verifier common.Address) (common.Address, *types.Transaction, *MercuryRegistry, error) {
	parsed, err := MercuryRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MercuryRegistryBin), backend, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds, verifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MercuryRegistry{MercuryRegistryCaller: MercuryRegistryCaller{contract: contract}, MercuryRegistryTransactor: MercuryRegistryTransactor{contract: contract}, MercuryRegistryFilterer: MercuryRegistryFilterer{contract: contract}}, nil
}

type MercuryRegistry struct {
	address common.Address
	abi     abi.ABI
	MercuryRegistryCaller
	MercuryRegistryTransactor
	MercuryRegistryFilterer
}

type MercuryRegistryCaller struct {
	contract *bind.BoundContract
}

type MercuryRegistryTransactor struct {
	contract *bind.BoundContract
}

type MercuryRegistryFilterer struct {
	contract *bind.BoundContract
}

type MercuryRegistrySession struct {
	Contract     *MercuryRegistry
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MercuryRegistryCallerSession struct {
	Contract *MercuryRegistryCaller
	CallOpts bind.CallOpts
}

type MercuryRegistryTransactorSession struct {
	Contract     *MercuryRegistryTransactor
	TransactOpts bind.TransactOpts
}

type MercuryRegistryRaw struct {
	Contract *MercuryRegistry
}

type MercuryRegistryCallerRaw struct {
	Contract *MercuryRegistryCaller
}

type MercuryRegistryTransactorRaw struct {
	Contract *MercuryRegistryTransactor
}

func NewMercuryRegistry(address common.Address, backend bind.ContractBackend) (*MercuryRegistry, error) {
	abi, err := abi.JSON(strings.NewReader(MercuryRegistryABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMercuryRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistry{address: address, abi: abi, MercuryRegistryCaller: MercuryRegistryCaller{contract: contract}, MercuryRegistryTransactor: MercuryRegistryTransactor{contract: contract}, MercuryRegistryFilterer: MercuryRegistryFilterer{contract: contract}}, nil
}

func NewMercuryRegistryCaller(address common.Address, caller bind.ContractCaller) (*MercuryRegistryCaller, error) {
	contract, err := bindMercuryRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryCaller{contract: contract}, nil
}

func NewMercuryRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*MercuryRegistryTransactor, error) {
	contract, err := bindMercuryRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryTransactor{contract: contract}, nil
}

func NewMercuryRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*MercuryRegistryFilterer, error) {
	contract, err := bindMercuryRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryFilterer{contract: contract}, nil
}

func bindMercuryRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MercuryRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_MercuryRegistry *MercuryRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistry.Contract.MercuryRegistryCaller.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistry *MercuryRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.MercuryRegistryTransactor.contract.Transfer(opts)
}

func (_MercuryRegistry *MercuryRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.MercuryRegistryTransactor.contract.Transact(opts, method, params...)
}

func (_MercuryRegistry *MercuryRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistry.Contract.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistry *MercuryRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.contract.Transfer(opts)
}

func (_MercuryRegistry *MercuryRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.contract.Transact(opts, method, params...)
}

func (_MercuryRegistry *MercuryRegistryCaller) CheckCallback(opts *bind.CallOpts, values [][]byte, lookupData []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "checkCallback", values, lookupData)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistry *MercuryRegistrySession) CheckCallback(values [][]byte, lookupData []byte) (bool, []byte, error) {
	return _MercuryRegistry.Contract.CheckCallback(&_MercuryRegistry.CallOpts, values, lookupData)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) CheckCallback(values [][]byte, lookupData []byte) (bool, []byte, error) {
	return _MercuryRegistry.Contract.CheckCallback(&_MercuryRegistry.CallOpts, values, lookupData)
}

func (_MercuryRegistry *MercuryRegistryCaller) CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "checkUpkeep", arg0)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistry *MercuryRegistrySession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistry.Contract.CheckUpkeep(&_MercuryRegistry.CallOpts, arg0)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistry.Contract.CheckUpkeep(&_MercuryRegistry.CallOpts, arg0)
}

func (_MercuryRegistry *MercuryRegistryCaller) DeviationExceedsThreshold(opts *bind.CallOpts, onChain *big.Int, offChain *big.Int, deviationPercentagePPM *big.Int) (bool, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "deviationExceedsThreshold", onChain, offChain, deviationPercentagePPM)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MercuryRegistry *MercuryRegistrySession) DeviationExceedsThreshold(onChain *big.Int, offChain *big.Int, deviationPercentagePPM *big.Int) (bool, error) {
	return _MercuryRegistry.Contract.DeviationExceedsThreshold(&_MercuryRegistry.CallOpts, onChain, offChain, deviationPercentagePPM)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) DeviationExceedsThreshold(onChain *big.Int, offChain *big.Int, deviationPercentagePPM *big.Int) (bool, error) {
	return _MercuryRegistry.Contract.DeviationExceedsThreshold(&_MercuryRegistry.CallOpts, onChain, offChain, deviationPercentagePPM)
}

func (_MercuryRegistry *MercuryRegistryCaller) GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryFeed, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "getLatestFeedData", feedIds)

	if err != nil {
		return *new([]MercuryRegistryFeed), err
	}

	out0 := *abi.ConvertType(out[0], new([]MercuryRegistryFeed)).(*[]MercuryRegistryFeed)

	return out0, err

}

func (_MercuryRegistry *MercuryRegistrySession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryFeed, error) {
	return _MercuryRegistry.Contract.GetLatestFeedData(&_MercuryRegistry.CallOpts, feedIds)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryFeed, error) {
	return _MercuryRegistry.Contract.GetLatestFeedData(&_MercuryRegistry.CallOpts, feedIds)
}

func (_MercuryRegistry *MercuryRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistry *MercuryRegistrySession) Owner() (common.Address, error) {
	return _MercuryRegistry.Contract.Owner(&_MercuryRegistry.CallOpts)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) Owner() (common.Address, error) {
	return _MercuryRegistry.Contract.Owner(&_MercuryRegistry.CallOpts)
}

func (_MercuryRegistry *MercuryRegistryCaller) PackPriceDeviationAndStaleness(opts *bind.CallOpts, price *big.Int, observationsTimestamp uint32, stalenessSeconds uint32, deviationPercentagePPM uint32) ([32]byte, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "packPriceDeviationAndStaleness", price, observationsTimestamp, stalenessSeconds, deviationPercentagePPM)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_MercuryRegistry *MercuryRegistrySession) PackPriceDeviationAndStaleness(price *big.Int, observationsTimestamp uint32, stalenessSeconds uint32, deviationPercentagePPM uint32) ([32]byte, error) {
	return _MercuryRegistry.Contract.PackPriceDeviationAndStaleness(&_MercuryRegistry.CallOpts, price, observationsTimestamp, stalenessSeconds, deviationPercentagePPM)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) PackPriceDeviationAndStaleness(price *big.Int, observationsTimestamp uint32, stalenessSeconds uint32, deviationPercentagePPM uint32) ([32]byte, error) {
	return _MercuryRegistry.Contract.PackPriceDeviationAndStaleness(&_MercuryRegistry.CallOpts, price, observationsTimestamp, stalenessSeconds, deviationPercentagePPM)
}

func (_MercuryRegistry *MercuryRegistryCaller) RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "revertForFeedLookup", feeds)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistry *MercuryRegistrySession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistry.Contract.RevertForFeedLookup(&_MercuryRegistry.CallOpts, feeds)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistry.Contract.RevertForFeedLookup(&_MercuryRegistry.CallOpts, feeds)
}

func (_MercuryRegistry *MercuryRegistryCaller) SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

	error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "s_feedMapping", arg0)

	outstruct := new(SFeedMapping)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ObservationsTimestamp = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.Price = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Ask = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.FeedName = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.FeedId = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Active = *abi.ConvertType(out[6], new(bool)).(*bool)
	outstruct.DeviationPercentagePPM = *abi.ConvertType(out[7], new(uint32)).(*uint32)
	outstruct.StalenessSeconds = *abi.ConvertType(out[8], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MercuryRegistry *MercuryRegistrySession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistry.Contract.SFeedMapping(&_MercuryRegistry.CallOpts, arg0)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistry.Contract.SFeedMapping(&_MercuryRegistry.CallOpts, arg0)
}

func (_MercuryRegistry *MercuryRegistryCaller) SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "s_feeds", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MercuryRegistry *MercuryRegistrySession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistry.Contract.SFeeds(&_MercuryRegistry.CallOpts, arg0)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistry.Contract.SFeeds(&_MercuryRegistry.CallOpts, arg0)
}

func (_MercuryRegistry *MercuryRegistryCaller) SVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistry.contract.Call(opts, &out, "s_verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistry *MercuryRegistrySession) SVerifier() (common.Address, error) {
	return _MercuryRegistry.Contract.SVerifier(&_MercuryRegistry.CallOpts)
}

func (_MercuryRegistry *MercuryRegistryCallerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistry.Contract.SVerifier(&_MercuryRegistry.CallOpts)
}

func (_MercuryRegistry *MercuryRegistryTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistry.contract.Transact(opts, "acceptOwnership")
}

func (_MercuryRegistry *MercuryRegistrySession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistry.Contract.AcceptOwnership(&_MercuryRegistry.TransactOpts)
}

func (_MercuryRegistry *MercuryRegistryTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistry.Contract.AcceptOwnership(&_MercuryRegistry.TransactOpts)
}

func (_MercuryRegistry *MercuryRegistryTransactor) AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistry.contract.Transact(opts, "addFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistry *MercuryRegistrySession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.AddFeeds(&_MercuryRegistry.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistry *MercuryRegistryTransactorSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.AddFeeds(&_MercuryRegistry.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistry *MercuryRegistryTransactor) PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error) {
	return _MercuryRegistry.contract.Transact(opts, "performUpkeep", performData)
}

func (_MercuryRegistry *MercuryRegistrySession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.PerformUpkeep(&_MercuryRegistry.TransactOpts, performData)
}

func (_MercuryRegistry *MercuryRegistryTransactorSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.PerformUpkeep(&_MercuryRegistry.TransactOpts, performData)
}

func (_MercuryRegistry *MercuryRegistryTransactor) SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistry.contract.Transact(opts, "setFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistry *MercuryRegistrySession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.SetFeeds(&_MercuryRegistry.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistry *MercuryRegistryTransactorSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.SetFeeds(&_MercuryRegistry.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistry *MercuryRegistryTransactor) SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistry.contract.Transact(opts, "setVerifier", verifier)
}

func (_MercuryRegistry *MercuryRegistrySession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.SetVerifier(&_MercuryRegistry.TransactOpts, verifier)
}

func (_MercuryRegistry *MercuryRegistryTransactorSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.SetVerifier(&_MercuryRegistry.TransactOpts, verifier)
}

func (_MercuryRegistry *MercuryRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MercuryRegistry.contract.Transact(opts, "transferOwnership", to)
}

func (_MercuryRegistry *MercuryRegistrySession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.TransferOwnership(&_MercuryRegistry.TransactOpts, to)
}

func (_MercuryRegistry *MercuryRegistryTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistry.Contract.TransferOwnership(&_MercuryRegistry.TransactOpts, to)
}

type MercuryRegistryFeedUpdatedIterator struct {
	Event *MercuryRegistryFeedUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryFeedUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryFeedUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryFeedUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryFeedUpdatedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryFeedUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryFeedUpdated struct {
	ObservationsTimestamp uint32
	Price                 *big.Int
	Bid                   *big.Int
	Ask                   *big.Int
	FeedId                string
	Raw                   types.Log
}

func (_MercuryRegistry *MercuryRegistryFilterer) FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryFeedUpdatedIterator, error) {

	logs, sub, err := _MercuryRegistry.contract.FilterLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryFeedUpdatedIterator{contract: _MercuryRegistry.contract, event: "FeedUpdated", logs: logs, sub: sub}, nil
}

func (_MercuryRegistry *MercuryRegistryFilterer) WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryFeedUpdated) (event.Subscription, error) {

	logs, sub, err := _MercuryRegistry.contract.WatchLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryFeedUpdated)
				if err := _MercuryRegistry.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistry *MercuryRegistryFilterer) ParseFeedUpdated(log types.Log) (*MercuryRegistryFeedUpdated, error) {
	event := new(MercuryRegistryFeedUpdated)
	if err := _MercuryRegistry.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryOwnershipTransferRequestedIterator struct {
	Event *MercuryRegistryOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistry *MercuryRegistryFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistry.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryOwnershipTransferRequestedIterator{contract: _MercuryRegistry.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MercuryRegistry *MercuryRegistryFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistry.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryOwnershipTransferRequested)
				if err := _MercuryRegistry.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistry *MercuryRegistryFilterer) ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryOwnershipTransferRequested, error) {
	event := new(MercuryRegistryOwnershipTransferRequested)
	if err := _MercuryRegistry.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryOwnershipTransferredIterator struct {
	Event *MercuryRegistryOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistry *MercuryRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistry.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryOwnershipTransferredIterator{contract: _MercuryRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MercuryRegistry *MercuryRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistry.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryOwnershipTransferred)
				if err := _MercuryRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistry *MercuryRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*MercuryRegistryOwnershipTransferred, error) {
	event := new(MercuryRegistryOwnershipTransferred)
	if err := _MercuryRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SFeedMapping struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM uint32
	StalenessSeconds       uint32
}

func (_MercuryRegistry *MercuryRegistry) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MercuryRegistry.abi.Events["FeedUpdated"].ID:
		return _MercuryRegistry.ParseFeedUpdated(log)
	case _MercuryRegistry.abi.Events["OwnershipTransferRequested"].ID:
		return _MercuryRegistry.ParseOwnershipTransferRequested(log)
	case _MercuryRegistry.abi.Events["OwnershipTransferred"].ID:
		return _MercuryRegistry.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MercuryRegistryFeedUpdated) Topic() common.Hash {
	return common.HexToHash("0xfd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc2")
}

func (MercuryRegistryOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MercuryRegistryOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_MercuryRegistry *MercuryRegistry) Address() common.Address {
	return _MercuryRegistry.address
}

type MercuryRegistryInterface interface {
	CheckCallback(opts *bind.CallOpts, values [][]byte, lookupData []byte) (bool, []byte, error)

	CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error)

	DeviationExceedsThreshold(opts *bind.CallOpts, onChain *big.Int, offChain *big.Int, deviationPercentagePPM *big.Int) (bool, error)

	GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryFeed, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PackPriceDeviationAndStaleness(opts *bind.CallOpts, price *big.Int, observationsTimestamp uint32, stalenessSeconds uint32, deviationPercentagePPM uint32) ([32]byte, error)

	RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error)

	SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

		error)

	SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error)

	SVerifier(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error)

	PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error)

	SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []uint32, stalenessSeconds []uint32) (*types.Transaction, error)

	SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryFeedUpdatedIterator, error)

	WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryFeedUpdated) (event.Subscription, error)

	ParseFeedUpdated(log types.Log) (*MercuryRegistryFeedUpdated, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MercuryRegistryOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
