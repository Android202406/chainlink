// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mercury_registry_composer

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type MercuryRegistryComposerFeed struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

var MercuryRegistryComposerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"scriptHash\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"functionsArguments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"useMercury\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"feedParamKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"timeParamKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ComposerRequestV1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"DuplicateFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"currentTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incomingTimestamp\",\"type\":\"uint32\"}],\"name\":\"StaleReport\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"addFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"lookupData\",\"type\":\"bytes\"}],\"name\":\"checkCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"fromHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"name\":\"fromHexChar\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"}],\"name\":\"getLatestFeedData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"internalType\":\"structMercuryRegistryComposer.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"}],\"name\":\"revertForFeedLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_feedMapping\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_feeds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_verifier\",\"outputs\":[{\"internalType\":\"contractIVerifierProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"setFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620047ca380380620047ca83398101604081905262000034916200083b565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000f5565b5050600280546001600160a01b0319166001600160a01b03841617905550620000ea85858585620001a0565b505050505062000bdb565b336001600160a01b038216036200014f5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001aa620003e0565b838383838251845114620001d1576040516351a7f87960e01b815260040160405180910390fd5b8151845114620001f4576040516351a7f87960e01b815260040160405180910390fd5b805184511462000217576040516351a7f87960e01b815260040160405180910390fd5b60005b600354811015620002905760006004600383815481106200023f576200023f62000971565b90600052602060002001604051620002589190620009c3565b908152604051908190036020019020600501805491151560ff1990921691909117905580620002878162000a41565b9150506200021a565b5060005b8851811015620003bf576000898281518110620002b557620002b562000971565b60200260200101519050600481604051620002d1919062000a69565b9081526040519081900360200190206005015460ff16156200030a57806040516384da80d360e01b815260040162000082919062000a87565b62000372818a848151811062000324576200032462000971565b60200260200101518a858151811062000341576200034162000971565b60200260200101518a86815181106200035e576200035e62000971565b60200260200101516200043e60201b60201c565b600160048260405162000386919062000a69565b908152604051908190036020019020600501805491151560ff199092169190911790555080620003b68162000a41565b91505062000294565b508751620003d59060039060208b019062000537565b505050505050505050565b6000546001600160a01b031633146200043c5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640162000082565b565b8260048560405162000451919062000a69565b9081526020016040518091039020600301908162000470919062000b0f565b508160048560405162000484919062000a69565b908152602001604051809103902060050160016101000a8154816001600160c01b03021916908360170b6001600160c01b0316021790555080600485604051620004cf919062000a69565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff1602179055508360048560405162000511919062000a69565b9081526020016040518091039020600401908162000530919062000b0f565b5050505050565b82805482825590600052602060002090810192821562000582579160200282015b8281111562000582578251829062000571908262000b0f565b509160200191906001019062000558565b506200059092915062000594565b5090565b8082111562000590576000620005ab8282620005b5565b5060010162000594565b508054620005c39062000987565b6000825580601f10620005d4575050565b601f016020900490600052602060002090810190620005f49190620005f7565b50565b5b80821115620005905760008155600101620005f8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200064f576200064f6200060e565b604052919050565b60006001600160401b038211156200067357620006736200060e565b5060051b60200190565b60005b838110156200069a57818101518382015260200162000680565b50506000910152565b6000601f8381840112620006b657600080fd5b82516020620006cf620006c98362000657565b62000624565b82815260059290921b85018101918181019087841115620006ef57600080fd5b8287015b84811015620007915780516001600160401b0380821115620007155760008081fd5b818a0191508a603f8301126200072b5760008081fd5b858201516040828211156200074457620007446200060e565b62000757828b01601f1916890162000624565b92508183528c818386010111156200076f5760008081fd5b62000780828985018387016200067d565b5050845250918301918301620006f3565b50979650505050505050565b600082601f830112620007af57600080fd5b81516020620007c2620006c98362000657565b82815260059290921b84018101918181019086841115620007e257600080fd5b8286015b848110156200081357805163ffffffff81168114620008055760008081fd5b8352918301918301620007e6565b509695505050505050565b80516001600160a01b03811681146200083657600080fd5b919050565b600080600080600060a086880312156200085457600080fd5b85516001600160401b03808211156200086c57600080fd5b6200087a89838a01620006a3565b96506020915081880151818111156200089257600080fd5b620008a08a828b01620006a3565b965050604088015181811115620008b657600080fd5b8801601f81018a13620008c857600080fd5b8051620008d9620006c98262000657565b81815260059190911b8201840190848101908c831115620008f957600080fd5b928501925b828410156200092a5783518060170b81146200091a5760008081fd5b82529285019290850190620008fe565b60608c01519098509450505050808211156200094557600080fd5b5062000954888289016200079d565b92505062000965608087016200081e565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200099c57607f821691505b602082108103620009bd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354620009d38162000987565b60018281168015620009ee576001811462000a045762000a35565b60ff198416875282151583028701945062000a35565b8760005260208060002060005b8581101562000a2c5781548a82015290840190820162000a11565b50505082870194505b50929695505050505050565b60006001820162000a6257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825162000a7d8184602087016200067d565b9190910192915050565b602081526000825180602084015262000aa88160408501602087016200067d565b601f01601f19169190910160400192915050565b601f82111562000b0a57600081815260208120601f850160051c8101602086101562000ae55750805b601f850160051c820191505b8181101562000b065782815560010162000af1565b5050505b505050565b81516001600160401b0381111562000b2b5762000b2b6200060e565b62000b438162000b3c845462000987565b8462000abc565b602080601f83116001811462000b7b576000841562000b625750858301515b600019600386901b1c1916600185901b17855562000b06565b600085815260208120601f198616915b8281101562000bac5788860151825594840194600190910190840162000b8b565b508582101562000bcb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613bdf8062000beb6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d94811a511610066578063d94811a514610264578063da73083614610277578063dea5ad5b14610297578063f2fde38b146102aa57600080fd5b80638da5cb5b146101df5780638e7e34d71461021e5780639cd8ebe914610231578063b88ecb051461024457600080fd5b80635437988d116100d35780635437988d14610189578063601303811461019c5780636e04ff0d146101c457806379ba5097146101d757600080fd5b8063157e9157146101055780632ecb20d31461012e5780634585e33b146101535780634b56a42e14610168575b600080fd5b610118610113366004612960565b6102bd565b60405161012591906129e7565b60405180910390f35b61014161013c3660046129fa565b610369565b60405160ff9091168152602001610125565b610166610161366004612a1d565b6105f0565b005b61017b610176366004612bf7565b610a16565b604051610125929190612ccb565b610166610197366004612ce6565b610d2c565b6101af6101aa366004612d1c565b610d7b565b60405161012599989796959493929190612d51565b61017b6101d2366004612a1d565b610f19565b610166611008565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610125565b61011861022c366004612d1c565b611105565b61017b61023f366004612e54565b611246565b610257610252366004612e54565b611680565b6040516101259190612e89565b610166610272366004613043565b611965565b6002546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101666102a5366004613043565b611c16565b6101666102b8366004612ce6565b611e16565b600381815481106102cd57600080fd5b9060005260206000200160009150905080546102e89061314c565b80601f01602080910402602001604051908101604052809291908181526020018280546103149061314c565b80156103615780601f1061033657610100808354040283529160200191610361565b820191906000526020600020905b81548152906001019060200180831161034457829003601f168201915b505050505081565b60007f300000000000000000000000000000000000000000000000000000000000000060f883901b7fff00000000000000000000000000000000000000000000000000000000000000161080159061040757507f390000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b1561041d576104176030836131ce565b92915050565b7f610000000000000000000000000000000000000000000000000000000000000060f883901b7fff0000000000000000000000000000000000000000000000000000000000000016108015906104b957507f660000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156104d55760616104cb83600a6131e7565b61041791906131ce565b7f410000000000000000000000000000000000000000000000000000000000000060f883901b7fff00000000000000000000000000000000000000000000000000000000000000161080159061057157507f460000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156105835760416104cb83600a6131e7565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e79060208082526004908201527f6661696c00000000000000000000000000000000000000000000000000000000604082015260600190565b60405180910390fd5b60006105fe82840184612bf7565b50905060005b8151811015610a1057600254825160009173ffffffffffffffffffffffffffffffffffffffff1690638e760afe9085908590811061064457610644613200565b60200260200101516040518263ffffffff1660e01b815260040161066891906129e7565b6000604051808303816000875af1158015610687573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106cd919081019061327f565b8060200190518101906106e091906132e7565b9050600061071282600001516040516020016106fe91815260200190565b604051602081830303815290604052611e2a565b9050600481604051610724919061338f565b9081526040519081900360200190206005015460ff1661077257806040517f716a11d80000000000000000000000000000000000000000000000000000000081526004016105e791906129e7565b816020015163ffffffff1660048260405161078d919061338f565b9081526040519081900360200190205463ffffffff16111561080657806004826040516107ba919061338f565b9081526040516020918190038201812054918501517f4041aa910000000000000000000000000000000000000000000000000000000082526105e7939263ffffffff16916004016133ab565b816060015160048260405161081b919061338f565b908152604051908190036020018120600101805477ffffffffffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffff0000000000000000000000000000000000000000000000009093169290921790915560808301519060049061088b90849061338f565b90815260408051918290036020018220600201805477ffffffffffffffffffffffffffffffffffffffffffffffff949094167fffffffffffffffff0000000000000000000000000000000000000000000000009094169390931790925590830151906004906108fb90849061338f565b908152602001604051809103902060000160046101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff160217905550816020015160048260405161096a919061338f565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055507ffd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc28260200151836040015184606001518560800151856040516109e09594939291906133db565b60405180910390a162030d405a10156109fb57505050505050565b50508080610a0890613420565b915050610604565b50505050565b600060608351600114610aab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f73686f756c64206f6e6c792068617665206f6e65206974656d20666f7220616260448201527f692d6465636f64696e670000000000000000000000000000000000000000000060648201526084016105e7565b600084600081518110610ac057610ac0613200565b6020026020010151806020019051810190610adb9190613458565b5090506000610b118260408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600181527f2c00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820181905284518086019095529251845283015291925090610b76838361205b565b610b819060016134c9565b67ffffffffffffffff811115610b9957610b99612a8f565b604051908082528060200260200182016040528015610bcc57816020015b6060815260200190600190039081610bb75790505b50905060005b8151811015610c1d57610bed610be885856120f5565b612114565b828281518110610bff57610bff613200565b60200260200101819052508080610c1590613420565b915050610bd2565b506000815167ffffffffffffffff811115610c3a57610c3a612a8f565b604051908082528060200260200182016040528015610c6d57816020015b6060815260200190600190039081610c585790505b50905060005b8251811015610cd4576000610ca0848381518110610c9357610c93613200565b6020026020010151611105565b905080838381518110610cb557610cb5613200565b6020026020010181905250508080610ccc90613420565b915050610c73565b5060008189604051602001610cea9291906134dc565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052915115159a91995090975050505050505050565b610d3461217d565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b8051602081830181018051600482529282019190930120915280546001820154600283015460038401805463ffffffff851695640100000000909504601790810b9594810b9493900b929190610dd09061314c565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfc9061314c565b8015610e495780601f10610e1e57610100808354040283529160200191610e49565b820191906000526020600020905b815481529060010190602001808311610e2c57829003601f168201915b505050505090806004018054610e5e9061314c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8a9061314c565b8015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b5050506005909301549192505060ff811690610100810460170b9063ffffffff7901000000000000000000000000000000000000000000000000009091041689565b6000606060006003805480602002602001604051908101604052809291908181526020016000905b82821015610fed578382906000526020600020018054610f609061314c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8c9061314c565b8015610fd95780601f10610fae57610100808354040283529160200191610fd9565b820191906000526020600020905b815481529060010190602001808311610fbc57829003601f168201915b505050505081526020019060010190610f41565b505050509050610ffc81611246565b92509250509250929050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016105e7565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b805160609082906111189060029061359f565b1561112257600080fd5b60006002825161113291906135b3565b67ffffffffffffffff81111561114a5761114a612a8f565b6040519080825280601f01601f191660200182016040528015611174576020820181803683370190505b50905060005b6002835161118891906135b3565b81101561123e576111c68361119e8360026135c7565b6111a99060016134c9565b815181106111b9576111b9613200565b016020015160f81c610369565b6111d5846111a98460026135c7565b6111e0906010613604565b6111ea91906131e7565b60f81b8282815181106111ff576111ff613200565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061123781613420565b905061117a565b509392505050565b600060606000611254612200565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161126f57505060408051602081019091526000808252919250905b86518110156115b757600060048883815181106112b7576112b7613200565b60200260200101516040516112cc919061338f565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b60608301526003810180546080840191906113339061314c565b80601f016020809104026020016040519081016040528092919081815260200182805461135f9061314c565b80156113ac5780601f10611381576101008083540402835291602001916113ac565b820191906000526020600020905b81548152906001019060200180831161138f57829003601f168201915b505050505081526020016004820180546113c59061314c565b80601f01602080910402602001604051908101604052809291908181526020018280546113f19061314c565b801561143e5780601f106114135761010080835404028352916020019161143e565b820191906000526020600020905b81548152906001019060200180831161142157829003601f168201915b50505091835250506005919091015460ff81161515602080840191909152610100820460170b604084015279010000000000000000000000000000000000000000000000000090910463ffffffff166060909201919091528101519091506000906114c29077ffffffffffffffffffffffffffffffffffffffffffffffff16612297565b82516114d39063ffffffff16612297565b6114fa8460e0015177ffffffffffffffffffffffffffffffffffffffffffffffff16612297565b60405160200161150c9392919061362d565b6040516020818303038152906040529050838160018b5161152d91906136f6565b851461156e576040518060400160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061157f565b604051806020016040528060008152505b60405160200161159193929190613709565b6040516020818303038152906040529350505080806115af90613420565b915050611298565b5080826000815181106115cc576115cc613200565b60200260200101819052508160016040518060400160405280600981526020017f6665656449644865780000000000000000000000000000000000000000000000815250886040518060400160405280600b81526020017f626c6f636b4e756d626572000000000000000000000000000000000000000000815250876040517f0999f8250000000000000000000000000000000000000000000000000000000081526004016105e7969594939291906137a1565b60606000825167ffffffffffffffff81111561169e5761169e612a8f565b60405190808252806020026020018201604052801561173257816020015b60408051610120810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816116bc5790505b50905060005b835181101561195e57600484828151811061175557611755613200565b602002602001015160405161176a919061338f565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b60608301526003810180546080840191906117d19061314c565b80601f01602080910402602001604051908101604052809291908181526020018280546117fd9061314c565b801561184a5780601f1061181f5761010080835404028352916020019161184a565b820191906000526020600020905b81548152906001019060200180831161182d57829003601f168201915b505050505081526020016004820180546118639061314c565b80601f016020809104026020016040519081016040528092919081815260200182805461188f9061314c565b80156118dc5780601f106118b1576101008083540402835291602001916118dc565b820191906000526020600020905b8154815290600101906020018083116118bf57829003601f168201915b50505091835250506005919091015460ff811615156020830152610100810460170b6040830152790100000000000000000000000000000000000000000000000000900463ffffffff16606090910152825183908390811061194057611940613200565b6020026020010181905250808061195690613420565b915050611738565b5092915050565b61196d61217d565b8383838382518451146119ac576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81518451146119e7576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114611a22576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600354811015611ab0576000600460038381548110611a4657611a46613200565b90600052602060002001604051611a5d9190613853565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921691909117905580611aa881613420565b915050611a25565b5060005b8851811015611bf7576000898281518110611ad157611ad1613200565b60200260200101519050600481604051611aeb919061338f565b9081526040519081900360200190206005015460ff1615611b3a57806040517f84da80d30000000000000000000000000000000000000000000000000000000081526004016105e791906129e7565b611b91818a8481518110611b5057611b50613200565b60200260200101518a8581518110611b6a57611b6a613200565b60200260200101518a8681518110611b8457611b84613200565b6020026020010151612355565b6001600482604051611ba3919061338f565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555080611bef81613420565b915050611ab4565b508751611c0b9060039060208b01906128a3565b505050505050505050565b611c1e61217d565b838383838251845114611c5d576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151845114611c98576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114611cd3576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8851811015611c0b576000898281518110611cf357611cf3613200565b60200260200101519050600481604051611d0d919061338f565b9081526040519081900360200190206005015460ff1615611d5c57806040517f84da80d30000000000000000000000000000000000000000000000000000000081526004016105e791906129e7565b611d72818a8481518110611b5057611b50613200565b6001600482604051611d84919061338f565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01611e018282613936565b50508080611e0e90613420565b915050611cd6565b611e1e61217d565b611e2781612464565b50565b6060600082516002611e3c91906135c7565b67ffffffffffffffff811115611e5457611e54612a8f565b6040519080825280601f01601f191660200182016040528015611e7e576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b845181101561203157818251868381518110611ed757611ed7613200565b0160200151611ee9919060f81c6135b3565b81518110611ef957611ef9613200565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611f2c8360026135c7565b81518110611f3c57611f3c613200565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868381518110611f8057611f80613200565b0160200151611f92919060f81c61359f565b81518110611fa257611fa2613200565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611fd58360026135c7565b611fe09060016134c9565b81518110611ff057611ff0613200565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061202981613420565b915050611eb9565b50816040516020016120439190613a50565b60405160208183030381529060405292505050919050565b600080826000015161207f8560000151866020015186600001518760200151612559565b61208991906134c9565b90505b8351602085015161209d91906134c9565b811161195e57816120ad81613420565b92505082600001516120e48560200151836120c891906136f6565b86516120d491906136f6565b8386600001518760200151612559565b6120ee91906134c9565b905061208c565b604080518082019091526000808252602082015261195e83838361267b565b60606000826000015167ffffffffffffffff81111561213557612135612a8f565b6040519080825280601f01601f19166020018201604052801561215f576020820181803683370190505b509050600060208201905061195e8185602001518660000151612729565b60005473ffffffffffffffffffffffffffffffffffffffff1633146121fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016105e7565b565b60004661a4b1811480612215575062066eed81145b1561229057606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228a9190613a95565b91505090565b4391505090565b606060006122a4836127c1565b600101905060008167ffffffffffffffff8111156122c4576122c4612a8f565b6040519080825280601f01601f1916602001820160405280156122ee576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846122f857509392505050565b82600485604051612366919061338f565b908152602001604051809103902060030190816123839190613936565b5081600485604051612395919061338f565b908152602001604051809103902060050160016101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555080600485604051612400919061338f565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff16021790555083600485604051612440919061338f565b9081526020016040518091039020600401908161245d9190613936565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff8216036124e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016105e7565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008381868511612664576020851161261357600085156125a55760016125818760206136f6565b61258c9060086135c7565b612597906002613bc6565b6125a191906136f6565b1990505b845181166000876125b68b8b6134c9565b6125c091906136f6565b855190915083165b828114612605578186106125ed576125e08b8b6134c9565b9650505050505050612673565b856125f781613420565b9650508386511690506125c8565b859650505050505050612673565b508383206000905b61262586896136f6565b8211612662578583208082036126415783945050505050612673565b61264c6001856134c9565b935050818061265a90613420565b92505061261b565b505b61266e87876134c9565b925050505b949350505050565b604080518082019091526000808252602082015260006126ad8560000151866020015186600001518760200151612559565b6020808701805191860191909152519091506126c990826136f6565b8352845160208601516126dc91906134c9565b81036126eb576000855261271d565b835183516126f991906134c9565b855186906127089083906136f6565b905250835161271790826134c9565b60208601525b829150505b9392505050565b6020811061276157815183526127406020846134c9565b925061274d6020836134c9565b915061275a6020826136f6565b9050612729565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81156127ae5760016127958360206136f6565b6127a190610100613bc6565b6127ab91906136f6565b90505b9151835183169219169190911790915250565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061280a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612836576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061285457662386f26fc10000830492506010015b6305f5e100831061286c576305f5e100830492506008015b612710831061288057612710830492506004015b60648310612892576064830492506002015b600a83106104175760010192915050565b8280548282559060005260206000209081019282156128e9579160200282015b828111156128e957825182906128d99082613936565b50916020019190600101906128c3565b506128f59291506128f9565b5090565b808211156128f557600061290d8282612916565b506001016128f9565b5080546129229061314c565b6000825580601f10612932575050565b601f016020900490600052602060002090810190611e2791905b808211156128f5576000815560010161294c565b60006020828403121561297257600080fd5b5035919050565b60005b8381101561299457818101518382015260200161297c565b50506000910152565b600081518084526129b5816020860160208601612979565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612722602083018461299d565b600060208284031215612a0c57600080fd5b813560ff8116811461272257600080fd5b60008060208385031215612a3057600080fd5b823567ffffffffffffffff80821115612a4857600080fd5b818501915085601f830112612a5c57600080fd5b813581811115612a6b57600080fd5b866020828501011115612a7d57600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715612ae257612ae2612a8f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612b2f57612b2f612a8f565b604052919050565b600067ffffffffffffffff821115612b5157612b51612a8f565b5060051b60200190565b600067ffffffffffffffff821115612b7557612b75612a8f565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112612bb257600080fd5b8135612bc5612bc082612b5b565b612ae8565b818152846020838601011115612bda57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612c0a57600080fd5b823567ffffffffffffffff80821115612c2257600080fd5b818501915085601f830112612c3657600080fd5b81356020612c46612bc083612b37565b82815260059290921b84018101918181019089841115612c6557600080fd5b8286015b84811015612c9d57803586811115612c815760008081fd5b612c8f8c86838b0101612ba1565b845250918301918301612c69565b5096505086013592505080821115612cb457600080fd5b50612cc185828601612ba1565b9150509250929050565b8215158152604060208201526000612673604083018461299d565b600060208284031215612cf857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461272257600080fd5b600060208284031215612d2e57600080fd5b813567ffffffffffffffff811115612d4557600080fd5b61267384828501612ba1565b600061012063ffffffff808d1684528b60170b60208501528a60170b60408501528960170b6060850152816080850152612d8d8285018a61299d565b915083820360a0850152612da1828961299d565b96151560c085015260179590950b60e084015250509116610100909101529695505050505050565b600082601f830112612dda57600080fd5b81356020612dea612bc083612b37565b82815260059290921b84018101918181019086841115612e0957600080fd5b8286015b84811015612e4957803567ffffffffffffffff811115612e2d5760008081fd5b612e3b8986838b0101612ba1565b845250918301918301612e0d565b509695505050505050565b600060208284031215612e6657600080fd5b813567ffffffffffffffff811115612e7d57600080fd5b61267384828501612dc9565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612fb0578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805163ffffffff16845261012088820151612f008a87018260170b9052565b5087820151612f138987018260170b9052565b50606080830151612f288288018260170b9052565b50506080808301518282880152612f418388018261299d565b9250505060a08083015186830382880152612f5c838261299d565b9250505060c080830151612f738288018215159052565b505060e080830151612f898288018260170b9052565b50506101009182015163ffffffff1694909101939093529386019390860190600101612eb0565b509098975050505050505050565b8060170b8114611e2757600080fd5b63ffffffff81168114611e2757600080fd5b600082601f830112612ff057600080fd5b81356020613000612bc083612b37565b82815260059290921b8401810191818101908684111561301f57600080fd5b8286015b84811015612e4957803561303681612fcd565b8352918301918301613023565b6000806000806080858703121561305957600080fd5b843567ffffffffffffffff8082111561307157600080fd5b61307d88838901612dc9565b955060209150818701358181111561309457600080fd5b6130a089828a01612dc9565b9550506040870135818111156130b557600080fd5b8701601f810189136130c657600080fd5b80356130d4612bc082612b37565b81815260059190911b8201840190848101908b8311156130f357600080fd5b928501925b8284101561311a57833561310b81612fbe565b825292850192908501906130f8565b9650505050606087013591508082111561313357600080fd5b5061314087828801612fdf565b91505092959194509250565b600181811c9082168061316057607f821691505b602082108103613199577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60ff82811682821603908111156104175761041761319f565b60ff81811683821601908111156104175761041761319f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061323d612bc084612b5b565b905082815283838301111561325157600080fd5b612722836020830184612979565b600082601f83011261327057600080fd5b6127228383516020850161322f565b60006020828403121561329157600080fd5b815167ffffffffffffffff8111156132a857600080fd5b6126738482850161325f565b80516132bf81612fcd565b919050565b80516132bf81612fbe565b805167ffffffffffffffff811681146132bf57600080fd5b600061012082840312156132fa57600080fd5b613302612abe565b82518152613312602084016132b4565b6020820152613323604084016132c4565b6040820152613334606084016132c4565b6060820152613345608084016132c4565b608082015261335660a084016132cf565b60a082015260c083015160c082015261337160e084016132cf565b60e08201526101006133848185016132cf565b908201529392505050565b600082516133a1818460208701612979565b9190910192915050565b6060815260006133be606083018661299d565b63ffffffff94851660208401529290931660409091015292915050565b63ffffffff861681528460170b60208201528360170b60408201528260170b606082015260a06080820152600061341560a083018461299d565b979650505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134515761345161319f565b5060010190565b6000806040838503121561346b57600080fd5b825167ffffffffffffffff8082111561348357600080fd5b818501915085601f83011261349757600080fd5b6134a68683516020850161322f565b935060208501519150808211156134bc57600080fd5b50612cc18582860161325f565b808201808211156104175761041761319f565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015613551577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa088870301855261353f86835161299d565b95509382019390820190600101613505565b505085840381870152505050613567818561299d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826135ae576135ae613570565b500690565b6000826135c2576135c2613570565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135ff576135ff61319f565b500290565b600060ff821660ff84168160ff04811182151516156136255761362561319f565b029392505050565b7f2800000000000000000000000000000000000000000000000000000000000000815260008451613665816001850160208901612979565b80830190507f2c0000000000000000000000000000000000000000000000000000000000000080600183015285516136a4816002850160208a01612979565b600292019182015283516136bf816003840160208801612979565b7f29000000000000000000000000000000000000000000000000000000000000006003929091019182015260040195945050505050565b818103818111156104175761041761319f565b6000845161371b818460208901612979565b84519083019061372f818360208901612979565b8451910190613742818360208801612979565b0195945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561379457828403895261378284835161299d565b9885019893509084019060010161376a565b5091979650505050505050565b6000610100808352601081840152507f544f444f5f5343524950545f48415348000000000000000000000000000000006101208301526101408060208401526137ec8184018a61374c565b905087151560408401528281036060840152613808818861299d565b9050828103608084015261381c818761374c565b905082810360a0840152613830818661299d565b60c0840194909452505080820360e0909101526000815260200195945050505050565b60008083546138618161314c565b6001828116801561387957600181146138ac576138db565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506138db565b8760005260208060002060005b858110156138d25781548a8201529084019082016138b9565b50505082870194505b50929695505050505050565b601f82111561393157600081815260208120601f850160051c8101602086101561390e5750805b601f850160051c820191505b8181101561392d5782815560010161391a565b5050505b505050565b815167ffffffffffffffff81111561395057613950612a8f565b6139648161395e845461314c565b846138e7565b602080601f8311600181146139b757600084156139815750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561392d565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015613a04578886015182559484019460019091019084016139e5565b5085821015613a4057878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f3078000000000000000000000000000000000000000000000000000000000000815260008251613a88816002850160208701612979565b9190910160020192915050565b600060208284031215613aa757600080fd5b5051919050565b600181815b80851115613b0757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613aed57613aed61319f565b80851615613afa57918102915b93841c9390800290613ab3565b509250929050565b600082613b1e57506001610417565b81613b2b57506000610417565b8160018114613b415760028114613b4b57613b67565b6001915050610417565b60ff841115613b5c57613b5c61319f565b50506001821b610417565b5060208310610133831016604e8410600b8410161715613b8a575081810a610417565b613b948383613aae565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156136255761362561319f565b60006127228383613b0f56fea164736f6c6343000810000a",
}

var MercuryRegistryComposerABI = MercuryRegistryComposerMetaData.ABI

var MercuryRegistryComposerBin = MercuryRegistryComposerMetaData.Bin

func DeployMercuryRegistryComposer(auth *bind.TransactOpts, backend bind.ContractBackend, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32, verifier common.Address) (common.Address, *types.Transaction, *MercuryRegistryComposer, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MercuryRegistryComposerBin), backend, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds, verifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MercuryRegistryComposer{MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

type MercuryRegistryComposer struct {
	address common.Address
	abi     abi.ABI
	MercuryRegistryComposerCaller
	MercuryRegistryComposerTransactor
	MercuryRegistryComposerFilterer
}

type MercuryRegistryComposerCaller struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerTransactor struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerFilterer struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerSession struct {
	Contract     *MercuryRegistryComposer
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerCallerSession struct {
	Contract *MercuryRegistryComposerCaller
	CallOpts bind.CallOpts
}

type MercuryRegistryComposerTransactorSession struct {
	Contract     *MercuryRegistryComposerTransactor
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerRaw struct {
	Contract *MercuryRegistryComposer
}

type MercuryRegistryComposerCallerRaw struct {
	Contract *MercuryRegistryComposerCaller
}

type MercuryRegistryComposerTransactorRaw struct {
	Contract *MercuryRegistryComposerTransactor
}

func NewMercuryRegistryComposer(address common.Address, backend bind.ContractBackend) (*MercuryRegistryComposer, error) {
	abi, err := abi.JSON(strings.NewReader(MercuryRegistryComposerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMercuryRegistryComposer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposer{address: address, abi: abi, MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

func NewMercuryRegistryComposerCaller(address common.Address, caller bind.ContractCaller) (*MercuryRegistryComposerCaller, error) {
	contract, err := bindMercuryRegistryComposer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerCaller{contract: contract}, nil
}

func NewMercuryRegistryComposerTransactor(address common.Address, transactor bind.ContractTransactor) (*MercuryRegistryComposerTransactor, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerTransactor{contract: contract}, nil
}

func NewMercuryRegistryComposerFilterer(address common.Address, filterer bind.ContractFilterer) (*MercuryRegistryComposerFilterer, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFilterer{contract: contract}, nil
}

func bindMercuryRegistryComposer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerCaller.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) CheckCallback(opts *bind.CallOpts, data [][]byte, lookupData []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "checkCallback", data, lookupData)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) CheckCallback(data [][]byte, lookupData []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckCallback(&_MercuryRegistryComposer.CallOpts, data, lookupData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) CheckCallback(data [][]byte, lookupData []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckCallback(&_MercuryRegistryComposer.CallOpts, data, lookupData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "checkUpkeep", arg0)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) FromHex(opts *bind.CallOpts, s string) ([]byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "fromHex", s)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) FromHex(s string) ([]byte, error) {
	return _MercuryRegistryComposer.Contract.FromHex(&_MercuryRegistryComposer.CallOpts, s)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) FromHex(s string) ([]byte, error) {
	return _MercuryRegistryComposer.Contract.FromHex(&_MercuryRegistryComposer.CallOpts, s)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "fromHexChar", c)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) FromHexChar(c uint8) (uint8, error) {
	return _MercuryRegistryComposer.Contract.FromHexChar(&_MercuryRegistryComposer.CallOpts, c)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) FromHexChar(c uint8) (uint8, error) {
	return _MercuryRegistryComposer.Contract.FromHexChar(&_MercuryRegistryComposer.CallOpts, c)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "getLatestFeedData", feedIds)

	if err != nil {
		return *new([]MercuryRegistryComposerFeed), err
	}

	out0 := *abi.ConvertType(out[0], new([]MercuryRegistryComposerFeed)).(*[]MercuryRegistryComposerFeed)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "revertForFeedLookup", feeds)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

	error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feedMapping", arg0)

	outstruct := new(SFeedMapping)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ObservationsTimestamp = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.Price = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Ask = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.FeedName = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.FeedId = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Active = *abi.ConvertType(out[6], new(bool)).(*bool)
	outstruct.DeviationPercentagePPM = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.StalenessSeconds = *abi.ConvertType(out[8], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feeds", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "acceptOwnership")
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "addFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "performUpkeep", performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setVerifier", verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "transferOwnership", to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

type MercuryRegistryComposerFeedUpdatedIterator struct {
	Event *MercuryRegistryComposerFeedUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerFeedUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerFeedUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerFeedUpdated struct {
	ObservationsTimestamp uint32
	Price                 *big.Int
	Bid                   *big.Int
	Ask                   *big.Int
	FeedId                string
	Raw                   types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFeedUpdatedIterator{contract: _MercuryRegistryComposer.contract, event: "FeedUpdated", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerFeedUpdated)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error) {
	event := new(MercuryRegistryComposerFeedUpdated)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferRequestedIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferRequestedIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferRequested)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error) {
	event := new(MercuryRegistryComposerOwnershipTransferRequested)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferredIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferredIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferred)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error) {
	event := new(MercuryRegistryComposerOwnershipTransferred)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SFeedMapping struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MercuryRegistryComposer.abi.Events["FeedUpdated"].ID:
		return _MercuryRegistryComposer.ParseFeedUpdated(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferRequested"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferRequested(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferred"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MercuryRegistryComposerFeedUpdated) Topic() common.Hash {
	return common.HexToHash("0xfd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc2")
}

func (MercuryRegistryComposerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MercuryRegistryComposerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) Address() common.Address {
	return _MercuryRegistryComposer.address
}

type MercuryRegistryComposerInterface interface {
	CheckCallback(opts *bind.CallOpts, data [][]byte, lookupData []byte) (bool, []byte, error)

	CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error)

	FromHex(opts *bind.CallOpts, s string) ([]byte, error)

	FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error)

	GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error)

	SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

		error)

	SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error)

	SVerifier(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error)

	SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error)

	WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error)

	ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
