// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mercury_registry_composer

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type MercuryRegistryComposerFeed struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

var MercuryRegistryComposerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"scriptHash\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"functionsArguments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"useMercury\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"feedParamKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"timeParamKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ComposerRequestV1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"DuplicateFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"currentTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incomingTimestamp\",\"type\":\"uint32\"}],\"name\":\"StaleReport\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"addFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"fromHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"name\":\"fromHexChar\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"}],\"name\":\"getLatestFeedData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"internalType\":\"structMercuryRegistryComposer.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"}],\"name\":\"revertForFeedLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_feedMapping\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_feeds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_verifier\",\"outputs\":[{\"internalType\":\"contractIVerifierProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"setFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620044a0380380620044a083398101604081905262000034916200083b565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000f5565b5050600280546001600160a01b0319166001600160a01b03841617905550620000ea85858585620001a0565b505050505062000bdb565b336001600160a01b038216036200014f5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001aa620003e0565b838383838251845114620001d1576040516351a7f87960e01b815260040160405180910390fd5b8151845114620001f4576040516351a7f87960e01b815260040160405180910390fd5b805184511462000217576040516351a7f87960e01b815260040160405180910390fd5b60005b600354811015620002905760006004600383815481106200023f576200023f62000971565b90600052602060002001604051620002589190620009c3565b908152604051908190036020019020600501805491151560ff1990921691909117905580620002878162000a41565b9150506200021a565b5060005b8851811015620003bf576000898281518110620002b557620002b562000971565b60200260200101519050600481604051620002d1919062000a69565b9081526040519081900360200190206005015460ff16156200030a57806040516384da80d360e01b815260040162000082919062000a87565b62000372818a848151811062000324576200032462000971565b60200260200101518a858151811062000341576200034162000971565b60200260200101518a86815181106200035e576200035e62000971565b60200260200101516200043e60201b60201c565b600160048260405162000386919062000a69565b908152604051908190036020019020600501805491151560ff199092169190911790555080620003b68162000a41565b91505062000294565b508751620003d59060039060208b019062000537565b505050505050505050565b6000546001600160a01b031633146200043c5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640162000082565b565b8260048560405162000451919062000a69565b9081526020016040518091039020600301908162000470919062000b0f565b508160048560405162000484919062000a69565b908152602001604051809103902060050160016101000a8154816001600160c01b03021916908360170b6001600160c01b0316021790555080600485604051620004cf919062000a69565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff1602179055508360048560405162000511919062000a69565b9081526020016040518091039020600401908162000530919062000b0f565b5050505050565b82805482825590600052602060002090810192821562000582579160200282015b8281111562000582578251829062000571908262000b0f565b509160200191906001019062000558565b506200059092915062000594565b5090565b8082111562000590576000620005ab8282620005b5565b5060010162000594565b508054620005c39062000987565b6000825580601f10620005d4575050565b601f016020900490600052602060002090810190620005f49190620005f7565b50565b5b80821115620005905760008155600101620005f8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200064f576200064f6200060e565b604052919050565b60006001600160401b038211156200067357620006736200060e565b5060051b60200190565b60005b838110156200069a57818101518382015260200162000680565b50506000910152565b6000601f8381840112620006b657600080fd5b82516020620006cf620006c98362000657565b62000624565b82815260059290921b85018101918181019087841115620006ef57600080fd5b8287015b84811015620007915780516001600160401b0380821115620007155760008081fd5b818a0191508a603f8301126200072b5760008081fd5b858201516040828211156200074457620007446200060e565b62000757828b01601f1916890162000624565b92508183528c818386010111156200076f5760008081fd5b62000780828985018387016200067d565b5050845250918301918301620006f3565b50979650505050505050565b600082601f830112620007af57600080fd5b81516020620007c2620006c98362000657565b82815260059290921b84018101918181019086841115620007e257600080fd5b8286015b848110156200081357805163ffffffff81168114620008055760008081fd5b8352918301918301620007e6565b509695505050505050565b80516001600160a01b03811681146200083657600080fd5b919050565b600080600080600060a086880312156200085457600080fd5b85516001600160401b03808211156200086c57600080fd5b6200087a89838a01620006a3565b96506020915081880151818111156200089257600080fd5b620008a08a828b01620006a3565b965050604088015181811115620008b657600080fd5b8801601f81018a13620008c857600080fd5b8051620008d9620006c98262000657565b81815260059190911b8201840190848101908c831115620008f957600080fd5b928501925b828410156200092a5783518060170b81146200091a5760008081fd5b82529285019290850190620008fe565b60608c01519098509450505050808211156200094557600080fd5b5062000954888289016200079d565b92505062000965608087016200081e565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200099c57607f821691505b602082108103620009bd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354620009d38162000987565b60018281168015620009ee576001811462000a045762000a35565b60ff198416875282151583028701945062000a35565b8760005260208060002060005b8581101562000a2c5781548a82015290840190820162000a11565b50505082870194505b50929695505050505050565b60006001820162000a6257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825162000a7d8184602087016200067d565b9190910192915050565b602081526000825180602084015262000aa88160408501602087016200067d565b601f01601f19169190910160400192915050565b601f82111562000b0a57600081815260208120601f850160051c8101602086101562000ae55750805b601f850160051c820191505b8181101562000b065782815560010162000af1565b5050505b505050565b81516001600160401b0381111562000b2b5762000b2b6200060e565b62000b438162000b3c845462000987565b8462000abc565b602080601f83116001811462000b7b576000841562000b625750858301515b600019600386901b1c1916600185901b17855562000b06565b600085815260208120601f198616915b8281101562000bac5788860151825594840194600190910190840162000b8b565b508582101562000bcb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6138b58062000beb6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063d94811a511610066578063d94811a514610246578063da73083614610259578063dea5ad5b14610279578063f2fde38b1461028c57600080fd5b80638da5cb5b146101c15780638e7e34d7146102005780639cd8ebe914610213578063b88ecb051461022657600080fd5b80635437988d116100d35780635437988d1461015d57806360130381146101705780636e04ff0d1461019857806379ba5097146101b957600080fd5b8063157e9157146100fa5780632ecb20d3146101235780634585e33b14610148575b600080fd5b61010d610108366004612796565b61029f565b60405161011a919061281d565b60405180910390f35b610136610131366004612837565b61034b565b60405160ff909116815260200161011a565b61015b61015636600461285a565b6105d2565b005b61015b61016b3660046128cc565b610b65565b61018361017e366004612a4e565b610bb4565b60405161011a99989796959493929190612a83565b6101ab6101a636600461285a565b610d52565b60405161011a929190612afb565b61015b610e41565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011a565b61010d61020e366004612a4e565b610f3e565b6101ab610221366004612bc5565b61107f565b610239610234366004612bc5565b6114b9565b60405161011a9190612bfa565b61015b610254366004612db4565b61179e565b6002546101db9073ffffffffffffffffffffffffffffffffffffffff1681565b61015b610287366004612db4565b611a4f565b61015b61029a3660046128cc565b611c4f565b600381815481106102af57600080fd5b9060005260206000200160009150905080546102ca90612ebd565b80601f01602080910402602001604051908101604052809291908181526020018280546102f690612ebd565b80156103435780601f1061031857610100808354040283529160200191610343565b820191906000526020600020905b81548152906001019060200180831161032657829003601f168201915b505050505081565b60007f300000000000000000000000000000000000000000000000000000000000000060f883901b7fff0000000000000000000000000000000000000000000000000000000000000016108015906103e957507f390000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156103ff576103f9603083612f3f565b92915050565b7f610000000000000000000000000000000000000000000000000000000000000060f883901b7fff00000000000000000000000000000000000000000000000000000000000000161080159061049b57507f660000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156104b75760616104ad83600a612f58565b6103f99190612f3f565b7f410000000000000000000000000000000000000000000000000000000000000060f883901b7fff00000000000000000000000000000000000000000000000000000000000000161080159061055357507f460000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156105655760416104ad83600a612f58565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c99060208082526004908201527f6661696c00000000000000000000000000000000000000000000000000000000604082015260600190565b60405180910390fd5b60006105e082840184612f71565b50905060006106168260408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600181527f2c0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082018190528451808601909552925184528301529192509061067b8383611c63565b610686906001612fe9565b67ffffffffffffffff81111561069e5761069e612902565b6040519080825280602002602001820160405280156106d157816020015b60608152602001906001900390816106bc5790505b50905060005b8151811015610722576106f26106ed8585611cfd565b611d1c565b82828151811061070457610704612ffc565b6020026020010181905250808061071a9061302b565b9150506106d7565b5060005b8151811015610b5c57600061075383838151811061074657610746612ffc565b6020026020010151610f3e565b6002546040517f8e760afe00000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff90911690638e760afe906107af90859060040161281d565b6000604051808303816000875af11580156107ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108149190810190613063565b806020019051810190610827919061310d565b90506000610859826000015160405160200161084591815260200190565b604051602081830303815290604052611d85565b905060048160405161086b91906131b5565b9081526040519081900360200190206005015460ff166108b957806040517f716a11d80000000000000000000000000000000000000000000000000000000081526004016105c9919061281d565b816020015163ffffffff166004826040516108d491906131b5565b9081526040519081900360200190205463ffffffff16111561094d578060048260405161090191906131b5565b9081526040516020918190038201812054918501517f4041aa910000000000000000000000000000000000000000000000000000000082526105c9939263ffffffff16916004016131d1565b816060015160048260405161096291906131b5565b908152604051908190036020018120600101805477ffffffffffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffff000000000000000000000000000000000000000000000000909316929092179091556080830151906004906109d29084906131b5565b90815260408051918290036020018220600201805477ffffffffffffffffffffffffffffffffffffffffffffffff949094167fffffffffffffffff000000000000000000000000000000000000000000000000909416939093179092559083015190600490610a429084906131b5565b908152602001604051809103902060000160046101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508160200151600482604051610ab191906131b5565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055507ffd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc2826020015183604001518460600151856080015185604051610b27959493929190613201565b60405180910390a162030d405a1015610b465750505050505050505050565b5050508080610b549061302b565b915050610726565b50505050505050565b610b6d611fb6565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b8051602081830181018051600482529282019190930120915280546001820154600283015460038401805463ffffffff851695640100000000909504601790810b9594810b9493900b929190610c0990612ebd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3590612ebd565b8015610c825780601f10610c5757610100808354040283529160200191610c82565b820191906000526020600020905b815481529060010190602001808311610c6557829003601f168201915b505050505090806004018054610c9790612ebd565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc390612ebd565b8015610d105780601f10610ce557610100808354040283529160200191610d10565b820191906000526020600020905b815481529060010190602001808311610cf357829003601f168201915b5050506005909301549192505060ff811690610100810460170b9063ffffffff7901000000000000000000000000000000000000000000000000009091041689565b6000606060006003805480602002602001604051908101604052809291908181526020016000905b82821015610e26578382906000526020600020018054610d9990612ebd565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc590612ebd565b8015610e125780601f10610de757610100808354040283529160200191610e12565b820191906000526020600020905b815481529060010190602001808311610df557829003601f168201915b505050505081526020019060010190610d7a565b505050509050610e358161107f565b92509250509250929050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610ec2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016105c9565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b80516060908290610f5190600290613275565b15610f5b57600080fd5b600060028251610f6b9190613289565b67ffffffffffffffff811115610f8357610f83612902565b6040519080825280601f01601f191660200182016040528015610fad576020820181803683370190505b50905060005b60028351610fc19190613289565b81101561107757610fff83610fd783600261329d565b610fe2906001612fe9565b81518110610ff257610ff2612ffc565b016020015160f81c61034b565b61100e84610fe284600261329d565b6110199060106132da565b6110239190612f58565b60f81b82828151811061103857611038612ffc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506110708161302b565b9050610fb3565b509392505050565b60006060600061108d612039565b60408051600180825281830190925291925060009190816020015b60608152602001906001900390816110a857505060408051602081019091526000808252919250905b86518110156113f057600060048883815181106110f0576110f0612ffc565b602002602001015160405161110591906131b5565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b606083015260038101805460808401919061116c90612ebd565b80601f016020809104026020016040519081016040528092919081815260200182805461119890612ebd565b80156111e55780601f106111ba576101008083540402835291602001916111e5565b820191906000526020600020905b8154815290600101906020018083116111c857829003601f168201915b505050505081526020016004820180546111fe90612ebd565b80601f016020809104026020016040519081016040528092919081815260200182805461122a90612ebd565b80156112775780601f1061124c57610100808354040283529160200191611277565b820191906000526020600020905b81548152906001019060200180831161125a57829003601f168201915b50505091835250506005919091015460ff81161515602080840191909152610100820460170b604084015279010000000000000000000000000000000000000000000000000090910463ffffffff166060909201919091528101519091506000906112fb9077ffffffffffffffffffffffffffffffffffffffffffffffff166120d0565b825161130c9063ffffffff166120d0565b6113338460e0015177ffffffffffffffffffffffffffffffffffffffffffffffff166120d0565b60405160200161134593929190613303565b6040516020818303038152906040529050838160018b5161136691906133cc565b85146113a7576040518060400160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506113b8565b604051806020016040528060008152505b6040516020016113ca939291906133df565b6040516020818303038152906040529350505080806113e89061302b565b9150506110d1565b50808260008151811061140557611405612ffc565b60200260200101819052508160016040518060400160405280600981526020017f6665656449644865780000000000000000000000000000000000000000000000815250886040518060400160405280600b81526020017f626c6f636b4e756d626572000000000000000000000000000000000000000000815250876040517f0999f8250000000000000000000000000000000000000000000000000000000081526004016105c996959493929190613477565b60606000825167ffffffffffffffff8111156114d7576114d7612902565b60405190808252806020026020018201604052801561156b57816020015b60408051610120810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816114f55790505b50905060005b835181101561179757600484828151811061158e5761158e612ffc565b60200260200101516040516115a391906131b5565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b606083015260038101805460808401919061160a90612ebd565b80601f016020809104026020016040519081016040528092919081815260200182805461163690612ebd565b80156116835780601f1061165857610100808354040283529160200191611683565b820191906000526020600020905b81548152906001019060200180831161166657829003601f168201915b5050505050815260200160048201805461169c90612ebd565b80601f01602080910402602001604051908101604052809291908181526020018280546116c890612ebd565b80156117155780601f106116ea57610100808354040283529160200191611715565b820191906000526020600020905b8154815290600101906020018083116116f857829003601f168201915b50505091835250506005919091015460ff811615156020830152610100810460170b6040830152790100000000000000000000000000000000000000000000000000900463ffffffff16606090910152825183908390811061177957611779612ffc565b6020026020010181905250808061178f9061302b565b915050611571565b5092915050565b6117a6611fb6565b8383838382518451146117e5576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151845114611820576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805184511461185b576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6003548110156118e957600060046003838154811061187f5761187f612ffc565b906000526020600020016040516118969190613529565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055806118e18161302b565b91505061185e565b5060005b8851811015611a3057600089828151811061190a5761190a612ffc565b6020026020010151905060048160405161192491906131b5565b9081526040519081900360200190206005015460ff161561197357806040517f84da80d30000000000000000000000000000000000000000000000000000000081526004016105c9919061281d565b6119ca818a848151811061198957611989612ffc565b60200260200101518a85815181106119a3576119a3612ffc565b60200260200101518a86815181106119bd576119bd612ffc565b602002602001015161218e565b60016004826040516119dc91906131b5565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555080611a288161302b565b9150506118ed565b508751611a449060039060208b01906126d9565b505050505050505050565b611a57611fb6565b838383838251845114611a96576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151845114611ad1576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114611b0c576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8851811015611a44576000898281518110611b2c57611b2c612ffc565b60200260200101519050600481604051611b4691906131b5565b9081526040519081900360200190206005015460ff1615611b9557806040517f84da80d30000000000000000000000000000000000000000000000000000000081526004016105c9919061281d565b611bab818a848151811061198957611989612ffc565b6001600482604051611bbd91906131b5565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01611c3a828261360c565b50508080611c479061302b565b915050611b0f565b611c57611fb6565b611c608161229d565b50565b6000808260000151611c878560000151866020015186600001518760200151612392565b611c919190612fe9565b90505b83516020850151611ca59190612fe9565b81116117975781611cb58161302b565b9250508260000151611cec856020015183611cd091906133cc565b8651611cdc91906133cc565b8386600001518760200151612392565b611cf69190612fe9565b9050611c94565b60408051808201909152600080825260208201526117978383836124b4565b60606000826000015167ffffffffffffffff811115611d3d57611d3d612902565b6040519080825280601f01601f191660200182016040528015611d67576020820181803683370190505b5090506000602082019050611797818560200151866000015161255f565b6060600082516002611d97919061329d565b67ffffffffffffffff811115611daf57611daf612902565b6040519080825280601f01601f191660200182016040528015611dd9576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b8451811015611f8c57818251868381518110611e3257611e32612ffc565b0160200151611e44919060f81c613289565b81518110611e5457611e54612ffc565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611e8783600261329d565b81518110611e9757611e97612ffc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868381518110611edb57611edb612ffc565b0160200151611eed919060f81c613275565b81518110611efd57611efd612ffc565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611f3083600261329d565b611f3b906001612fe9565b81518110611f4b57611f4b612ffc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080611f848161302b565b915050611e14565b5081604051602001611f9e9190613726565b60405160208183030381529060405292505050919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016105c9565b565b60004661a4b181148061204e575062066eed81145b156120c957606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c3919061376b565b91505090565b4391505090565b606060006120dd836125f7565b600101905060008167ffffffffffffffff8111156120fd576120fd612902565b6040519080825280601f01601f191660200182016040528015612127576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461213157509392505050565b8260048560405161219f91906131b5565b908152602001604051809103902060030190816121bc919061360c565b50816004856040516121ce91906131b5565b908152602001604051809103902060050160016101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508060048560405161223991906131b5565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff1602179055508360048560405161227991906131b5565b90815260200160405180910390206004019081612296919061360c565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff82160361231c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016105c9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000838186851161249d576020851161244c57600085156123de5760016123ba8760206133cc565b6123c590600861329d565b6123d090600261389c565b6123da91906133cc565b1990505b845181166000876123ef8b8b612fe9565b6123f991906133cc565b855190915083165b82811461243e57818610612426576124198b8b612fe9565b96505050505050506124ac565b856124308161302b565b965050838651169050612401565b8596505050505050506124ac565b508383206000905b61245e86896133cc565b821161249b5785832080820361247a57839450505050506124ac565b612485600185612fe9565b93505081806124939061302b565b925050612454565b505b6124a78787612fe9565b925050505b949350505050565b604080518082019091526000808252602082015260006124e68560000151866020015186600001518760200151612392565b60208087018051918601919091525190915061250290826133cc565b8352845160208601516125159190612fe9565b81036125245760008552612556565b835183516125329190612fe9565b855186906125419083906133cc565b90525083516125509082612fe9565b60208601525b50909392505050565b602081106125975781518352612576602084612fe9565b9250612583602083612fe9565b91506125906020826133cc565b905061255f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81156125e45760016125cb8360206133cc565b6125d79061010061389c565b6125e191906133cc565b90505b9151835183169219169190911790915250565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612640577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061266c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061268a57662386f26fc10000830492506010015b6305f5e10083106126a2576305f5e100830492506008015b61271083106126b657612710830492506004015b606483106126c8576064830492506002015b600a83106103f95760010192915050565b82805482825590600052602060002090810192821561271f579160200282015b8281111561271f578251829061270f908261360c565b50916020019190600101906126f9565b5061272b92915061272f565b5090565b8082111561272b576000612743828261274c565b5060010161272f565b50805461275890612ebd565b6000825580601f10612768575050565b601f016020900490600052602060002090810190611c6091905b8082111561272b5760008155600101612782565b6000602082840312156127a857600080fd5b5035919050565b60005b838110156127ca5781810151838201526020016127b2565b50506000910152565b600081518084526127eb8160208601602086016127af565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061283060208301846127d3565b9392505050565b60006020828403121561284957600080fd5b813560ff8116811461283057600080fd5b6000806020838503121561286d57600080fd5b823567ffffffffffffffff8082111561288557600080fd5b818501915085601f83011261289957600080fd5b8135818111156128a857600080fd5b8660208285010111156128ba57600080fd5b60209290920196919550909350505050565b6000602082840312156128de57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461283057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561295557612955612902565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156129a2576129a2612902565b604052919050565b600067ffffffffffffffff8211156129c4576129c4612902565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000612a036129fe846129aa565b61295b565b9050828152838383011115612a1757600080fd5b828260208301376000602084830101529392505050565b600082601f830112612a3f57600080fd5b612830838335602085016129f0565b600060208284031215612a6057600080fd5b813567ffffffffffffffff811115612a7757600080fd5b6124ac84828501612a2e565b600061012063ffffffff808d1684528b60170b60208501528a60170b60408501528960170b6060850152816080850152612abf8285018a6127d3565b915083820360a0850152612ad382896127d3565b96151560c085015260179590950b60e084015250509116610100909101529695505050505050565b82151581526040602082015260006124ac60408301846127d3565b600067ffffffffffffffff821115612b3057612b30612902565b5060051b60200190565b600082601f830112612b4b57600080fd5b81356020612b5b6129fe83612b16565b82815260059290921b84018101918181019086841115612b7a57600080fd5b8286015b84811015612bba57803567ffffffffffffffff811115612b9e5760008081fd5b612bac8986838b0101612a2e565b845250918301918301612b7e565b509695505050505050565b600060208284031215612bd757600080fd5b813567ffffffffffffffff811115612bee57600080fd5b6124ac84828501612b3a565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612d21578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805163ffffffff16845261012088820151612c718a87018260170b9052565b5087820151612c848987018260170b9052565b50606080830151612c998288018260170b9052565b50506080808301518282880152612cb2838801826127d3565b9250505060a08083015186830382880152612ccd83826127d3565b9250505060c080830151612ce48288018215159052565b505060e080830151612cfa8288018260170b9052565b50506101009182015163ffffffff1694909101939093529386019390860190600101612c21565b509098975050505050505050565b8060170b8114611c6057600080fd5b63ffffffff81168114611c6057600080fd5b600082601f830112612d6157600080fd5b81356020612d716129fe83612b16565b82815260059290921b84018101918181019086841115612d9057600080fd5b8286015b84811015612bba578035612da781612d3e565b8352918301918301612d94565b60008060008060808587031215612dca57600080fd5b843567ffffffffffffffff80821115612de257600080fd5b612dee88838901612b3a565b9550602091508187013581811115612e0557600080fd5b612e1189828a01612b3a565b955050604087013581811115612e2657600080fd5b8701601f81018913612e3757600080fd5b8035612e456129fe82612b16565b81815260059190911b8201840190848101908b831115612e6457600080fd5b928501925b82841015612e8b578335612e7c81612d2f565b82529285019290850190612e69565b96505050506060870135915080821115612ea457600080fd5b50612eb187828801612d50565b91505092959194509250565b600181811c90821680612ed157607f821691505b602082108103612f0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60ff82811682821603908111156103f9576103f9612f10565b60ff81811683821601908111156103f9576103f9612f10565b60008060408385031215612f8457600080fd5b823567ffffffffffffffff80821115612f9c57600080fd5b612fa886838701612a2e565b93506020850135915080821115612fbe57600080fd5b508301601f81018513612fd057600080fd5b612fdf858235602084016129f0565b9150509250929050565b808201808211156103f9576103f9612f10565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361305c5761305c612f10565b5060010190565b60006020828403121561307557600080fd5b815167ffffffffffffffff81111561308c57600080fd5b8201601f8101841361309d57600080fd5b80516130ab6129fe826129aa565b8181528560208385010111156130c057600080fd5b6130d18260208301602086016127af565b95945050505050565b80516130e581612d3e565b919050565b80516130e581612d2f565b805167ffffffffffffffff811681146130e557600080fd5b6000610120828403121561312057600080fd5b613128612931565b82518152613138602084016130da565b6020820152613149604084016130ea565b604082015261315a606084016130ea565b606082015261316b608084016130ea565b608082015261317c60a084016130f5565b60a082015260c083015160c082015261319760e084016130f5565b60e08201526101006131aa8185016130f5565b908201529392505050565b600082516131c78184602087016127af565b9190910192915050565b6060815260006131e460608301866127d3565b63ffffffff94851660208401529290931660409091015292915050565b63ffffffff861681528460170b60208201528360170b60408201528260170b606082015260a06080820152600061323b60a08301846127d3565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261328457613284613246565b500690565b60008261329857613298613246565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132d5576132d5612f10565b500290565b600060ff821660ff84168160ff04811182151516156132fb576132fb612f10565b029392505050565b7f280000000000000000000000000000000000000000000000000000000000000081526000845161333b8160018501602089016127af565b80830190507f2c00000000000000000000000000000000000000000000000000000000000000806001830152855161337a816002850160208a016127af565b600292019182015283516133958160038401602088016127af565b7f29000000000000000000000000000000000000000000000000000000000000006003929091019182015260040195945050505050565b818103818111156103f9576103f9612f10565b600084516133f18184602089016127af565b8451908301906134058183602089016127af565b84519101906134188183602088016127af565b0195945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561346a5782840389526134588483516127d3565b98850198935090840190600101613440565b5091979650505050505050565b6000610100808352601081840152507f544f444f5f5343524950545f48415348000000000000000000000000000000006101208301526101408060208401526134c28184018a613422565b9050871515604084015282810360608401526134de81886127d3565b905082810360808401526134f28187613422565b905082810360a084015261350681866127d3565b60c0840194909452505080820360e0909101526000815260200195945050505050565b600080835461353781612ebd565b6001828116801561354f5760018114613582576135b1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506135b1565b8760005260208060002060005b858110156135a85781548a82015290840190820161358f565b50505082870194505b50929695505050505050565b601f82111561360757600081815260208120601f850160051c810160208610156135e45750805b601f850160051c820191505b81811015613603578281556001016135f0565b5050505b505050565b815167ffffffffffffffff81111561362657613626612902565b61363a816136348454612ebd565b846135bd565b602080601f83116001811461368d57600084156136575750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555613603565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156136da578886015182559484019460019091019084016136bb565b508582101561371657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f307800000000000000000000000000000000000000000000000000000000000081526000825161375e8160028501602087016127af565b9190910160020192915050565b60006020828403121561377d57600080fd5b5051919050565b600181815b808511156137dd57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156137c3576137c3612f10565b808516156137d057918102915b93841c9390800290613789565b509250929050565b6000826137f4575060016103f9565b81613801575060006103f9565b816001811461381757600281146138215761383d565b60019150506103f9565b60ff84111561383257613832612f10565b50506001821b6103f9565b5060208310610133831016604e8410600b8410161715613860575081810a6103f9565b61386a8383613784565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156132fb576132fb612f10565b600061283083836137e556fea164736f6c6343000810000a",
}

var MercuryRegistryComposerABI = MercuryRegistryComposerMetaData.ABI

var MercuryRegistryComposerBin = MercuryRegistryComposerMetaData.Bin

func DeployMercuryRegistryComposer(auth *bind.TransactOpts, backend bind.ContractBackend, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32, verifier common.Address) (common.Address, *types.Transaction, *MercuryRegistryComposer, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MercuryRegistryComposerBin), backend, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds, verifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MercuryRegistryComposer{MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

type MercuryRegistryComposer struct {
	address common.Address
	abi     abi.ABI
	MercuryRegistryComposerCaller
	MercuryRegistryComposerTransactor
	MercuryRegistryComposerFilterer
}

type MercuryRegistryComposerCaller struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerTransactor struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerFilterer struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerSession struct {
	Contract     *MercuryRegistryComposer
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerCallerSession struct {
	Contract *MercuryRegistryComposerCaller
	CallOpts bind.CallOpts
}

type MercuryRegistryComposerTransactorSession struct {
	Contract     *MercuryRegistryComposerTransactor
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerRaw struct {
	Contract *MercuryRegistryComposer
}

type MercuryRegistryComposerCallerRaw struct {
	Contract *MercuryRegistryComposerCaller
}

type MercuryRegistryComposerTransactorRaw struct {
	Contract *MercuryRegistryComposerTransactor
}

func NewMercuryRegistryComposer(address common.Address, backend bind.ContractBackend) (*MercuryRegistryComposer, error) {
	abi, err := abi.JSON(strings.NewReader(MercuryRegistryComposerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMercuryRegistryComposer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposer{address: address, abi: abi, MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

func NewMercuryRegistryComposerCaller(address common.Address, caller bind.ContractCaller) (*MercuryRegistryComposerCaller, error) {
	contract, err := bindMercuryRegistryComposer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerCaller{contract: contract}, nil
}

func NewMercuryRegistryComposerTransactor(address common.Address, transactor bind.ContractTransactor) (*MercuryRegistryComposerTransactor, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerTransactor{contract: contract}, nil
}

func NewMercuryRegistryComposerFilterer(address common.Address, filterer bind.ContractFilterer) (*MercuryRegistryComposerFilterer, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFilterer{contract: contract}, nil
}

func bindMercuryRegistryComposer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerCaller.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "checkUpkeep", arg0)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) FromHex(opts *bind.CallOpts, s string) ([]byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "fromHex", s)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) FromHex(s string) ([]byte, error) {
	return _MercuryRegistryComposer.Contract.FromHex(&_MercuryRegistryComposer.CallOpts, s)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) FromHex(s string) ([]byte, error) {
	return _MercuryRegistryComposer.Contract.FromHex(&_MercuryRegistryComposer.CallOpts, s)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "fromHexChar", c)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) FromHexChar(c uint8) (uint8, error) {
	return _MercuryRegistryComposer.Contract.FromHexChar(&_MercuryRegistryComposer.CallOpts, c)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) FromHexChar(c uint8) (uint8, error) {
	return _MercuryRegistryComposer.Contract.FromHexChar(&_MercuryRegistryComposer.CallOpts, c)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "getLatestFeedData", feedIds)

	if err != nil {
		return *new([]MercuryRegistryComposerFeed), err
	}

	out0 := *abi.ConvertType(out[0], new([]MercuryRegistryComposerFeed)).(*[]MercuryRegistryComposerFeed)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "revertForFeedLookup", feeds)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

	error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feedMapping", arg0)

	outstruct := new(SFeedMapping)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ObservationsTimestamp = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.Price = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Ask = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.FeedName = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.FeedId = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Active = *abi.ConvertType(out[6], new(bool)).(*bool)
	outstruct.DeviationPercentagePPM = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.StalenessSeconds = *abi.ConvertType(out[8], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feeds", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "acceptOwnership")
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "addFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "performUpkeep", performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setVerifier", verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "transferOwnership", to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

type MercuryRegistryComposerFeedUpdatedIterator struct {
	Event *MercuryRegistryComposerFeedUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerFeedUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerFeedUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerFeedUpdated struct {
	ObservationsTimestamp uint32
	Price                 *big.Int
	Bid                   *big.Int
	Ask                   *big.Int
	FeedId                string
	Raw                   types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFeedUpdatedIterator{contract: _MercuryRegistryComposer.contract, event: "FeedUpdated", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerFeedUpdated)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error) {
	event := new(MercuryRegistryComposerFeedUpdated)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferRequestedIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferRequestedIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferRequested)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error) {
	event := new(MercuryRegistryComposerOwnershipTransferRequested)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferredIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferredIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferred)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error) {
	event := new(MercuryRegistryComposerOwnershipTransferred)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SFeedMapping struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MercuryRegistryComposer.abi.Events["FeedUpdated"].ID:
		return _MercuryRegistryComposer.ParseFeedUpdated(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferRequested"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferRequested(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferred"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MercuryRegistryComposerFeedUpdated) Topic() common.Hash {
	return common.HexToHash("0xfd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc2")
}

func (MercuryRegistryComposerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MercuryRegistryComposerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) Address() common.Address {
	return _MercuryRegistryComposer.address
}

type MercuryRegistryComposerInterface interface {
	CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error)

	FromHex(opts *bind.CallOpts, s string) ([]byte, error)

	FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error)

	GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error)

	SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

		error)

	SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error)

	SVerifier(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error)

	SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error)

	WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error)

	ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
