// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mercury_registry_composer

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type MercuryRegistryComposerFeed struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

var MercuryRegistryComposerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"scriptHash\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"scriptHash\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"functionsArguments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"useMercury\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"feedParamKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"timeParamKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ComposerRequestV1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"DuplicateFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"currentTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incomingTimestamp\",\"type\":\"uint32\"}],\"name\":\"StaleReport\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"addFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"lookupData\",\"type\":\"bytes\"}],\"name\":\"checkCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"fromHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"name\":\"fromHexChar\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"}],\"name\":\"getLatestFeedData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"internalType\":\"structMercuryRegistryComposer.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"}],\"name\":\"revertForFeedLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_feedMapping\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_feeds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_verifier\",\"outputs\":[{\"internalType\":\"contractIVerifierProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"setFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004890380380620048908339810160408190526200003491620008c7565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be8162000105565b5050600280546001600160a01b0319166001600160a01b038516179055506005620000ea828262000a48565b50620000f986868686620001b0565b50505050505062000c23565b336001600160a01b038216036200015f5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001ba620003f0565b838383838251845114620001e1576040516351a7f87960e01b815260040160405180910390fd5b815184511462000204576040516351a7f87960e01b815260040160405180910390fd5b805184511462000227576040516351a7f87960e01b815260040160405180910390fd5b60005b600354811015620002a05760006004600383815481106200024f576200024f62000b14565b9060005260206000200160405162000268919062000b2a565b908152604051908190036020019020600501805491151560ff1990921691909117905580620002978162000ba8565b9150506200022a565b5060005b8851811015620003cf576000898281518110620002c557620002c562000b14565b60200260200101519050600481604051620002e1919062000bd0565b9081526040519081900360200190206005015460ff16156200031a57806040516384da80d360e01b815260040162000082919062000bee565b62000382818a848151811062000334576200033462000b14565b60200260200101518a858151811062000351576200035162000b14565b60200260200101518a86815181106200036e576200036e62000b14565b60200260200101516200044e60201b60201c565b600160048260405162000396919062000bd0565b908152604051908190036020019020600501805491151560ff199092169190911790555080620003c68162000ba8565b915050620002a4565b508751620003e59060039060208b019062000547565b505050505050505050565b6000546001600160a01b031633146200044c5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640162000082565b565b8260048560405162000461919062000bd0565b9081526020016040518091039020600301908162000480919062000a48565b508160048560405162000494919062000bd0565b908152602001604051809103902060050160016101000a8154816001600160c01b03021916908360170b6001600160c01b0316021790555080600485604051620004df919062000bd0565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff1602179055508360048560405162000521919062000bd0565b9081526020016040518091039020600401908162000540919062000a48565b5050505050565b82805482825590600052602060002090810192821562000592579160200282015b8281111562000592578251829062000581908262000a48565b509160200191906001019062000568565b50620005a0929150620005a4565b5090565b80821115620005a0576000620005bb8282620005c5565b50600101620005a4565b508054620005d390620009b9565b6000825580601f10620005e4575050565b601f01602090049060005260206000209081019062000604919062000607565b50565b5b80821115620005a0576000815560010162000608565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200065f576200065f6200061e565b604052919050565b60006001600160401b038211156200068357620006836200061e565b5060051b60200190565b60005b83811015620006aa57818101518382015260200162000690565b50506000910152565b600082601f830112620006c557600080fd5b81516001600160401b03811115620006e157620006e16200061e565b620006f6601f8201601f191660200162000634565b8181528460208386010111156200070c57600080fd5b6200071f8260208301602087016200068d565b949350505050565b600082601f8301126200073957600080fd5b81516020620007526200074c8362000667565b62000634565b82815260059290921b840181019181810190868411156200077257600080fd5b8286015b84811015620007b65780516001600160401b03811115620007975760008081fd5b620007a78986838b0101620006b3565b84525091830191830162000776565b509695505050505050565b600082601f830112620007d357600080fd5b81516020620007e66200074c8362000667565b82815260059290921b840181019181810190868411156200080657600080fd5b8286015b84811015620007b65780518060170b8114620008265760008081fd5b83529183019183016200080a565b600082601f8301126200084657600080fd5b81516020620008596200074c8362000667565b82815260059290921b840181019181810190868411156200087957600080fd5b8286015b84811015620007b657805163ffffffff811681146200089c5760008081fd5b83529183019183016200087d565b80516001600160a01b0381168114620008c257600080fd5b919050565b60008060008060008060c08789031215620008e157600080fd5b86516001600160401b0380821115620008f957600080fd5b620009078a838b0162000727565b975060208901519150808211156200091e57600080fd5b6200092c8a838b0162000727565b965060408901519150808211156200094357600080fd5b620009518a838b01620007c1565b955060608901519150808211156200096857600080fd5b620009768a838b0162000834565b94506200098660808a01620008aa565b935060a08901519150808211156200099d57600080fd5b50620009ac89828a01620006b3565b9150509295509295509295565b600181811c90821680620009ce57607f821691505b602082108103620009ef57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000a4357600081815260208120601f850160051c8101602086101562000a1e5750805b601f850160051c820191505b8181101562000a3f5782815560010162000a2a565b5050505b505050565b81516001600160401b0381111562000a645762000a646200061e565b62000a7c8162000a758454620009b9565b84620009f5565b602080601f83116001811462000ab4576000841562000a9b5750858301515b600019600386901b1c1916600185901b17855562000a3f565b600085815260208120601f198616915b8281101562000ae55788860151825594840194600190910190840162000ac4565b508582101562000b045787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600080835462000b3a81620009b9565b6001828116801562000b55576001811462000b6b5762000b9c565b60ff198416875282151583028701945062000b9c565b8760005260208060002060005b8581101562000b935781548a82015290840190820162000b78565b50505082870194505b50929695505050505050565b60006001820162000bc957634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825162000be48184602087016200068d565b9190910192915050565b602081526000825180602084015262000c0f8160408501602087016200068d565b601f01601f19169190910160400192915050565b613c5d8062000c336000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d94811a511610066578063d94811a514610264578063da73083614610277578063dea5ad5b14610297578063f2fde38b146102aa57600080fd5b80638da5cb5b146101df5780638e7e34d71461021e5780639cd8ebe914610231578063b88ecb051461024457600080fd5b80635437988d116100d35780635437988d14610189578063601303811461019c5780636e04ff0d146101c457806379ba5097146101d757600080fd5b8063157e9157146101055780632ecb20d31461012e5780634585e33b146101535780634b56a42e14610168575b600080fd5b610118610113366004612963565b6102bd565b60405161012591906129ea565b60405180910390f35b61014161013c3660046129fd565b610369565b60405160ff9091168152602001610125565b610166610161366004612a20565b6105f0565b005b61017b610176366004612bfa565b610a16565b604051610125929190612cce565b610166610197366004612ce9565b610d2c565b6101af6101aa366004612d1f565b610d7b565b60405161012599989796959493929190612d54565b61017b6101d2366004612a20565b610f19565b610166611008565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610125565b61011861022c366004612d1f565b611105565b61017b61023f366004612e57565b611246565b610257610252366004612e57565b611683565b6040516101259190612e8c565b610166610272366004613046565b611968565b6002546101f99073ffffffffffffffffffffffffffffffffffffffff1681565b6101666102a5366004613046565b611c19565b6101666102b8366004612ce9565b611e19565b600381815481106102cd57600080fd5b9060005260206000200160009150905080546102e89061314f565b80601f01602080910402602001604051908101604052809291908181526020018280546103149061314f565b80156103615780601f1061033657610100808354040283529160200191610361565b820191906000526020600020905b81548152906001019060200180831161034457829003601f168201915b505050505081565b60007f300000000000000000000000000000000000000000000000000000000000000060f883901b7fff00000000000000000000000000000000000000000000000000000000000000161080159061040757507f390000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b1561041d576104176030836131d1565b92915050565b7f610000000000000000000000000000000000000000000000000000000000000060f883901b7fff0000000000000000000000000000000000000000000000000000000000000016108015906104b957507f660000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156104d55760616104cb83600a6131ea565b61041791906131d1565b7f410000000000000000000000000000000000000000000000000000000000000060f883901b7fff00000000000000000000000000000000000000000000000000000000000000161080159061057157507f460000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156105835760416104cb83600a6131ea565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e79060208082526004908201527f6661696c00000000000000000000000000000000000000000000000000000000604082015260600190565b60405180910390fd5b60006105fe82840184612bfa565b50905060005b8151811015610a1057600254825160009173ffffffffffffffffffffffffffffffffffffffff1690638e760afe9085908590811061064457610644613203565b60200260200101516040518263ffffffff1660e01b815260040161066891906129ea565b6000604051808303816000875af1158015610687573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106cd9190810190613282565b8060200190518101906106e091906132ea565b9050600061071282600001516040516020016106fe91815260200190565b604051602081830303815290604052611e2d565b90506004816040516107249190613392565b9081526040519081900360200190206005015460ff1661077257806040517f716a11d80000000000000000000000000000000000000000000000000000000081526004016105e791906129ea565b816020015163ffffffff1660048260405161078d9190613392565b9081526040519081900360200190205463ffffffff16111561080657806004826040516107ba9190613392565b9081526040516020918190038201812054918501517f4041aa910000000000000000000000000000000000000000000000000000000082526105e7939263ffffffff16916004016133ae565b816060015160048260405161081b9190613392565b908152604051908190036020018120600101805477ffffffffffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffff0000000000000000000000000000000000000000000000009093169290921790915560808301519060049061088b908490613392565b90815260408051918290036020018220600201805477ffffffffffffffffffffffffffffffffffffffffffffffff949094167fffffffffffffffff0000000000000000000000000000000000000000000000009094169390931790925590830151906004906108fb908490613392565b908152602001604051809103902060000160046101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff160217905550816020015160048260405161096a9190613392565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055507ffd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc28260200151836040015184606001518560800151856040516109e09594939291906133de565b60405180910390a162030d405a10156109fb57505050505050565b50508080610a0890613423565b915050610604565b50505050565b600060608351600114610aab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f73686f756c64206f6e6c792068617665206f6e65206974656d20666f7220616260448201527f692d6465636f64696e670000000000000000000000000000000000000000000060648201526084016105e7565b600084600081518110610ac057610ac0613203565b6020026020010151806020019051810190610adb919061345b565b5090506000610b118260408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600181527f2c00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820181905284518086019095529251845283015291925090610b76838361205e565b610b819060016134cc565b67ffffffffffffffff811115610b9957610b99612a92565b604051908082528060200260200182016040528015610bcc57816020015b6060815260200190600190039081610bb75790505b50905060005b8151811015610c1d57610bed610be885856120f8565b612117565b828281518110610bff57610bff613203565b60200260200101819052508080610c1590613423565b915050610bd2565b506000815167ffffffffffffffff811115610c3a57610c3a612a92565b604051908082528060200260200182016040528015610c6d57816020015b6060815260200190600190039081610c585790505b50905060005b8251811015610cd4576000610ca0848381518110610c9357610c93613203565b6020026020010151611105565b905080838381518110610cb557610cb5613203565b6020026020010181905250508080610ccc90613423565b915050610c73565b5060008189604051602001610cea9291906134df565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052915115159a91995090975050505050505050565b610d34612180565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b8051602081830181018051600482529282019190930120915280546001820154600283015460038401805463ffffffff851695640100000000909504601790810b9594810b9493900b929190610dd09061314f565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfc9061314f565b8015610e495780601f10610e1e57610100808354040283529160200191610e49565b820191906000526020600020905b815481529060010190602001808311610e2c57829003601f168201915b505050505090806004018054610e5e9061314f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8a9061314f565b8015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b5050506005909301549192505060ff811690610100810460170b9063ffffffff7901000000000000000000000000000000000000000000000000009091041689565b6000606060006003805480602002602001604051908101604052809291908181526020016000905b82821015610fed578382906000526020600020018054610f609061314f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8c9061314f565b8015610fd95780601f10610fae57610100808354040283529160200191610fd9565b820191906000526020600020905b815481529060010190602001808311610fbc57829003601f168201915b505050505081526020019060010190610f41565b505050509050610ffc81611246565b92509250509250929050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016105e7565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b80516060908290611118906002906135a2565b1561112257600080fd5b60006002825161113291906135b6565b67ffffffffffffffff81111561114a5761114a612a92565b6040519080825280601f01601f191660200182016040528015611174576020820181803683370190505b50905060005b6002835161118891906135b6565b81101561123e576111c68361119e8360026135ca565b6111a99060016134cc565b815181106111b9576111b9613203565b016020015160f81c610369565b6111d5846111a98460026135ca565b6111e0906010613607565b6111ea91906131ea565b60f81b8282815181106111ff576111ff613203565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061123781613423565b905061117a565b509392505050565b600060606000611254612203565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161126f57505060408051602081019091526000808252919250905b86518110156115b757600060048883815181106112b7576112b7613203565b60200260200101516040516112cc9190613392565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b60608301526003810180546080840191906113339061314f565b80601f016020809104026020016040519081016040528092919081815260200182805461135f9061314f565b80156113ac5780601f10611381576101008083540402835291602001916113ac565b820191906000526020600020905b81548152906001019060200180831161138f57829003601f168201915b505050505081526020016004820180546113c59061314f565b80601f01602080910402602001604051908101604052809291908181526020018280546113f19061314f565b801561143e5780601f106114135761010080835404028352916020019161143e565b820191906000526020600020905b81548152906001019060200180831161142157829003601f168201915b50505091835250506005919091015460ff81161515602080840191909152610100820460170b604084015279010000000000000000000000000000000000000000000000000090910463ffffffff166060909201919091528101519091506000906114c29077ffffffffffffffffffffffffffffffffffffffffffffffff1661229a565b82516114d39063ffffffff1661229a565b6114fa8460e0015177ffffffffffffffffffffffffffffffffffffffffffffffff1661229a565b60405160200161150c93929190613630565b6040516020818303038152906040529050838160018b5161152d91906136f9565b851461156e576040518060400160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061157f565b604051806020016040528060008152505b6040516020016115919392919061370c565b6040516020818303038152906040529350505080806115af90613423565b915050611298565b5080826000815181106115cc576115cc613203565b602002602001018190525060058260016040518060400160405280600981526020017f6665656449644865780000000000000000000000000000000000000000000000815250896040518060400160405280600b81526020017f626c6f636b4e756d626572000000000000000000000000000000000000000000815250886040517f0999f8250000000000000000000000000000000000000000000000000000000081526004016105e797969594939291906137a4565b60606000825167ffffffffffffffff8111156116a1576116a1612a92565b60405190808252806020026020018201604052801561173557816020015b60408051610120810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816116bf5790505b50905060005b835181101561196157600484828151811061175857611758613203565b602002602001015160405161176d9190613392565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b60608301526003810180546080840191906117d49061314f565b80601f01602080910402602001604051908101604052809291908181526020018280546118009061314f565b801561184d5780601f106118225761010080835404028352916020019161184d565b820191906000526020600020905b81548152906001019060200180831161183057829003601f168201915b505050505081526020016004820180546118669061314f565b80601f01602080910402602001604051908101604052809291908181526020018280546118929061314f565b80156118df5780601f106118b4576101008083540402835291602001916118df565b820191906000526020600020905b8154815290600101906020018083116118c257829003601f168201915b50505091835250506005919091015460ff811615156020830152610100810460170b6040830152790100000000000000000000000000000000000000000000000000900463ffffffff16606090910152825183908390811061194357611943613203565b6020026020010181905250808061195990613423565b91505061173b565b5092915050565b611970612180565b8383838382518451146119af576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81518451146119ea576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114611a25576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600354811015611ab3576000600460038381548110611a4957611a49613203565b90600052602060002001604051611a6091906138d1565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921691909117905580611aab81613423565b915050611a28565b5060005b8851811015611bfa576000898281518110611ad457611ad4613203565b60200260200101519050600481604051611aee9190613392565b9081526040519081900360200190206005015460ff1615611b3d57806040517f84da80d30000000000000000000000000000000000000000000000000000000081526004016105e791906129ea565b611b94818a8481518110611b5357611b53613203565b60200260200101518a8581518110611b6d57611b6d613203565b60200260200101518a8681518110611b8757611b87613203565b6020026020010151612358565b6001600482604051611ba69190613392565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555080611bf281613423565b915050611ab7565b508751611c0e9060039060208b01906128a6565b505050505050505050565b611c21612180565b838383838251845114611c60576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151845114611c9b576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114611cd6576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8851811015611c0e576000898281518110611cf657611cf6613203565b60200260200101519050600481604051611d109190613392565b9081526040519081900360200190206005015460ff1615611d5f57806040517f84da80d30000000000000000000000000000000000000000000000000000000081526004016105e791906129ea565b611d75818a8481518110611b5357611b53613203565b6001600482604051611d879190613392565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01611e0482826139b4565b50508080611e1190613423565b915050611cd9565b611e21612180565b611e2a81612467565b50565b6060600082516002611e3f91906135ca565b67ffffffffffffffff811115611e5757611e57612a92565b6040519080825280601f01601f191660200182016040528015611e81576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b845181101561203457818251868381518110611eda57611eda613203565b0160200151611eec919060f81c6135b6565b81518110611efc57611efc613203565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611f2f8360026135ca565b81518110611f3f57611f3f613203565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868381518110611f8357611f83613203565b0160200151611f95919060f81c6135a2565b81518110611fa557611fa5613203565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611fd88360026135ca565b611fe39060016134cc565b81518110611ff357611ff3613203565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061202c81613423565b915050611ebc565b50816040516020016120469190613ace565b60405160208183030381529060405292505050919050565b6000808260000151612082856000015186602001518660000151876020015161255c565b61208c91906134cc565b90505b835160208501516120a091906134cc565b811161196157816120b081613423565b92505082600001516120e78560200151836120cb91906136f9565b86516120d791906136f9565b838660000151876020015161255c565b6120f191906134cc565b905061208f565b604080518082019091526000808252602082015261196183838361267e565b60606000826000015167ffffffffffffffff81111561213857612138612a92565b6040519080825280601f01601f191660200182016040528015612162576020820181803683370190505b5090506000602082019050611961818560200151866000015161272c565b60005473ffffffffffffffffffffffffffffffffffffffff163314612201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016105e7565b565b60004661a4b1811480612218575062066eed81145b1561229357606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228d9190613b13565b91505090565b4391505090565b606060006122a7836127c4565b600101905060008167ffffffffffffffff8111156122c7576122c7612a92565b6040519080825280601f01601f1916602001820160405280156122f1576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846122fb57509392505050565b826004856040516123699190613392565b9081526020016040518091039020600301908161238691906139b4565b50816004856040516123989190613392565b908152602001604051809103902060050160016101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff160217905550806004856040516124039190613392565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff160217905550836004856040516124439190613392565b9081526020016040518091039020600401908161246091906139b4565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff8216036124e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016105e7565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008381868511612667576020851161261657600085156125a85760016125848760206136f9565b61258f9060086135ca565b61259a906002613c44565b6125a491906136f9565b1990505b845181166000876125b98b8b6134cc565b6125c391906136f9565b855190915083165b828114612608578186106125f0576125e38b8b6134cc565b9650505050505050612676565b856125fa81613423565b9650508386511690506125cb565b859650505050505050612676565b508383206000905b61262886896136f9565b8211612665578583208082036126445783945050505050612676565b61264f6001856134cc565b935050818061265d90613423565b92505061261e565b505b61267187876134cc565b925050505b949350505050565b604080518082019091526000808252602082015260006126b0856000015186602001518660000151876020015161255c565b6020808701805191860191909152519091506126cc90826136f9565b8352845160208601516126df91906134cc565b81036126ee5760008552612720565b835183516126fc91906134cc565b8551869061270b9083906136f9565b905250835161271a90826134cc565b60208601525b829150505b9392505050565b6020811061276457815183526127436020846134cc565b92506127506020836134cc565b915061275d6020826136f9565b905061272c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81156127b15760016127988360206136f9565b6127a490610100613c44565b6127ae91906136f9565b90505b9151835183169219169190911790915250565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061280d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612839576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061285757662386f26fc10000830492506010015b6305f5e100831061286f576305f5e100830492506008015b612710831061288357612710830492506004015b60648310612895576064830492506002015b600a83106104175760010192915050565b8280548282559060005260206000209081019282156128ec579160200282015b828111156128ec57825182906128dc90826139b4565b50916020019190600101906128c6565b506128f89291506128fc565b5090565b808211156128f85760006129108282612919565b506001016128fc565b5080546129259061314f565b6000825580601f10612935575050565b601f016020900490600052602060002090810190611e2a91905b808211156128f8576000815560010161294f565b60006020828403121561297557600080fd5b5035919050565b60005b8381101561299757818101518382015260200161297f565b50506000910152565b600081518084526129b881602086016020860161297c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061272560208301846129a0565b600060208284031215612a0f57600080fd5b813560ff8116811461272557600080fd5b60008060208385031215612a3357600080fd5b823567ffffffffffffffff80821115612a4b57600080fd5b818501915085601f830112612a5f57600080fd5b813581811115612a6e57600080fd5b866020828501011115612a8057600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715612ae557612ae5612a92565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612b3257612b32612a92565b604052919050565b600067ffffffffffffffff821115612b5457612b54612a92565b5060051b60200190565b600067ffffffffffffffff821115612b7857612b78612a92565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112612bb557600080fd5b8135612bc8612bc382612b5e565b612aeb565b818152846020838601011115612bdd57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612c0d57600080fd5b823567ffffffffffffffff80821115612c2557600080fd5b818501915085601f830112612c3957600080fd5b81356020612c49612bc383612b3a565b82815260059290921b84018101918181019089841115612c6857600080fd5b8286015b84811015612ca057803586811115612c845760008081fd5b612c928c86838b0101612ba4565b845250918301918301612c6c565b5096505086013592505080821115612cb757600080fd5b50612cc485828601612ba4565b9150509250929050565b821515815260406020820152600061267660408301846129a0565b600060208284031215612cfb57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461272557600080fd5b600060208284031215612d3157600080fd5b813567ffffffffffffffff811115612d4857600080fd5b61267684828501612ba4565b600061012063ffffffff808d1684528b60170b60208501528a60170b60408501528960170b6060850152816080850152612d908285018a6129a0565b915083820360a0850152612da482896129a0565b96151560c085015260179590950b60e084015250509116610100909101529695505050505050565b600082601f830112612ddd57600080fd5b81356020612ded612bc383612b3a565b82815260059290921b84018101918181019086841115612e0c57600080fd5b8286015b84811015612e4c57803567ffffffffffffffff811115612e305760008081fd5b612e3e8986838b0101612ba4565b845250918301918301612e10565b509695505050505050565b600060208284031215612e6957600080fd5b813567ffffffffffffffff811115612e8057600080fd5b61267684828501612dcc565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612fb3578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805163ffffffff16845261012088820151612f038a87018260170b9052565b5087820151612f168987018260170b9052565b50606080830151612f2b8288018260170b9052565b50506080808301518282880152612f44838801826129a0565b9250505060a08083015186830382880152612f5f83826129a0565b9250505060c080830151612f768288018215159052565b505060e080830151612f8c8288018260170b9052565b50506101009182015163ffffffff1694909101939093529386019390860190600101612eb3565b509098975050505050505050565b8060170b8114611e2a57600080fd5b63ffffffff81168114611e2a57600080fd5b600082601f830112612ff357600080fd5b81356020613003612bc383612b3a565b82815260059290921b8401810191818101908684111561302257600080fd5b8286015b84811015612e4c57803561303981612fd0565b8352918301918301613026565b6000806000806080858703121561305c57600080fd5b843567ffffffffffffffff8082111561307457600080fd5b61308088838901612dcc565b955060209150818701358181111561309757600080fd5b6130a389828a01612dcc565b9550506040870135818111156130b857600080fd5b8701601f810189136130c957600080fd5b80356130d7612bc382612b3a565b81815260059190911b8201840190848101908b8311156130f657600080fd5b928501925b8284101561311d57833561310e81612fc1565b825292850192908501906130fb565b9650505050606087013591508082111561313657600080fd5b5061314387828801612fe2565b91505092959194509250565b600181811c9082168061316357607f821691505b60208210810361319c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60ff8281168282160390811115610417576104176131a2565b60ff8181168382160190811115610417576104176131a2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613240612bc384612b5e565b905082815283838301111561325457600080fd5b61272583602083018461297c565b600082601f83011261327357600080fd5b61272583835160208501613232565b60006020828403121561329457600080fd5b815167ffffffffffffffff8111156132ab57600080fd5b61267684828501613262565b80516132c281612fd0565b919050565b80516132c281612fc1565b805167ffffffffffffffff811681146132c257600080fd5b600061012082840312156132fd57600080fd5b613305612ac1565b82518152613315602084016132b7565b6020820152613326604084016132c7565b6040820152613337606084016132c7565b6060820152613348608084016132c7565b608082015261335960a084016132d2565b60a082015260c083015160c082015261337460e084016132d2565b60e08201526101006133878185016132d2565b908201529392505050565b600082516133a481846020870161297c565b9190910192915050565b6060815260006133c160608301866129a0565b63ffffffff94851660208401529290931660409091015292915050565b63ffffffff861681528460170b60208201528360170b60408201528260170b606082015260a06080820152600061341860a08301846129a0565b979650505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613454576134546131a2565b5060010190565b6000806040838503121561346e57600080fd5b825167ffffffffffffffff8082111561348657600080fd5b818501915085601f83011261349a57600080fd5b6134a986835160208501613232565b935060208501519150808211156134bf57600080fd5b50612cc485828601613262565b80820180821115610417576104176131a2565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015613554577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030185526135428683516129a0565b95509382019390820190600101613508565b50508584038187015250505061356a81856129a0565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826135b1576135b1613573565b500690565b6000826135c5576135c5613573565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613602576136026131a2565b500290565b600060ff821660ff84168160ff0481118215151615613628576136286131a2565b029392505050565b7f280000000000000000000000000000000000000000000000000000000000000081526000845161366881600185016020890161297c565b80830190507f2c0000000000000000000000000000000000000000000000000000000000000080600183015285516136a7816002850160208a0161297c565b600292019182015283516136c281600384016020880161297c565b7f29000000000000000000000000000000000000000000000000000000000000006003929091019182015260040195945050505050565b81810381811115610417576104176131a2565b6000845161371e81846020890161297c565b84519083019061373281836020890161297c565b845191019061374581836020880161297c565b0195945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156137975782840389526137858483516129a0565b9885019893509084019060010161376d565b5091979650505050505050565b600061010080835260008a546137b98161314f565b92850183905261012092600182811680156137db576001811461381357613844565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008416868901528583151560051b8901019450613844565b8e60005260208060002060005b8581101561383b5781548b82018a0152908401908201613820565b8a018801965050505b50505050838103602085015261385a818b61374f565b91505061386b604084018915159052565b828103606084015261387d81886129a0565b90508281036080840152613891818761374f565b905082810360a08401526138a581866129a0565b90508360c084015282810360e08401526138c3816000815260200190565b9a9950505050505050505050565b60008083546138df8161314f565b600182811680156138f7576001811461392a57613959565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450613959565b8760005260208060002060005b858110156139505781548a820152908401908201613937565b50505082870194505b50929695505050505050565b601f8211156139af57600081815260208120601f850160051c8101602086101561398c5750805b601f850160051c820191505b818110156139ab57828155600101613998565b5050505b505050565b815167ffffffffffffffff8111156139ce576139ce612a92565b6139e2816139dc845461314f565b84613965565b602080601f831160018114613a3557600084156139ff5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556139ab565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015613a8257888601518255948401946001909101908401613a63565b5085821015613abe57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f3078000000000000000000000000000000000000000000000000000000000000815260008251613b0681600285016020870161297c565b9190910160020192915050565b600060208284031215613b2557600080fd5b5051919050565b600181815b80851115613b8557817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613b6b57613b6b6131a2565b80851615613b7857918102915b93841c9390800290613b31565b509250929050565b600082613b9c57506001610417565b81613ba957506000610417565b8160018114613bbf5760028114613bc957613be5565b6001915050610417565b60ff841115613bda57613bda6131a2565b50506001821b610417565b5060208310610133831016604e8410600b8410161715613c08575081810a610417565b613c128383613b2c565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613628576136286131a2565b60006127258383613b8d56fea164736f6c6343000810000a",
}

var MercuryRegistryComposerABI = MercuryRegistryComposerMetaData.ABI

var MercuryRegistryComposerBin = MercuryRegistryComposerMetaData.Bin

func DeployMercuryRegistryComposer(auth *bind.TransactOpts, backend bind.ContractBackend, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32, verifier common.Address, scriptHash string) (common.Address, *types.Transaction, *MercuryRegistryComposer, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MercuryRegistryComposerBin), backend, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds, verifier, scriptHash)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MercuryRegistryComposer{MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

type MercuryRegistryComposer struct {
	address common.Address
	abi     abi.ABI
	MercuryRegistryComposerCaller
	MercuryRegistryComposerTransactor
	MercuryRegistryComposerFilterer
}

type MercuryRegistryComposerCaller struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerTransactor struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerFilterer struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerSession struct {
	Contract     *MercuryRegistryComposer
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerCallerSession struct {
	Contract *MercuryRegistryComposerCaller
	CallOpts bind.CallOpts
}

type MercuryRegistryComposerTransactorSession struct {
	Contract     *MercuryRegistryComposerTransactor
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerRaw struct {
	Contract *MercuryRegistryComposer
}

type MercuryRegistryComposerCallerRaw struct {
	Contract *MercuryRegistryComposerCaller
}

type MercuryRegistryComposerTransactorRaw struct {
	Contract *MercuryRegistryComposerTransactor
}

func NewMercuryRegistryComposer(address common.Address, backend bind.ContractBackend) (*MercuryRegistryComposer, error) {
	abi, err := abi.JSON(strings.NewReader(MercuryRegistryComposerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMercuryRegistryComposer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposer{address: address, abi: abi, MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

func NewMercuryRegistryComposerCaller(address common.Address, caller bind.ContractCaller) (*MercuryRegistryComposerCaller, error) {
	contract, err := bindMercuryRegistryComposer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerCaller{contract: contract}, nil
}

func NewMercuryRegistryComposerTransactor(address common.Address, transactor bind.ContractTransactor) (*MercuryRegistryComposerTransactor, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerTransactor{contract: contract}, nil
}

func NewMercuryRegistryComposerFilterer(address common.Address, filterer bind.ContractFilterer) (*MercuryRegistryComposerFilterer, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFilterer{contract: contract}, nil
}

func bindMercuryRegistryComposer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerCaller.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) CheckCallback(opts *bind.CallOpts, data [][]byte, lookupData []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "checkCallback", data, lookupData)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) CheckCallback(data [][]byte, lookupData []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckCallback(&_MercuryRegistryComposer.CallOpts, data, lookupData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) CheckCallback(data [][]byte, lookupData []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckCallback(&_MercuryRegistryComposer.CallOpts, data, lookupData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "checkUpkeep", arg0)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) FromHex(opts *bind.CallOpts, s string) ([]byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "fromHex", s)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) FromHex(s string) ([]byte, error) {
	return _MercuryRegistryComposer.Contract.FromHex(&_MercuryRegistryComposer.CallOpts, s)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) FromHex(s string) ([]byte, error) {
	return _MercuryRegistryComposer.Contract.FromHex(&_MercuryRegistryComposer.CallOpts, s)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "fromHexChar", c)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) FromHexChar(c uint8) (uint8, error) {
	return _MercuryRegistryComposer.Contract.FromHexChar(&_MercuryRegistryComposer.CallOpts, c)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) FromHexChar(c uint8) (uint8, error) {
	return _MercuryRegistryComposer.Contract.FromHexChar(&_MercuryRegistryComposer.CallOpts, c)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "getLatestFeedData", feedIds)

	if err != nil {
		return *new([]MercuryRegistryComposerFeed), err
	}

	out0 := *abi.ConvertType(out[0], new([]MercuryRegistryComposerFeed)).(*[]MercuryRegistryComposerFeed)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "revertForFeedLookup", feeds)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

	error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feedMapping", arg0)

	outstruct := new(SFeedMapping)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ObservationsTimestamp = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.Price = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Ask = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.FeedName = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.FeedId = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Active = *abi.ConvertType(out[6], new(bool)).(*bool)
	outstruct.DeviationPercentagePPM = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.StalenessSeconds = *abi.ConvertType(out[8], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feeds", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "acceptOwnership")
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "addFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "performUpkeep", performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setVerifier", verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "transferOwnership", to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

type MercuryRegistryComposerFeedUpdatedIterator struct {
	Event *MercuryRegistryComposerFeedUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerFeedUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerFeedUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerFeedUpdated struct {
	ObservationsTimestamp uint32
	Price                 *big.Int
	Bid                   *big.Int
	Ask                   *big.Int
	FeedId                string
	Raw                   types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFeedUpdatedIterator{contract: _MercuryRegistryComposer.contract, event: "FeedUpdated", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerFeedUpdated)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error) {
	event := new(MercuryRegistryComposerFeedUpdated)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferRequestedIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferRequestedIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferRequested)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error) {
	event := new(MercuryRegistryComposerOwnershipTransferRequested)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferredIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferredIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferred)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error) {
	event := new(MercuryRegistryComposerOwnershipTransferred)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SFeedMapping struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MercuryRegistryComposer.abi.Events["FeedUpdated"].ID:
		return _MercuryRegistryComposer.ParseFeedUpdated(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferRequested"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferRequested(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferred"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MercuryRegistryComposerFeedUpdated) Topic() common.Hash {
	return common.HexToHash("0xfd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc2")
}

func (MercuryRegistryComposerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MercuryRegistryComposerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) Address() common.Address {
	return _MercuryRegistryComposer.address
}

type MercuryRegistryComposerInterface interface {
	CheckCallback(opts *bind.CallOpts, data [][]byte, lookupData []byte) (bool, []byte, error)

	CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error)

	FromHex(opts *bind.CallOpts, s string) ([]byte, error)

	FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error)

	GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error)

	SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

		error)

	SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error)

	SVerifier(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error)

	SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error)

	WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error)

	ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
