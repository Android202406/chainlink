// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mercury_registry_composer

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type MercuryRegistryComposerFeed struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

var MercuryRegistryComposerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"scriptHash\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"functionsArguments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"useMercury\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"feedParamKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"timeParamKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ComposerRequestV1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"DuplicateFeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"currentTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incomingTimestamp\",\"type\":\"uint32\"}],\"name\":\"StaleReport\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"}],\"name\":\"FeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"addFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"}],\"name\":\"getLatestFeedData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"internalType\":\"structMercuryRegistryComposer.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"}],\"name\":\"revertForFeedLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_feedMapping\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"observationsTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int192\",\"name\":\"price\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"bid\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"ask\",\"type\":\"int192\"},{\"internalType\":\"string\",\"name\":\"feedName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"int192\",\"name\":\"deviationPercentagePPM\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_feeds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_verifier\",\"outputs\":[{\"internalType\":\"contractIVerifierProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"feedIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"feedNames\",\"type\":\"string[]\"},{\"internalType\":\"int192[]\",\"name\":\"deviationPercentagePPMs\",\"type\":\"int192[]\"},{\"internalType\":\"uint32[]\",\"name\":\"stalenessSeconds\",\"type\":\"uint32[]\"}],\"name\":\"setFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003a5738038062003a5783398101604081905262000034916200083b565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000f5565b5050600280546001600160a01b0319166001600160a01b03841617905550620000ea85858585620001a0565b505050505062000bdb565b336001600160a01b038216036200014f5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001aa620003e0565b838383838251845114620001d1576040516351a7f87960e01b815260040160405180910390fd5b8151845114620001f4576040516351a7f87960e01b815260040160405180910390fd5b805184511462000217576040516351a7f87960e01b815260040160405180910390fd5b60005b600354811015620002905760006004600383815481106200023f576200023f62000971565b90600052602060002001604051620002589190620009c3565b908152604051908190036020019020600501805491151560ff1990921691909117905580620002878162000a41565b9150506200021a565b5060005b8851811015620003bf576000898281518110620002b557620002b562000971565b60200260200101519050600481604051620002d1919062000a69565b9081526040519081900360200190206005015460ff16156200030a57806040516384da80d360e01b815260040162000082919062000a87565b62000372818a848151811062000324576200032462000971565b60200260200101518a858151811062000341576200034162000971565b60200260200101518a86815181106200035e576200035e62000971565b60200260200101516200043e60201b60201c565b600160048260405162000386919062000a69565b908152604051908190036020019020600501805491151560ff199092169190911790555080620003b68162000a41565b91505062000294565b508751620003d59060039060208b019062000537565b505050505050505050565b6000546001600160a01b031633146200043c5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640162000082565b565b8260048560405162000451919062000a69565b9081526020016040518091039020600301908162000470919062000b0f565b508160048560405162000484919062000a69565b908152602001604051809103902060050160016101000a8154816001600160c01b03021916908360170b6001600160c01b0316021790555080600485604051620004cf919062000a69565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff1602179055508360048560405162000511919062000a69565b9081526020016040518091039020600401908162000530919062000b0f565b5050505050565b82805482825590600052602060002090810192821562000582579160200282015b8281111562000582578251829062000571908262000b0f565b509160200191906001019062000558565b506200059092915062000594565b5090565b8082111562000590576000620005ab8282620005b5565b5060010162000594565b508054620005c39062000987565b6000825580601f10620005d4575050565b601f016020900490600052602060002090810190620005f49190620005f7565b50565b5b80821115620005905760008155600101620005f8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200064f576200064f6200060e565b604052919050565b60006001600160401b038211156200067357620006736200060e565b5060051b60200190565b60005b838110156200069a57818101518382015260200162000680565b50506000910152565b6000601f8381840112620006b657600080fd5b82516020620006cf620006c98362000657565b62000624565b82815260059290921b85018101918181019087841115620006ef57600080fd5b8287015b84811015620007915780516001600160401b0380821115620007155760008081fd5b818a0191508a603f8301126200072b5760008081fd5b858201516040828211156200074457620007446200060e565b62000757828b01601f1916890162000624565b92508183528c818386010111156200076f5760008081fd5b62000780828985018387016200067d565b5050845250918301918301620006f3565b50979650505050505050565b600082601f830112620007af57600080fd5b81516020620007c2620006c98362000657565b82815260059290921b84018101918181019086841115620007e257600080fd5b8286015b848110156200081357805163ffffffff81168114620008055760008081fd5b8352918301918301620007e6565b509695505050505050565b80516001600160a01b03811681146200083657600080fd5b919050565b600080600080600060a086880312156200085457600080fd5b85516001600160401b03808211156200086c57600080fd5b6200087a89838a01620006a3565b96506020915081880151818111156200089257600080fd5b620008a08a828b01620006a3565b965050604088015181811115620008b657600080fd5b8801601f81018a13620008c857600080fd5b8051620008d9620006c98262000657565b81815260059190911b8201840190848101908c831115620008f957600080fd5b928501925b828410156200092a5783518060170b81146200091a5760008081fd5b82529285019290850190620008fe565b60608c01519098509450505050808211156200094557600080fd5b5062000954888289016200079d565b92505062000965608087016200081e565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200099c57607f821691505b602082108103620009bd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354620009d38162000987565b60018281168015620009ee576001811462000a045762000a35565b60ff198416875282151583028701945062000a35565b8760005260208060002060005b8581101562000a2c5781548a82015290840190820162000a11565b50505082870194505b50929695505050505050565b60006001820162000a6257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825162000a7d8184602087016200067d565b9190910192915050565b602081526000825180602084015262000aa88160408501602087016200067d565b601f01601f19169190910160400192915050565b601f82111562000b0a57600081815260208120601f850160051c8101602086101562000ae55750805b601f850160051c820191505b8181101562000b065782815560010162000af1565b5050505b505050565b81516001600160401b0381111562000b2b5762000b2b6200060e565b62000b438162000b3c845462000987565b8462000abc565b602080601f83116001811462000b7b576000841562000b625750858301515b600019600386901b1c1916600185901b17855562000b06565b600085815260208120601f198616915b8281101562000bac5788860151825594840194600190910190840162000b8b565b508582101562000bcb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612e6c8062000beb6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063d94811a511610066578063d94811a5146101f8578063da7308361461020b578063dea5ad5b1461022b578063f2fde38b1461023e57600080fd5b80638da5cb5b146101865780639cd8ebe9146101c5578063b88ecb05146101d857600080fd5b806360130381116100bd57806360130381146101355780636e04ff0d1461015d57806379ba50971461017e57600080fd5b8063157e9157146100e45780634585e33b1461010d5780635437988d14610122575b600080fd5b6100f76100f2366004611e96565b610251565b6040516101049190611f1d565b60405180910390f35b61012061011b366004611f37565b6102fd565b005b610120610130366004611fa9565b61072c565b610148610143366004612123565b61077b565b60405161010499989796959493929190612160565b61017061016b366004611f37565b610919565b6040516101049291906121d8565b610120610a08565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610104565b6101706101d33660046122a2565b610b05565b6101eb6101e63660046122a2565b610f3f565b60405161010491906122d7565b610120610206366004612491565b611224565b6002546101a09073ffffffffffffffffffffffffffffffffffffffff1681565b610120610239366004612491565b6114d5565b61012061024c366004611fa9565b6116d5565b6003818154811061026157600080fd5b90600052602060002001600091509050805461027c9061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546102a89061259a565b80156102f55780601f106102ca576101008083540402835291602001916102f5565b820191906000526020600020905b8154815290600101906020018083116102d857829003601f168201915b505050505081565b600061030b828401846125ed565b50905060005b815181101561072657600254825160009173ffffffffffffffffffffffffffffffffffffffff1690638e760afe90859085908110610351576103516126c1565b60200260200101516040518263ffffffff1660e01b81526004016103759190611f1d565b6000604051808303816000875af1158015610394573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103da91908101906126f0565b8060200190518101906103ed919061279a565b9050600061041f826000015160405160200161040b91815260200190565b6040516020818303038152906040526116e9565b90506004816040516104319190612842565b9081526040519081900360200190206005015460ff1661048857806040517f716a11d800000000000000000000000000000000000000000000000000000000815260040161047f9190611f1d565b60405180910390fd5b816020015163ffffffff166004826040516104a39190612842565b9081526040519081900360200190205463ffffffff16111561051c57806004826040516104d09190612842565b9081526040516020918190038201812054918501517f4041aa9100000000000000000000000000000000000000000000000000000000825261047f939263ffffffff169160040161285e565b81606001516004826040516105319190612842565b908152604051908190036020018120600101805477ffffffffffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffff000000000000000000000000000000000000000000000000909316929092179091556080830151906004906105a1908490612842565b90815260408051918290036020018220600201805477ffffffffffffffffffffffffffffffffffffffffffffffff949094167fffffffffffffffff000000000000000000000000000000000000000000000000909416939093179092559083015190600490610611908490612842565b908152602001604051809103902060000160046101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555081602001516004826040516106809190612842565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055507ffd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc28260200151836040015184606001518560800151856040516106f695949392919061288e565b60405180910390a162030d405a101561071157505050505050565b5050808061071e90612902565b915050610311565b50505050565b61073461191a565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b8051602081830181018051600482529282019190930120915280546001820154600283015460038401805463ffffffff851695640100000000909504601790810b9594810b9493900b9291906107d09061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546107fc9061259a565b80156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b50505050509080600401805461085e9061259a565b80601f016020809104026020016040519081016040528092919081815260200182805461088a9061259a565b80156108d75780601f106108ac576101008083540402835291602001916108d7565b820191906000526020600020905b8154815290600101906020018083116108ba57829003601f168201915b5050506005909301549192505060ff811690610100810460170b9063ffffffff7901000000000000000000000000000000000000000000000000009091041689565b6000606060006003805480602002602001604051908101604052809291908181526020016000905b828210156109ed5783829060005260206000200180546109609061259a565b80601f016020809104026020016040519081016040528092919081815260200182805461098c9061259a565b80156109d95780601f106109ae576101008083540402835291602001916109d9565b820191906000526020600020905b8154815290600101906020018083116109bc57829003601f168201915b505050505081526020019060010190610941565b5050505090506109fc81610b05565b92509250509250929050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161047f565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600060606000610b1361199d565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610b2e57505060408051602081019091526000808252919250905b8651811015610e765760006004888381518110610b7657610b766126c1565b6020026020010151604051610b8b9190612842565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b6060830152600381018054608084019190610bf29061259a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1e9061259a565b8015610c6b5780601f10610c4057610100808354040283529160200191610c6b565b820191906000526020600020905b815481529060010190602001808311610c4e57829003601f168201915b50505050508152602001600482018054610c849061259a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb09061259a565b8015610cfd5780601f10610cd257610100808354040283529160200191610cfd565b820191906000526020600020905b815481529060010190602001808311610ce057829003601f168201915b50505091835250506005919091015460ff81161515602080840191909152610100820460170b604084015279010000000000000000000000000000000000000000000000000090910463ffffffff16606090920191909152810151909150600090610d819077ffffffffffffffffffffffffffffffffffffffffffffffff16611a34565b8251610d929063ffffffff16611a34565b610db98460e0015177ffffffffffffffffffffffffffffffffffffffffffffffff16611a34565b604051602001610dcb9392919061293a565b6040516020818303038152906040529050838160018b51610dec9190612a03565b8514610e2d576040518060400160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250610e3e565b604051806020016040528060008152505b604051602001610e5093929190612a16565b604051602081830303815290604052935050508080610e6e90612902565b915050610b57565b508082600081518110610e8b57610e8b6126c1565b60200260200101819052508160016040518060400160405280600981526020017f6665656449644865780000000000000000000000000000000000000000000000815250886040518060400160405280600b81526020017f626c6f636b4e756d626572000000000000000000000000000000000000000000815250876040517f0999f82500000000000000000000000000000000000000000000000000000000815260040161047f96959493929190612aab565b60606000825167ffffffffffffffff811115610f5d57610f5d611fdf565b604051908082528060200260200182016040528015610ff157816020015b60408051610120810182526000808252602080830182905292820181905260608083018290526080830181905260a083015260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610f7b5790505b50905060005b835181101561121d576004848281518110611014576110146126c1565b60200260200101516040516110299190612842565b90815260408051918290036020908101832061012084018352805463ffffffff811685526401000000009004601790810b928501929092526001810154820b928401929092526002820154900b60608301526003810180546080840191906110909061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546110bc9061259a565b80156111095780601f106110de57610100808354040283529160200191611109565b820191906000526020600020905b8154815290600101906020018083116110ec57829003601f168201915b505050505081526020016004820180546111229061259a565b80601f016020809104026020016040519081016040528092919081815260200182805461114e9061259a565b801561119b5780601f106111705761010080835404028352916020019161119b565b820191906000526020600020905b81548152906001019060200180831161117e57829003601f168201915b50505091835250506005919091015460ff811615156020830152610100810460170b6040830152790100000000000000000000000000000000000000000000000000900463ffffffff1660609091015282518390839081106111ff576111ff6126c1565b6020026020010181905250808061121590612902565b915050610ff7565b5092915050565b61122c61191a565b83838383825184511461126b576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81518451146112a6576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80518451146112e1576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60035481101561136f576000600460038381548110611305576113056126c1565b9060005260206000200160405161131c9190612b5d565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790558061136781612902565b9150506112e4565b5060005b88518110156114b6576000898281518110611390576113906126c1565b602002602001015190506004816040516113aa9190612842565b9081526040519081900360200190206005015460ff16156113f957806040517f84da80d300000000000000000000000000000000000000000000000000000000815260040161047f9190611f1d565b611450818a848151811061140f5761140f6126c1565b60200260200101518a8581518110611429576114296126c1565b60200260200101518a8681518110611443576114436126c1565b6020026020010151611af2565b60016004826040516114629190612842565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921691909117905550806114ae81612902565b915050611373565b5087516114ca9060039060208b0190611dd9565b505050505050505050565b6114dd61191a565b83838383825184511461151c576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151845114611557576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051845114611592576040517f51a7f87900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b88518110156114ca5760008982815181106115b2576115b26126c1565b602002602001015190506004816040516115cc9190612842565b9081526040519081900360200190206005015460ff161561161b57806040517f84da80d300000000000000000000000000000000000000000000000000000000815260040161047f9190611f1d565b611631818a848151811061140f5761140f6126c1565b60016004826040516116439190612842565b90815260405190819003602001902060050180549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b016116c08282612c40565b505080806116cd90612902565b915050611595565b6116dd61191a565b6116e681611c01565b50565b60606000825160026116fb9190612d5a565b67ffffffffffffffff81111561171357611713611fdf565b6040519080825280601f01601f19166020018201604052801561173d576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b84518110156118f057818251868381518110611796576117966126c1565b01602001516117a8919060f81c612dc6565b815181106117b8576117b86126c1565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836117eb836002612d5a565b815181106117fb576117fb6126c1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081825186838151811061183f5761183f6126c1565b0160200151611851919060f81c612dda565b81518110611861576118616126c1565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683611894836002612d5a565b61189f906001612dee565b815181106118af576118af6126c1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806118e881612902565b915050611778565b50816040516020016119029190612e01565b60405160208183030381529060405292505050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461199b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161047f565b565b60004661a4b18114806119b2575062066eed81145b15611a2d57606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a279190612e46565b91505090565b4391505090565b60606000611a4183611cf6565b600101905060008167ffffffffffffffff811115611a6157611a61611fdf565b6040519080825280601f01601f191660200182016040528015611a8b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611a9557509392505050565b82600485604051611b039190612842565b90815260200160405180910390206003019081611b209190612c40565b5081600485604051611b329190612842565b908152602001604051809103902060050160016101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555080600485604051611b9d9190612842565b908152602001604051809103902060050160196101000a81548163ffffffff021916908363ffffffff16021790555083600485604051611bdd9190612842565b90815260200160405180910390206004019081611bfa9190612c40565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff821603611c80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161047f565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611d3f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611d6b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611d8957662386f26fc10000830492506010015b6305f5e1008310611da1576305f5e100830492506008015b6127108310611db557612710830492506004015b60648310611dc7576064830492506002015b600a8310611dd3576001015b92915050565b828054828255906000526020600020908101928215611e1f579160200282015b82811115611e1f5782518290611e0f9082612c40565b5091602001919060010190611df9565b50611e2b929150611e2f565b5090565b80821115611e2b576000611e438282611e4c565b50600101611e2f565b508054611e589061259a565b6000825580601f10611e68575050565b601f0160209004906000526020600020908101906116e691905b80821115611e2b5760008155600101611e82565b600060208284031215611ea857600080fd5b5035919050565b60005b83811015611eca578181015183820152602001611eb2565b50506000910152565b60008151808452611eeb816020860160208601611eaf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611f306020830184611ed3565b9392505050565b60008060208385031215611f4a57600080fd5b823567ffffffffffffffff80821115611f6257600080fd5b818501915085601f830112611f7657600080fd5b813581811115611f8557600080fd5b866020828501011115611f9757600080fd5b60209290920196919550909350505050565b600060208284031215611fbb57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114611f3057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561203257612032611fdf565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561207f5761207f611fdf565b604052919050565b600067ffffffffffffffff8211156120a1576120a1611fdf565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126120de57600080fd5b81356120f16120ec82612087565b612038565b81815284602083860101111561210657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561213557600080fd5b813567ffffffffffffffff81111561214c57600080fd5b612158848285016120cd565b949350505050565b600061012063ffffffff808d1684528b60170b60208501528a60170b60408501528960170b606085015281608085015261219c8285018a611ed3565b915083820360a08501526121b08289611ed3565b96151560c085015260179590950b60e084015250509116610100909101529695505050505050565b82151581526040602082015260006121586040830184611ed3565b600067ffffffffffffffff82111561220d5761220d611fdf565b5060051b60200190565b600082601f83011261222857600080fd5b813560206122386120ec836121f3565b82815260059290921b8401810191818101908684111561225757600080fd5b8286015b8481101561229757803567ffffffffffffffff81111561227b5760008081fd5b6122898986838b01016120cd565b84525091830191830161225b565b509695505050505050565b6000602082840312156122b457600080fd5b813567ffffffffffffffff8111156122cb57600080fd5b61215884828501612217565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156123fe578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805163ffffffff1684526101208882015161234e8a87018260170b9052565b50878201516123618987018260170b9052565b506060808301516123768288018260170b9052565b5050608080830151828288015261238f83880182611ed3565b9250505060a080830151868303828801526123aa8382611ed3565b9250505060c0808301516123c18288018215159052565b505060e0808301516123d78288018260170b9052565b50506101009182015163ffffffff16949091019390935293860193908601906001016122fe565b509098975050505050505050565b8060170b81146116e657600080fd5b63ffffffff811681146116e657600080fd5b600082601f83011261243e57600080fd5b8135602061244e6120ec836121f3565b82815260059290921b8401810191818101908684111561246d57600080fd5b8286015b848110156122975780356124848161241b565b8352918301918301612471565b600080600080608085870312156124a757600080fd5b843567ffffffffffffffff808211156124bf57600080fd5b6124cb88838901612217565b95506020915081870135818111156124e257600080fd5b6124ee89828a01612217565b95505060408701358181111561250357600080fd5b8701601f8101891361251457600080fd5b80356125226120ec826121f3565b81815260059190911b8201840190848101908b83111561254157600080fd5b928501925b828410156125685783356125598161240c565b82529285019290850190612546565b9650505050606087013591508082111561258157600080fd5b5061258e8782880161242d565b91505092959194509250565b600181811c908216806125ae57607f821691505b6020821081036125e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000806040838503121561260057600080fd5b823567ffffffffffffffff8082111561261857600080fd5b818501915085601f83011261262c57600080fd5b8135602061263c6120ec836121f3565b82815260059290921b8401810191818101908984111561265b57600080fd5b8286015b84811015612693578035868111156126775760008081fd5b6126858c86838b01016120cd565b84525091830191830161265f565b50965050860135925050808211156126aa57600080fd5b506126b7858286016120cd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561270257600080fd5b815167ffffffffffffffff81111561271957600080fd5b8201601f8101841361272a57600080fd5b80516127386120ec82612087565b81815285602083850101111561274d57600080fd5b61275e826020830160208601611eaf565b95945050505050565b80516127728161241b565b919050565b80516127728161240c565b805167ffffffffffffffff8116811461277257600080fd5b600061012082840312156127ad57600080fd5b6127b561200e565b825181526127c560208401612767565b60208201526127d660408401612777565b60408201526127e760608401612777565b60608201526127f860808401612777565b608082015261280960a08401612782565b60a082015260c083015160c082015261282460e08401612782565b60e0820152610100612837818501612782565b908201529392505050565b60008251612854818460208701611eaf565b9190910192915050565b6060815260006128716060830186611ed3565b63ffffffff94851660208401529290931660409091015292915050565b63ffffffff861681528460170b60208201528360170b60408201528260170b606082015260a0608082015260006128c860a0830184611ed3565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612933576129336128d3565b5060010190565b7f2800000000000000000000000000000000000000000000000000000000000000815260008451612972816001850160208901611eaf565b80830190507f2c0000000000000000000000000000000000000000000000000000000000000080600183015285516129b1816002850160208a01611eaf565b600292019182015283516129cc816003840160208801611eaf565b7f29000000000000000000000000000000000000000000000000000000000000006003929091019182015260040195945050505050565b81810381811115611dd357611dd36128d3565b60008451612a28818460208901611eaf565b845190830190612a3c818360208901611eaf565b8451910190612a4f818360208801611eaf565b0195945050505050565b6000815180845260208085019450848260051b860182860160005b85811015612a9e578383038952612a8c838351611ed3565b98850198925090840190600101612a74565b5090979650505050505050565b6000610100808352601081840152507f544f444f5f5343524950545f4841534800000000000000000000000000000000610120830152610140806020840152612af68184018a612a59565b905087151560408401528281036060840152612b128188611ed3565b90508281036080840152612b268187612a59565b905082810360a0840152612b3a8186611ed3565b60c0840194909452505080820360e0909101526000815260200195945050505050565b6000808354612b6b8161259a565b60018281168015612b835760018114612bb657612be5565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450612be5565b8760005260208060002060005b85811015612bdc5781548a820152908401908201612bc3565b50505082870194505b50929695505050505050565b601f821115612c3b57600081815260208120601f850160051c81016020861015612c185750805b601f850160051c820191505b81811015612c3757828155600101612c24565b5050505b505050565b815167ffffffffffffffff811115612c5a57612c5a611fdf565b612c6e81612c68845461259a565b84612bf1565b602080601f831160018114612cc15760008415612c8b5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555612c37565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612d0e57888601518255948401946001909101908401612cef565b5085821015612d4a57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d9257612d926128d3565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612dd557612dd5612d97565b500490565b600082612de957612de9612d97565b500690565b80820180821115611dd357611dd36128d3565b7f3078000000000000000000000000000000000000000000000000000000000000815260008251612e39816002850160208701611eaf565b9190910160020192915050565b600060208284031215612e5857600080fd5b505191905056fea164736f6c6343000810000a",
}

var MercuryRegistryComposerABI = MercuryRegistryComposerMetaData.ABI

var MercuryRegistryComposerBin = MercuryRegistryComposerMetaData.Bin

func DeployMercuryRegistryComposer(auth *bind.TransactOpts, backend bind.ContractBackend, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32, verifier common.Address) (common.Address, *types.Transaction, *MercuryRegistryComposer, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MercuryRegistryComposerBin), backend, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds, verifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MercuryRegistryComposer{MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

type MercuryRegistryComposer struct {
	address common.Address
	abi     abi.ABI
	MercuryRegistryComposerCaller
	MercuryRegistryComposerTransactor
	MercuryRegistryComposerFilterer
}

type MercuryRegistryComposerCaller struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerTransactor struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerFilterer struct {
	contract *bind.BoundContract
}

type MercuryRegistryComposerSession struct {
	Contract     *MercuryRegistryComposer
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerCallerSession struct {
	Contract *MercuryRegistryComposerCaller
	CallOpts bind.CallOpts
}

type MercuryRegistryComposerTransactorSession struct {
	Contract     *MercuryRegistryComposerTransactor
	TransactOpts bind.TransactOpts
}

type MercuryRegistryComposerRaw struct {
	Contract *MercuryRegistryComposer
}

type MercuryRegistryComposerCallerRaw struct {
	Contract *MercuryRegistryComposerCaller
}

type MercuryRegistryComposerTransactorRaw struct {
	Contract *MercuryRegistryComposerTransactor
}

func NewMercuryRegistryComposer(address common.Address, backend bind.ContractBackend) (*MercuryRegistryComposer, error) {
	abi, err := abi.JSON(strings.NewReader(MercuryRegistryComposerABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMercuryRegistryComposer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposer{address: address, abi: abi, MercuryRegistryComposerCaller: MercuryRegistryComposerCaller{contract: contract}, MercuryRegistryComposerTransactor: MercuryRegistryComposerTransactor{contract: contract}, MercuryRegistryComposerFilterer: MercuryRegistryComposerFilterer{contract: contract}}, nil
}

func NewMercuryRegistryComposerCaller(address common.Address, caller bind.ContractCaller) (*MercuryRegistryComposerCaller, error) {
	contract, err := bindMercuryRegistryComposer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerCaller{contract: contract}, nil
}

func NewMercuryRegistryComposerTransactor(address common.Address, transactor bind.ContractTransactor) (*MercuryRegistryComposerTransactor, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerTransactor{contract: contract}, nil
}

func NewMercuryRegistryComposerFilterer(address common.Address, filterer bind.ContractFilterer) (*MercuryRegistryComposerFilterer, error) {
	contract, err := bindMercuryRegistryComposer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFilterer{contract: contract}, nil
}

func bindMercuryRegistryComposer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MercuryRegistryComposerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerCaller.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.MercuryRegistryComposerTransactor.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MercuryRegistryComposer.Contract.contract.Call(opts, result, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transfer(opts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.contract.Transact(opts, method, params...)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "checkUpkeep", arg0)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.CheckUpkeep(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "getLatestFeedData", feedIds)

	if err != nil {
		return *new([]MercuryRegistryComposerFeed), err
	}

	out0 := *abi.ConvertType(out[0], new([]MercuryRegistryComposerFeed)).(*[]MercuryRegistryComposerFeed)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) GetLatestFeedData(feedIds []string) ([]MercuryRegistryComposerFeed, error) {
	return _MercuryRegistryComposer.Contract.GetLatestFeedData(&_MercuryRegistryComposer.CallOpts, feedIds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) Owner() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.Owner(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "revertForFeedLookup", feeds)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) RevertForFeedLookup(feeds []string) (bool, []byte, error) {
	return _MercuryRegistryComposer.Contract.RevertForFeedLookup(&_MercuryRegistryComposer.CallOpts, feeds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

	error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feedMapping", arg0)

	outstruct := new(SFeedMapping)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ObservationsTimestamp = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.Price = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bid = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Ask = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.FeedName = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.FeedId = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Active = *abi.ConvertType(out[6], new(bool)).(*bool)
	outstruct.DeviationPercentagePPM = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.StalenessSeconds = *abi.ConvertType(out[8], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeedMapping(arg0 string) (SFeedMapping,

	error) {
	return _MercuryRegistryComposer.Contract.SFeedMapping(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_feeds", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SFeeds(arg0 *big.Int) (string, error) {
	return _MercuryRegistryComposer.Contract.SFeeds(&_MercuryRegistryComposer.CallOpts, arg0)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCaller) SVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MercuryRegistryComposer.contract.Call(opts, &out, "s_verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerCallerSession) SVerifier() (common.Address, error) {
	return _MercuryRegistryComposer.Contract.SVerifier(&_MercuryRegistryComposer.CallOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "acceptOwnership")
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AcceptOwnership(&_MercuryRegistryComposer.TransactOpts)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "addFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) AddFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.AddFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "performUpkeep", performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.PerformUpkeep(&_MercuryRegistryComposer.TransactOpts, performData)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setFeeds", feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetFeeds(feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetFeeds(&_MercuryRegistryComposer.TransactOpts, feedIds, feedNames, deviationPercentagePPMs, stalenessSeconds)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "setVerifier", verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) SetVerifier(verifier common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.SetVerifier(&_MercuryRegistryComposer.TransactOpts, verifier)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.contract.Transact(opts, "transferOwnership", to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

func (_MercuryRegistryComposer *MercuryRegistryComposerTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MercuryRegistryComposer.Contract.TransferOwnership(&_MercuryRegistryComposer.TransactOpts, to)
}

type MercuryRegistryComposerFeedUpdatedIterator struct {
	Event *MercuryRegistryComposerFeedUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerFeedUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerFeedUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerFeedUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerFeedUpdated struct {
	ObservationsTimestamp uint32
	Price                 *big.Int
	Bid                   *big.Int
	Ask                   *big.Int
	FeedId                string
	Raw                   types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerFeedUpdatedIterator{contract: _MercuryRegistryComposer.contract, event: "FeedUpdated", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error) {

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "FeedUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerFeedUpdated)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error) {
	event := new(MercuryRegistryComposerFeedUpdated)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "FeedUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferRequestedIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferRequestedIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferRequested)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error) {
	event := new(MercuryRegistryComposerOwnershipTransferRequested)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MercuryRegistryComposerOwnershipTransferredIterator struct {
	Event *MercuryRegistryComposerOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MercuryRegistryComposerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MercuryRegistryComposerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MercuryRegistryComposerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MercuryRegistryComposerOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MercuryRegistryComposerOwnershipTransferredIterator{contract: _MercuryRegistryComposer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MercuryRegistryComposer.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MercuryRegistryComposerOwnershipTransferred)
				if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MercuryRegistryComposer *MercuryRegistryComposerFilterer) ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error) {
	event := new(MercuryRegistryComposerOwnershipTransferred)
	if err := _MercuryRegistryComposer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SFeedMapping struct {
	ObservationsTimestamp  uint32
	Price                  *big.Int
	Bid                    *big.Int
	Ask                    *big.Int
	FeedName               string
	FeedId                 string
	Active                 bool
	DeviationPercentagePPM *big.Int
	StalenessSeconds       uint32
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MercuryRegistryComposer.abi.Events["FeedUpdated"].ID:
		return _MercuryRegistryComposer.ParseFeedUpdated(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferRequested"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferRequested(log)
	case _MercuryRegistryComposer.abi.Events["OwnershipTransferred"].ID:
		return _MercuryRegistryComposer.ParseOwnershipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MercuryRegistryComposerFeedUpdated) Topic() common.Hash {
	return common.HexToHash("0xfd7a87354239e48a661896301434f5db3492a40ad6d3d38acad8cec71ebf1fc2")
}

func (MercuryRegistryComposerOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MercuryRegistryComposerOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (_MercuryRegistryComposer *MercuryRegistryComposer) Address() common.Address {
	return _MercuryRegistryComposer.address
}

type MercuryRegistryComposerInterface interface {
	CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error)

	GetLatestFeedData(opts *bind.CallOpts, feedIds []string) ([]MercuryRegistryComposerFeed, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	RevertForFeedLookup(opts *bind.CallOpts, feeds []string) (bool, []byte, error)

	SFeedMapping(opts *bind.CallOpts, arg0 string) (SFeedMapping,

		error)

	SFeeds(opts *bind.CallOpts, arg0 *big.Int) (string, error)

	SVerifier(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error)

	SetFeeds(opts *bind.TransactOpts, feedIds []string, feedNames []string, deviationPercentagePPMs []*big.Int, stalenessSeconds []uint32) (*types.Transaction, error)

	SetVerifier(opts *bind.TransactOpts, verifier common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterFeedUpdated(opts *bind.FilterOpts) (*MercuryRegistryComposerFeedUpdatedIterator, error)

	WatchFeedUpdated(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerFeedUpdated) (event.Subscription, error)

	ParseFeedUpdated(log types.Log) (*MercuryRegistryComposerFeedUpdated, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MercuryRegistryComposerOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MercuryRegistryComposerOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MercuryRegistryComposerOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MercuryRegistryComposerOwnershipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
