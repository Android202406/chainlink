// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package composer_cross_chain

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var ComposerCrossChainSendMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"scriptHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_receivers\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rpcUrl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"scriptHash\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"functionsArguments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"useMercury\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"feedParamKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"feeds\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"timeParamKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ComposerRequestV1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"TopUpSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"lookupData\",\"type\":\"bytes\"}],\"name\":\"checkCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"c\",\"type\":\"uint8\"}],\"name\":\"fromHexChar\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"hexStringToAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertForFeedLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"stringToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"toAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"whitelistedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002c2638038062002c268339810160408190526200003491620002d7565b84848433806000816200008e5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c157620000c1816200014a565b5050600380546001600160401b03909416600160a01b026001600160e01b03199094166001600160a01b03958616179390931790925560048054919093166001600160a01b031991909116179091555060056200011f878262000437565b5060066200012e838262000437565b5060076200013d828262000437565b5050505050505062000503565b336001600160a01b03821603620001a45760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000085565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021d57600080fd5b81516001600160401b03808211156200023a576200023a620001f5565b604051601f8301601f19908116603f01168101908282118183101715620002655762000265620001f5565b816040528381526020925086838588010111156200028257600080fd5b600091505b83821015620002a6578582018301518183018401529082019062000287565b600093810190920192909252949350505050565b80516001600160a01b0381168114620002d257600080fd5b919050565b60008060008060008060c08789031215620002f157600080fd5b86516001600160401b03808211156200030957600080fd5b620003178a838b016200020b565b97506200032760208a01620002ba565b96506040890151915080821682146200033f57600080fd5b8195506200035060608a01620002ba565b945060808901519150808211156200036757600080fd5b620003758a838b016200020b565b935060a08901519150808211156200038c57600080fd5b506200039b89828a016200020b565b9150509295509295509295565b600181811c90821680620003bd57607f821691505b602082108103620003de57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200043257600081815260208120601f850160051c810160208610156200040d5750805b601f850160051c820191505b818110156200042e5782815560010162000419565b5050505b505050565b81516001600160401b03811115620004535762000453620001f5565b6200046b81620004648454620003a8565b84620003e4565b602080601f831160018114620004a357600084156200048a5750858301515b600019600386901b1c1916600185901b1785556200042e565b600085815260208120601f198616915b82811015620004d457888601518255948401946001909101908401620004b3565b5085821015620004f35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61271380620005136000396000f3fe6080604052600436106100cb5760003560e01c8063763574f6116100745780638da5cb5b1161004e5780638da5cb5b14610273578063e3ff40b61461029e578063f2fde38b146102b357600080fd5b8063763574f6146101d957806379ba5097146102195780637e4115ba1461022e57600080fd5b80634585e33b116100a55780634585e33b146101695780634b56a42e1461018b5780636e04ff0d146101b957600080fd5b80631bd95155146100d75780632ecb20d31461010a5780632f3875141461013c57600080fd5b366100d257005b600080fd5b3480156100e357600080fd5b506100f76100f2366004611c0e565b6102d3565b6040519081526020015b60405180910390f35b34801561011657600080fd5b5061012a610125366004611c57565b610355565b60405160ff9091168152602001610101565b34801561014857600080fd5b5061015c610157366004611c0e565b610577565b6040516101019190611cef565b34801561017557600080fd5b50610189610184366004611d02565b6106b0565b005b34801561019757600080fd5b506101ab6101a6366004611db8565b610814565b604051610101929190611e8c565b3480156101c557600080fd5b506101ab6101d4366004611d02565b610c65565b3480156101e557600080fd5b506102096101f4366004611ea7565b60026020526000908152604090205460ff1681565b6040519015158152602001610101565b34801561022557600080fd5b50610189610c7c565b34801561023a57600080fd5b5061024e610249366004611c0e565b610d79565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b34801561027f57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661024e565b3480156102aa57600080fd5b506101ab610e0d565b3480156102bf57600080fd5b506101896102ce366004611efa565b611013565b60008181805b825181101561034d5760008382815181106102f6576102f6611f15565b016020015160f81c905060308110801590610312575060398111155b1561033a57610322603082611f73565b61032d84600a611f86565b6103379190611fc3565b92505b508061034581611fd6565b9150506102d9565b509392505050565b60007f300000000000000000000000000000000000000000000000000000000000000060f883901b7fff0000000000000000000000000000000000000000000000000000000000000016108015906103f357507f390000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156104095761040360308361200e565b92915050565b7f610000000000000000000000000000000000000000000000000000000000000060f883901b7fff0000000000000000000000000000000000000000000000000000000000000016108015906104a557507f660000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b156104c15760616104b783600a612027565b610403919061200e565b7f410000000000000000000000000000000000000000000000000000000000000060f883901b7fff00000000000000000000000000000000000000000000000000000000000000161080159061055d57507f460000000000000000000000000000000000000000000000000000000000000060f883901b7fff000000000000000000000000000000000000000000000000000000000000001611155b1561056f5760416104b783600a612027565b506000919050565b8051606090829061058a9060029061206f565b1561059457600080fd5b6000600282516105a49190612083565b67ffffffffffffffff8111156105bc576105bc611ae3565b6040519080825280601f01601f1916602001820160405280156105e6576020820181803683370190505b50905060005b600283516105fa9190612083565b81101561034d5761063883610610836002611f86565b61061b906001611fc3565b8151811061062b5761062b611f15565b016020015160f81c610355565b6106478461061b846002611f86565b610652906010612097565b61065c9190612027565b60f81b82828151811061067157610671611f15565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506106a981611fd6565b90506105ec565b60006106be828401846120c0565b50905060005b815181101561080e5760008282815181106106e1576106e1611f15565b60200260200101519050806020015160086000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116107e95761074860018260000151611027565b50805173ffffffffffffffffffffffffffffffffffffffff1660008181526008602090815260409182902054825193845260019184019190915282820152517f58018dc1932600a611f5a9dc039650cac3eec0076437f0ae11163f348d12ae1e9181900360600190a1805173ffffffffffffffffffffffffffffffffffffffff1660009081526008602052604081208054916107e383611fd6565b91905055505b62030d405a10156107fb575050505050565b508061080681611fd6565b9150506106c4565b50505050565b6000606083516001146108ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f73686f756c64206f6e6c792068617665206f6e65206974656d20666f7220616260448201527f692d6465636f64696e670000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000846000815181106108c3576108c3611f15565b60200260200101518060200190518101906108de919061219a565b905060006109138260408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600181527f2c000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185526000808252908201819052845180860190955292518452830152919250906109788383611352565b610983906001611fc3565b67ffffffffffffffff81111561099b5761099b611ae3565b6040519080825280602002602001820160405280156109ce57816020015b60608152602001906001900390816109b95790505b50905060005b8151811015610a1f576109ef6109ea85856113f3565b611412565b828281518110610a0157610a01611f15565b60200260200101819052508080610a1790611fd6565b9150506109d4565b506000815167ffffffffffffffff811115610a3c57610a3c611ae3565b604051908082528060200260200182016040528015610a8157816020015b6040805180820190915260008082526020820152815260200190600190039081610a5a5790505b5090506000805b8351811015610c095760408051808201909152600080825260208201526000610af1868481518110610abc57610abc611f15565b602002602001015160408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600181527f2d00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820181905284518086019095529251845283015291925090610b596109ea84846113f3565b9050610b6481610d79565b73ffffffffffffffffffffffffffffffffffffffff1684526000610b8b6109ea85856113f3565b90506000610b98826102d3565b90506000610ba96109ea87876113f3565b9050610bb4816102d3565b60208801526001829003610bef57868a8a81518110610bd557610bd5611f15565b60200260200101819052508880610beb90611fd6565b9950505b505050505050508080610c0190611fd6565b915050610a88565b508082526000828a604051602001610c22929190612211565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052925115159b929a509198505050505050505050565b60006060610c71610e0d565b915091509250929050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016108a5565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600080610d8583610577565b9050601581511015610df3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e6473000000000000000000000060448201526064016108a5565b602101516c01000000000000000000000000900492915050565b600060606000610e1b61147b565b6040805160028082526060820190925291925060009190816020015b6060815260200190600190039081610e3757905050905060068054610e5b90612286565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8790612286565b8015610ed45780601f10610ea957610100808354040283529160200191610ed4565b820191906000526020600020905b815481529060010190602001808311610eb757829003601f168201915b505050505081600081518110610eec57610eec611f15565b602002602001018190525060078054610f0490612286565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3090612286565b8015610f7d5780601f10610f5257610100808354040283529160200191610f7d565b820191906000526020600020905b815481529060010190602001808311610f6057829003601f168201915b505050505081600181518110610f9557610f95611f15565b6020908102919091010152600581600080604051908082528060200260200182016040528015610fd957816020015b6060815260200190600190039081610fc45790505b5060006040517f0999f8250000000000000000000000000000000000000000000000000000000081526004016108a595949392919061232e565b61101b611512565b61102481611595565b50565b600454600090819061105290849073ffffffffffffffffffffffffffffffffffffffff16868461168a565b6003546040517f20487ded00000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff8216916320487ded916110d09174010000000000000000000000000000000000000000900467ffffffffffffffff1690869060040161248d565b602060405180830381865afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111191906125a7565b905047811115611156576040517f8f0f4206000000000000000000000000000000000000000000000000000000008152476004820152602481018290526044016108a5565b600480546003546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182169381019390935260248301889052169063095ea7b3906044016020604051808303816000875af11580156111d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f791906125c0565b506003546040517f96f4e9f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216916396f4e9f9918491611273917401000000000000000000000000000000000000000090910467ffffffffffffffff1690879060040161248d565b60206040518083038185885af1158015611291573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906112b691906125a7565b6003546004546040805173ffffffffffffffffffffffffffffffffffffffff808a16825290921660208301528101889052600060608201526080810184905291945074010000000000000000000000000000000000000000900467ffffffffffffffff169084907fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0439060a00160405180910390a3505092915050565b60008082600001516113768560000151866020015186600001518760200151611880565b6113809190611fc3565b90505b835160208501516113949190611fc3565b81116113ec57816113a481611fd6565b92505082600001516113db8560200151836113bf9190611f73565b86516113cb9190611f73565b8386600001518760200151611880565b6113e59190611fc3565b9050611383565b5092915050565b60408051808201909152600080825260208201526113ec8383836119a0565b60606000826000015167ffffffffffffffff81111561143357611433611ae3565b6040519080825280601f01601f19166020018201604052801561145d576020820181803683370190505b50905060006020820190506113ec8185602001518660000151611a4b565b60004661a4b1811480611490575062066eed81145b1561150b57606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150591906125a7565b91505090565b4391505090565b60005473ffffffffffffffffffffffffffffffffffffffff163314611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016108a5565b565b3373ffffffffffffffffffffffffffffffffffffffff821603611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016108a5565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6116d26040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816116e9579050509050600060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152509050808260008151811061175557611755611f15565b60209081029190910101526040805160a0810190915273ffffffffffffffffffffffffffffffffffffffff881660c08201526000908060e0810160405160208183030381529060405281526020016040518060200160405280600081525081526020018481526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016118706040518060400160405280620f42408152602001600015158152506040805182516024820152602092830151151560448083019190915282518083039091018152606490910190915290810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97a657c90000000000000000000000000000000000000000000000000000000017905290565b905293505050505b949350505050565b6000838186851161198b576020851161193a57600085156118cc5760016118a8876020611f73565b6118b3906008611f86565b6118be9060026126fa565b6118c89190611f73565b1990505b845181166000876118dd8b8b611fc3565b6118e79190611f73565b855190915083165b82811461192c57818610611914576119078b8b611fc3565b9650505050505050611878565b8561191e81611fd6565b9650508386511690506118ef565b859650505050505050611878565b508383206000905b61194c8689611f73565b8211611989578583208082036119685783945050505050611878565b611973600185611fc3565b935050818061198190611fd6565b925050611942565b505b6119958787611fc3565b979650505050505050565b604080518082019091526000808252602082015260006119d28560000151866020015186600001518760200151611880565b6020808701805191860191909152519091506119ee9082611f73565b835284516020860151611a019190611fc3565b8103611a105760008552611a42565b83518351611a1e9190611fc3565b85518690611a2d908390611f73565b9052508351611a3c9082611fc3565b60208601525b50909392505050565b60208110611a835781518352611a62602084611fc3565b9250611a6f602083611fc3565b9150611a7c602082611f73565b9050611a4b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8115611ad0576001611ab7836020611f73565b611ac3906101006126fa565b611acd9190611f73565b90505b9151835183169219169190911790915250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611b3557611b35611ae3565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611b8257611b82611ae3565b604052919050565b600067ffffffffffffffff821115611ba457611ba4611ae3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000611be3611bde84611b8a565b611b3b565b9050828152838383011115611bf757600080fd5b828260208301376000602084830101529392505050565b600060208284031215611c2057600080fd5b813567ffffffffffffffff811115611c3757600080fd5b8201601f81018413611c4857600080fd5b61187884823560208401611bd0565b600060208284031215611c6957600080fd5b813560ff81168114611c7a57600080fd5b9392505050565b60005b83811015611c9c578181015183820152602001611c84565b50506000910152565b60008151808452611cbd816020860160208601611c81565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611c7a6020830184611ca5565b60008060208385031215611d1557600080fd5b823567ffffffffffffffff80821115611d2d57600080fd5b818501915085601f830112611d4157600080fd5b813581811115611d5057600080fd5b866020828501011115611d6257600080fd5b60209290920196919550909350505050565b600067ffffffffffffffff821115611d8e57611d8e611ae3565b5060051b60200190565b600082601f830112611da957600080fd5b611c7a83833560208501611bd0565b60008060408385031215611dcb57600080fd5b823567ffffffffffffffff80821115611de357600080fd5b818501915085601f830112611df757600080fd5b81356020611e07611bde83611d74565b82815260059290921b84018101918181019089841115611e2657600080fd5b8286015b84811015611e5e57803586811115611e425760008081fd5b611e508c86838b0101611d98565b845250918301918301611e2a565b5096505086013592505080821115611e7557600080fd5b50611e8285828601611d98565b9150509250929050565b82151581526040602082015260006118786040830184611ca5565b600060208284031215611eb957600080fd5b813567ffffffffffffffff81168114611c7a57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114611ef557600080fd5b919050565b600060208284031215611f0c57600080fd5b611c7a82611ed1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561040357610403611f44565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fbe57611fbe611f44565b500290565b8082018082111561040357610403611f44565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361200757612007611f44565b5060010190565b60ff828116828216039081111561040357610403611f44565b60ff818116838216019081111561040357610403611f44565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261207e5761207e612040565b500690565b60008261209257612092612040565b500490565b600060ff821660ff84168160ff04811182151516156120b8576120b8611f44565b029392505050565b60008060408084860312156120d457600080fd5b833567ffffffffffffffff808211156120ec57600080fd5b818601915086601f83011261210057600080fd5b81356020612110611bde83611d74565b82815260069290921b8401810191818101908a84111561212f57600080fd5b948201945b838610156121765786868c03121561214c5760008081fd5b612154611b12565b61215d87611ed1565b8152868401358482015282529486019490820190612134565b9750508701359350508083111561218c57600080fd5b5050611e8285828601611d98565b6000602082840312156121ac57600080fd5b815167ffffffffffffffff8111156121c357600080fd5b8201601f810184136121d457600080fd5b80516121e2611bde82611b8a565b8181528560208385010111156121f757600080fd5b612208826020830160208601611c81565b95945050505050565b60408082528351828201819052600091906020906060850190828801855b8281101561227257612262848351805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b928501929084019060010161222f565b505050848103828601526119958187611ca5565b600181811c9082168061229a57607f821691505b6020821081036122d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600081518084526020808501808196508360051b8101915082860160005b8581101561232157828403895261230f848351611ca5565b988501989350908401906001016122f7565b5091979650505050505050565b60006101008083526000885481600182811c91508083168061235157607f831692505b60208084108203612389577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b958801838152602001958180156123a757600181146123db57612406565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008616885284151560051b88019650612406565b60008f81526020902060005b868110156124005781548a8201529085019083016123e7565b89019750505b50888603818a0152505050505061241d81896122d9565b91505061242e604084018715159052565b8281036060840181905260008252602090810160808501520161245181866122d9565b83810360a08501526000815290506020810190508360c084015282810360e0840152612481816000815260200190565b98975050505050505050565b6000604067ffffffffffffffff8516835260208181850152845160a0838601526124ba60e0860182611ca5565b9050818601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808784030160608801526124f58383611ca5565b88860151888203830160808a01528051808352908601945060009350908501905b8084101561255d57612549828651805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b938501936001939093019290860190612516565b50606089015173ffffffffffffffffffffffffffffffffffffffff1660a08901526080890151888203830160c08a015295506125998187611ca5565b9a9950505050505050505050565b6000602082840312156125b957600080fd5b5051919050565b6000602082840312156125d257600080fd5b81518015158114611c7a57600080fd5b600181815b8085111561263b57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561262157612621611f44565b8085161561262e57918102915b93841c93908002906125e7565b509250929050565b60008261265257506001610403565b8161265f57506000610403565b8160018114612675576002811461267f5761269b565b6001915050610403565b60ff84111561269057612690611f44565b50506001821b610403565b5060208310610133831016604e8410600b84101617156126be575081810a610403565b6126c883836125e2565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156120b8576120b8611f44565b6000611c7a838361264356fea164736f6c6343000810000a",
}

var ComposerCrossChainSendABI = ComposerCrossChainSendMetaData.ABI

var ComposerCrossChainSendBin = ComposerCrossChainSendMetaData.Bin

func DeployComposerCrossChainSend(auth *bind.TransactOpts, backend bind.ContractBackend, scriptHash string, _router common.Address, _destinationChainSelector uint64, _token common.Address, _receivers string, _rpcUrl string) (common.Address, *types.Transaction, *ComposerCrossChainSend, error) {
	parsed, err := ComposerCrossChainSendMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ComposerCrossChainSendBin), backend, scriptHash, _router, _destinationChainSelector, _token, _receivers, _rpcUrl)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ComposerCrossChainSend{ComposerCrossChainSendCaller: ComposerCrossChainSendCaller{contract: contract}, ComposerCrossChainSendTransactor: ComposerCrossChainSendTransactor{contract: contract}, ComposerCrossChainSendFilterer: ComposerCrossChainSendFilterer{contract: contract}}, nil
}

type ComposerCrossChainSend struct {
	address common.Address
	abi     abi.ABI
	ComposerCrossChainSendCaller
	ComposerCrossChainSendTransactor
	ComposerCrossChainSendFilterer
}

type ComposerCrossChainSendCaller struct {
	contract *bind.BoundContract
}

type ComposerCrossChainSendTransactor struct {
	contract *bind.BoundContract
}

type ComposerCrossChainSendFilterer struct {
	contract *bind.BoundContract
}

type ComposerCrossChainSendSession struct {
	Contract     *ComposerCrossChainSend
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type ComposerCrossChainSendCallerSession struct {
	Contract *ComposerCrossChainSendCaller
	CallOpts bind.CallOpts
}

type ComposerCrossChainSendTransactorSession struct {
	Contract     *ComposerCrossChainSendTransactor
	TransactOpts bind.TransactOpts
}

type ComposerCrossChainSendRaw struct {
	Contract *ComposerCrossChainSend
}

type ComposerCrossChainSendCallerRaw struct {
	Contract *ComposerCrossChainSendCaller
}

type ComposerCrossChainSendTransactorRaw struct {
	Contract *ComposerCrossChainSendTransactor
}

func NewComposerCrossChainSend(address common.Address, backend bind.ContractBackend) (*ComposerCrossChainSend, error) {
	abi, err := abi.JSON(strings.NewReader(ComposerCrossChainSendABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindComposerCrossChainSend(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSend{address: address, abi: abi, ComposerCrossChainSendCaller: ComposerCrossChainSendCaller{contract: contract}, ComposerCrossChainSendTransactor: ComposerCrossChainSendTransactor{contract: contract}, ComposerCrossChainSendFilterer: ComposerCrossChainSendFilterer{contract: contract}}, nil
}

func NewComposerCrossChainSendCaller(address common.Address, caller bind.ContractCaller) (*ComposerCrossChainSendCaller, error) {
	contract, err := bindComposerCrossChainSend(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSendCaller{contract: contract}, nil
}

func NewComposerCrossChainSendTransactor(address common.Address, transactor bind.ContractTransactor) (*ComposerCrossChainSendTransactor, error) {
	contract, err := bindComposerCrossChainSend(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSendTransactor{contract: contract}, nil
}

func NewComposerCrossChainSendFilterer(address common.Address, filterer bind.ContractFilterer) (*ComposerCrossChainSendFilterer, error) {
	contract, err := bindComposerCrossChainSend(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSendFilterer{contract: contract}, nil
}

func bindComposerCrossChainSend(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ComposerCrossChainSendMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ComposerCrossChainSend.Contract.ComposerCrossChainSendCaller.contract.Call(opts, result, method, params...)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.ComposerCrossChainSendTransactor.contract.Transfer(opts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.ComposerCrossChainSendTransactor.contract.Transact(opts, method, params...)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ComposerCrossChainSend.Contract.contract.Call(opts, result, method, params...)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.contract.Transfer(opts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.contract.Transact(opts, method, params...)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) CheckCallback(opts *bind.CallOpts, data [][]byte, lookupData []byte) (bool, []byte, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "checkCallback", data, lookupData)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) CheckCallback(data [][]byte, lookupData []byte) (bool, []byte, error) {
	return _ComposerCrossChainSend.Contract.CheckCallback(&_ComposerCrossChainSend.CallOpts, data, lookupData)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) CheckCallback(data [][]byte, lookupData []byte) (bool, []byte, error) {
	return _ComposerCrossChainSend.Contract.CheckCallback(&_ComposerCrossChainSend.CallOpts, data, lookupData)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "checkUpkeep", arg0)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _ComposerCrossChainSend.Contract.CheckUpkeep(&_ComposerCrossChainSend.CallOpts, arg0)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) CheckUpkeep(arg0 []byte) (bool, []byte, error) {
	return _ComposerCrossChainSend.Contract.CheckUpkeep(&_ComposerCrossChainSend.CallOpts, arg0)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "fromHexChar", c)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) FromHexChar(c uint8) (uint8, error) {
	return _ComposerCrossChainSend.Contract.FromHexChar(&_ComposerCrossChainSend.CallOpts, c)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) FromHexChar(c uint8) (uint8, error) {
	return _ComposerCrossChainSend.Contract.FromHexChar(&_ComposerCrossChainSend.CallOpts, c)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) HexStringToAddress(opts *bind.CallOpts, s string) ([]byte, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "hexStringToAddress", s)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) HexStringToAddress(s string) ([]byte, error) {
	return _ComposerCrossChainSend.Contract.HexStringToAddress(&_ComposerCrossChainSend.CallOpts, s)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) HexStringToAddress(s string) ([]byte, error) {
	return _ComposerCrossChainSend.Contract.HexStringToAddress(&_ComposerCrossChainSend.CallOpts, s)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) Owner() (common.Address, error) {
	return _ComposerCrossChainSend.Contract.Owner(&_ComposerCrossChainSend.CallOpts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) Owner() (common.Address, error) {
	return _ComposerCrossChainSend.Contract.Owner(&_ComposerCrossChainSend.CallOpts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) RevertForFeedLookup(opts *bind.CallOpts) (bool, []byte, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "revertForFeedLookup")

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) RevertForFeedLookup() (bool, []byte, error) {
	return _ComposerCrossChainSend.Contract.RevertForFeedLookup(&_ComposerCrossChainSend.CallOpts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) RevertForFeedLookup() (bool, []byte, error) {
	return _ComposerCrossChainSend.Contract.RevertForFeedLookup(&_ComposerCrossChainSend.CallOpts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) StringToUint(opts *bind.CallOpts, s string) (*big.Int, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "stringToUint", s)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) StringToUint(s string) (*big.Int, error) {
	return _ComposerCrossChainSend.Contract.StringToUint(&_ComposerCrossChainSend.CallOpts, s)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) StringToUint(s string) (*big.Int, error) {
	return _ComposerCrossChainSend.Contract.StringToUint(&_ComposerCrossChainSend.CallOpts, s)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) ToAddress(opts *bind.CallOpts, s string) (common.Address, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "toAddress", s)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) ToAddress(s string) (common.Address, error) {
	return _ComposerCrossChainSend.Contract.ToAddress(&_ComposerCrossChainSend.CallOpts, s)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) ToAddress(s string) (common.Address, error) {
	return _ComposerCrossChainSend.Contract.ToAddress(&_ComposerCrossChainSend.CallOpts, s)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCaller) WhitelistedChains(opts *bind.CallOpts, arg0 uint64) (bool, error) {
	var out []interface{}
	err := _ComposerCrossChainSend.contract.Call(opts, &out, "whitelistedChains", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) WhitelistedChains(arg0 uint64) (bool, error) {
	return _ComposerCrossChainSend.Contract.WhitelistedChains(&_ComposerCrossChainSend.CallOpts, arg0)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendCallerSession) WhitelistedChains(arg0 uint64) (bool, error) {
	return _ComposerCrossChainSend.Contract.WhitelistedChains(&_ComposerCrossChainSend.CallOpts, arg0)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ComposerCrossChainSend.contract.Transact(opts, "acceptOwnership")
}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) AcceptOwnership() (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.AcceptOwnership(&_ComposerCrossChainSend.TransactOpts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.AcceptOwnership(&_ComposerCrossChainSend.TransactOpts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactor) PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error) {
	return _ComposerCrossChainSend.contract.Transact(opts, "performUpkeep", performData)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.PerformUpkeep(&_ComposerCrossChainSend.TransactOpts, performData)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactorSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.PerformUpkeep(&_ComposerCrossChainSend.TransactOpts, performData)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _ComposerCrossChainSend.contract.Transact(opts, "transferOwnership", to)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.TransferOwnership(&_ComposerCrossChainSend.TransactOpts, to)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.TransferOwnership(&_ComposerCrossChainSend.TransactOpts, to)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ComposerCrossChainSend.contract.RawTransact(opts, nil)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendSession) Receive() (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.Receive(&_ComposerCrossChainSend.TransactOpts)
}

func (_ComposerCrossChainSend *ComposerCrossChainSendTransactorSession) Receive() (*types.Transaction, error) {
	return _ComposerCrossChainSend.Contract.Receive(&_ComposerCrossChainSend.TransactOpts)
}

type ComposerCrossChainSendOwnershipTransferRequestedIterator struct {
	Event *ComposerCrossChainSendOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ComposerCrossChainSendOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComposerCrossChainSendOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ComposerCrossChainSendOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ComposerCrossChainSendOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *ComposerCrossChainSendOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ComposerCrossChainSendOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ComposerCrossChainSendOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ComposerCrossChainSend.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSendOwnershipTransferRequestedIterator{contract: _ComposerCrossChainSend.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ComposerCrossChainSend.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ComposerCrossChainSendOwnershipTransferRequested)
				if err := _ComposerCrossChainSend.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) ParseOwnershipTransferRequested(log types.Log) (*ComposerCrossChainSendOwnershipTransferRequested, error) {
	event := new(ComposerCrossChainSendOwnershipTransferRequested)
	if err := _ComposerCrossChainSend.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ComposerCrossChainSendOwnershipTransferredIterator struct {
	Event *ComposerCrossChainSendOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ComposerCrossChainSendOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComposerCrossChainSendOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ComposerCrossChainSendOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ComposerCrossChainSendOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *ComposerCrossChainSendOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ComposerCrossChainSendOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ComposerCrossChainSendOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ComposerCrossChainSend.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSendOwnershipTransferredIterator{contract: _ComposerCrossChainSend.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ComposerCrossChainSend.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ComposerCrossChainSendOwnershipTransferred)
				if err := _ComposerCrossChainSend.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) ParseOwnershipTransferred(log types.Log) (*ComposerCrossChainSendOwnershipTransferred, error) {
	event := new(ComposerCrossChainSendOwnershipTransferred)
	if err := _ComposerCrossChainSend.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ComposerCrossChainSendTokensTransferredIterator struct {
	Event *ComposerCrossChainSendTokensTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ComposerCrossChainSendTokensTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComposerCrossChainSendTokensTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ComposerCrossChainSendTokensTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ComposerCrossChainSendTokensTransferredIterator) Error() error {
	return it.fail
}

func (it *ComposerCrossChainSendTokensTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ComposerCrossChainSendTokensTransferred struct {
	MessageId                [32]byte
	DestinationChainSelector uint64
	Receiver                 common.Address
	Token                    common.Address
	TokenAmount              *big.Int
	FeeToken                 common.Address
	Fees                     *big.Int
	Raw                      types.Log
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) FilterTokensTransferred(opts *bind.FilterOpts, messageId [][32]byte, destinationChainSelector []uint64) (*ComposerCrossChainSendTokensTransferredIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var destinationChainSelectorRule []interface{}
	for _, destinationChainSelectorItem := range destinationChainSelector {
		destinationChainSelectorRule = append(destinationChainSelectorRule, destinationChainSelectorItem)
	}

	logs, sub, err := _ComposerCrossChainSend.contract.FilterLogs(opts, "TokensTransferred", messageIdRule, destinationChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSendTokensTransferredIterator{contract: _ComposerCrossChainSend.contract, event: "TokensTransferred", logs: logs, sub: sub}, nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) WatchTokensTransferred(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendTokensTransferred, messageId [][32]byte, destinationChainSelector []uint64) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var destinationChainSelectorRule []interface{}
	for _, destinationChainSelectorItem := range destinationChainSelector {
		destinationChainSelectorRule = append(destinationChainSelectorRule, destinationChainSelectorItem)
	}

	logs, sub, err := _ComposerCrossChainSend.contract.WatchLogs(opts, "TokensTransferred", messageIdRule, destinationChainSelectorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ComposerCrossChainSendTokensTransferred)
				if err := _ComposerCrossChainSend.contract.UnpackLog(event, "TokensTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) ParseTokensTransferred(log types.Log) (*ComposerCrossChainSendTokensTransferred, error) {
	event := new(ComposerCrossChainSendTokensTransferred)
	if err := _ComposerCrossChainSend.contract.UnpackLog(event, "TokensTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ComposerCrossChainSendTopUpSentIterator struct {
	Event *ComposerCrossChainSendTopUpSent

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ComposerCrossChainSendTopUpSentIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ComposerCrossChainSendTopUpSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ComposerCrossChainSendTopUpSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ComposerCrossChainSendTopUpSentIterator) Error() error {
	return it.fail
}

func (it *ComposerCrossChainSendTopUpSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ComposerCrossChainSendTopUpSent struct {
	Receiver     common.Address
	Amount       *big.Int
	CurrentNonce *big.Int
	Raw          types.Log
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) FilterTopUpSent(opts *bind.FilterOpts) (*ComposerCrossChainSendTopUpSentIterator, error) {

	logs, sub, err := _ComposerCrossChainSend.contract.FilterLogs(opts, "TopUpSent")
	if err != nil {
		return nil, err
	}
	return &ComposerCrossChainSendTopUpSentIterator{contract: _ComposerCrossChainSend.contract, event: "TopUpSent", logs: logs, sub: sub}, nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) WatchTopUpSent(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendTopUpSent) (event.Subscription, error) {

	logs, sub, err := _ComposerCrossChainSend.contract.WatchLogs(opts, "TopUpSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ComposerCrossChainSendTopUpSent)
				if err := _ComposerCrossChainSend.contract.UnpackLog(event, "TopUpSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSendFilterer) ParseTopUpSent(log types.Log) (*ComposerCrossChainSendTopUpSent, error) {
	event := new(ComposerCrossChainSendTopUpSent)
	if err := _ComposerCrossChainSend.contract.UnpackLog(event, "TopUpSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_ComposerCrossChainSend *ComposerCrossChainSend) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _ComposerCrossChainSend.abi.Events["OwnershipTransferRequested"].ID:
		return _ComposerCrossChainSend.ParseOwnershipTransferRequested(log)
	case _ComposerCrossChainSend.abi.Events["OwnershipTransferred"].ID:
		return _ComposerCrossChainSend.ParseOwnershipTransferred(log)
	case _ComposerCrossChainSend.abi.Events["TokensTransferred"].ID:
		return _ComposerCrossChainSend.ParseTokensTransferred(log)
	case _ComposerCrossChainSend.abi.Events["TopUpSent"].ID:
		return _ComposerCrossChainSend.ParseTopUpSent(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (ComposerCrossChainSendOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (ComposerCrossChainSendOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (ComposerCrossChainSendTokensTransferred) Topic() common.Hash {
	return common.HexToHash("0xc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca043")
}

func (ComposerCrossChainSendTopUpSent) Topic() common.Hash {
	return common.HexToHash("0x58018dc1932600a611f5a9dc039650cac3eec0076437f0ae11163f348d12ae1e")
}

func (_ComposerCrossChainSend *ComposerCrossChainSend) Address() common.Address {
	return _ComposerCrossChainSend.address
}

type ComposerCrossChainSendInterface interface {
	CheckCallback(opts *bind.CallOpts, data [][]byte, lookupData []byte) (bool, []byte, error)

	CheckUpkeep(opts *bind.CallOpts, arg0 []byte) (bool, []byte, error)

	FromHexChar(opts *bind.CallOpts, c uint8) (uint8, error)

	HexStringToAddress(opts *bind.CallOpts, s string) ([]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	RevertForFeedLookup(opts *bind.CallOpts) (bool, []byte, error)

	StringToUint(opts *bind.CallOpts, s string) (*big.Int, error)

	ToAddress(opts *bind.CallOpts, s string) (common.Address, error)

	WhitelistedChains(opts *bind.CallOpts, arg0 uint64) (bool, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ComposerCrossChainSendOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*ComposerCrossChainSendOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ComposerCrossChainSendOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*ComposerCrossChainSendOwnershipTransferred, error)

	FilterTokensTransferred(opts *bind.FilterOpts, messageId [][32]byte, destinationChainSelector []uint64) (*ComposerCrossChainSendTokensTransferredIterator, error)

	WatchTokensTransferred(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendTokensTransferred, messageId [][32]byte, destinationChainSelector []uint64) (event.Subscription, error)

	ParseTokensTransferred(log types.Log) (*ComposerCrossChainSendTokensTransferred, error)

	FilterTopUpSent(opts *bind.FilterOpts) (*ComposerCrossChainSendTopUpSentIterator, error)

	WatchTopUpSent(opts *bind.WatchOpts, sink chan<- *ComposerCrossChainSendTopUpSent) (event.Subscription, error)

	ParseTopUpSent(log types.Log) (*ComposerCrossChainSendTopUpSent, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
