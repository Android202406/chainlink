// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package test_vrf_coordinator_v1

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type VRFBeaconTypesCallback struct {
	RequestID    *big.Int
	NumWords     uint16
	Requester    common.Address
	Arguments    []byte
	SubID        uint64
	GasAllowance *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesOutputServed struct {
	Height            uint64
	ConfirmationDelay *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var TestVRFCoordinatorV1MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"BeaconPeriodMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earliestAllowed\",\"type\":\"uint256\"}],\"name\":\"BlockTooRecent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"firstDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDelay\",\"type\":\"uint16\"}],\"name\":\"ConfirmationDelayBlocksTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confirmationDelays\",\"type\":\"uint16[10]\"},{\"internalType\":\"uint8\",\"name\":\"violatingIndex\",\"type\":\"uint8\"}],\"name\":\"ConfirmationDelaysNotIncreasing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reportHeight\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"separatorHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"MustBeRequestedOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWordsRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confDelays\",\"type\":\"uint16[10]\"}],\"name\":\"NonZeroDelayAfterZeroDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableFromLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"}],\"name\":\"RandomnessNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ResponseMustBeRetrievedByRequester\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyRequestsReplaceContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySlotsReplaceContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyWords\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"UniverseHasEndedBangBangBang\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"givenDelay\",\"type\":\"uint24\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"knownDelays\",\"type\":\"uint24[8]\"}],\"name\":\"UnknownConfirmationDelay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.RequestID[]\",\"name\":\"requestIDs\",\"type\":\"uint48[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"successfulFulfillment\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"truncatedErrorData\",\"type\":\"bytes[]\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"}],\"name\":\"RandomnessFulfillmentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_link\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentsInJuels\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"forgetConsumerSubscriptionID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationDelays\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"\",\"type\":\"uint24[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProducer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLinkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_StartSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_beaconPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconPeriodBlocksArg\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"vrfOutputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processVRFOutputs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"}],\"internalType\":\"structVRFBeaconTypes.OutputServed[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"}],\"name\":\"redeemRandomness\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomness\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"}],\"name\":\"requestRandomnessFulfillment\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"confDelays\",\"type\":\"uint24[8]\"}],\"name\":\"setConfirmationDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProducer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"juelsAmount\",\"type\":\"uint256\"}],\"name\":\"transferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

var TestVRFCoordinatorV1ABI = TestVRFCoordinatorV1MetaData.ABI

var TestVRFCoordinatorV1Bin = TestVRFCoordinatorV1MetaData.Bin

func DeployTestVRFCoordinatorV1(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TestVRFCoordinatorV1, error) {
	parsed, err := TestVRFCoordinatorV1MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestVRFCoordinatorV1Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestVRFCoordinatorV1{TestVRFCoordinatorV1Caller: TestVRFCoordinatorV1Caller{contract: contract}, TestVRFCoordinatorV1Transactor: TestVRFCoordinatorV1Transactor{contract: contract}, TestVRFCoordinatorV1Filterer: TestVRFCoordinatorV1Filterer{contract: contract}}, nil
}

type TestVRFCoordinatorV1 struct {
	address common.Address
	abi     abi.ABI
	TestVRFCoordinatorV1Caller
	TestVRFCoordinatorV1Transactor
	TestVRFCoordinatorV1Filterer
}

type TestVRFCoordinatorV1Caller struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV1Transactor struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV1Filterer struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV1Session struct {
	Contract     *TestVRFCoordinatorV1
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type TestVRFCoordinatorV1CallerSession struct {
	Contract *TestVRFCoordinatorV1Caller
	CallOpts bind.CallOpts
}

type TestVRFCoordinatorV1TransactorSession struct {
	Contract     *TestVRFCoordinatorV1Transactor
	TransactOpts bind.TransactOpts
}

type TestVRFCoordinatorV1Raw struct {
	Contract *TestVRFCoordinatorV1
}

type TestVRFCoordinatorV1CallerRaw struct {
	Contract *TestVRFCoordinatorV1Caller
}

type TestVRFCoordinatorV1TransactorRaw struct {
	Contract *TestVRFCoordinatorV1Transactor
}

func NewTestVRFCoordinatorV1(address common.Address, backend bind.ContractBackend) (*TestVRFCoordinatorV1, error) {
	abi, err := abi.JSON(strings.NewReader(TestVRFCoordinatorV1ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindTestVRFCoordinatorV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1{address: address, abi: abi, TestVRFCoordinatorV1Caller: TestVRFCoordinatorV1Caller{contract: contract}, TestVRFCoordinatorV1Transactor: TestVRFCoordinatorV1Transactor{contract: contract}, TestVRFCoordinatorV1Filterer: TestVRFCoordinatorV1Filterer{contract: contract}}, nil
}

func NewTestVRFCoordinatorV1Caller(address common.Address, caller bind.ContractCaller) (*TestVRFCoordinatorV1Caller, error) {
	contract, err := bindTestVRFCoordinatorV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1Caller{contract: contract}, nil
}

func NewTestVRFCoordinatorV1Transactor(address common.Address, transactor bind.ContractTransactor) (*TestVRFCoordinatorV1Transactor, error) {
	contract, err := bindTestVRFCoordinatorV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1Transactor{contract: contract}, nil
}

func NewTestVRFCoordinatorV1Filterer(address common.Address, filterer bind.ContractFilterer) (*TestVRFCoordinatorV1Filterer, error) {
	contract, err := bindTestVRFCoordinatorV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1Filterer{contract: contract}, nil
}

func bindTestVRFCoordinatorV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestVRFCoordinatorV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFCoordinatorV1.Contract.TestVRFCoordinatorV1Caller.contract.Call(opts, result, method, params...)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.TestVRFCoordinatorV1Transactor.contract.Transfer(opts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.TestVRFCoordinatorV1Transactor.contract.Transact(opts, method, params...)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFCoordinatorV1.Contract.contract.Call(opts, result, method, params...)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.contract.Transfer(opts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.contract.Transact(opts, method, params...)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) MAXCONSUMERS(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "MAX_CONSUMERS")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) MAXCONSUMERS() (uint16, error) {
	return _TestVRFCoordinatorV1.Contract.MAXCONSUMERS(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) MAXCONSUMERS() (uint16, error) {
	return _TestVRFCoordinatorV1.Contract.MAXCONSUMERS(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFCoordinatorV1.Contract.NUMCONFDELAYS(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFCoordinatorV1.Contract.NUMCONFDELAYS(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) Link(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "_link")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) Link() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.Link(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) Link() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.Link(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "getConfirmationDelays")

	if err != nil {
		return *new([8]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([8]*big.Int)).(*[8]*big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) GetConfirmationDelays() ([8]*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.GetConfirmationDelays(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) GetConfirmationDelays() ([8]*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.GetConfirmationDelays(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) GetCurrentSubId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "getCurrentSubId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) GetCurrentSubId() (uint64, error) {
	return _TestVRFCoordinatorV1.Contract.GetCurrentSubId(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) GetCurrentSubId() (uint64, error) {
	return _TestVRFCoordinatorV1.Contract.GetCurrentSubId(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) GetProducer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "getProducer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) GetProducer() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.GetProducer(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) GetProducer() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.GetProducer(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

	error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "getSubscription", subId)

	outstruct := new(GetSubscription)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ReqCount = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Owner = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Consumers = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)

	return *outstruct, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _TestVRFCoordinatorV1.Contract.GetSubscription(&_TestVRFCoordinatorV1.CallOpts, subId)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _TestVRFCoordinatorV1.Contract.GetSubscription(&_TestVRFCoordinatorV1.CallOpts, subId)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) GetTotalBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "getTotalBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) GetTotalBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.GetTotalBalance(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) GetTotalBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.GetTotalBalance(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "getTotalLinkBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) GetTotalLinkBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.GetTotalLinkBalance(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) GetTotalLinkBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.GetTotalLinkBalance(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) IStartSlot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "i_StartSlot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) IStartSlot() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.IStartSlot(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) IStartSlot() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.IStartSlot(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "i_beaconPeriodBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) IBeaconPeriodBlocks() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.IBeaconPeriodBlocks(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) IBeaconPeriodBlocks() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.IBeaconPeriodBlocks(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) MaxNumWords(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "maxNumWords")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) MaxNumWords() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.MaxNumWords(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) MaxNumWords() (*big.Int, error) {
	return _TestVRFCoordinatorV1.Contract.MaxNumWords(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) MinDelay(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "minDelay")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) MinDelay() (uint16, error) {
	return _TestVRFCoordinatorV1.Contract.MinDelay(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) MinDelay() (uint16, error) {
	return _TestVRFCoordinatorV1.Contract.MinDelay(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) Owner() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.Owner(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) Owner() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.Owner(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "pendingRequestExists", subId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) PendingRequestExists(subId uint64) (bool, error) {
	return _TestVRFCoordinatorV1.Contract.PendingRequestExists(&_TestVRFCoordinatorV1.CallOpts, subId)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) PendingRequestExists(subId uint64) (bool, error) {
	return _TestVRFCoordinatorV1.Contract.PendingRequestExists(&_TestVRFCoordinatorV1.CallOpts, subId)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Caller) Producer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV1.contract.Call(opts, &out, "producer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) Producer() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.Producer(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1CallerSession) Producer() (common.Address, error) {
	return _TestVRFCoordinatorV1.Contract.Producer(&_TestVRFCoordinatorV1.CallOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "acceptSubscriptionOwnerTransfer", subId)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.AcceptSubscriptionOwnerTransfer(&_TestVRFCoordinatorV1.TransactOpts, subId)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.AcceptSubscriptionOwnerTransfer(&_TestVRFCoordinatorV1.TransactOpts, subId)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "addConsumer", subId, consumer)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.AddConsumer(&_TestVRFCoordinatorV1.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.AddConsumer(&_TestVRFCoordinatorV1.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "batchTransferLink", recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.BatchTransferLink(&_TestVRFCoordinatorV1.TransactOpts, recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.BatchTransferLink(&_TestVRFCoordinatorV1.TransactOpts, recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "cancelSubscription", subId, to)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.CancelSubscription(&_TestVRFCoordinatorV1.TransactOpts, subId, to)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.CancelSubscription(&_TestVRFCoordinatorV1.TransactOpts, subId, to)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "createSubscription")
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) CreateSubscription() (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.CreateSubscription(&_TestVRFCoordinatorV1.TransactOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) CreateSubscription() (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.CreateSubscription(&_TestVRFCoordinatorV1.TransactOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "forgetConsumerSubscriptionID", consumers)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.ForgetConsumerSubscriptionID(&_TestVRFCoordinatorV1.TransactOpts, consumers)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.ForgetConsumerSubscriptionID(&_TestVRFCoordinatorV1.TransactOpts, consumers)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) Initialize(opts *bind.TransactOpts, beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "initialize", beaconPeriodBlocksArg, linkToken)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) Initialize(beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.Initialize(&_TestVRFCoordinatorV1.TransactOpts, beaconPeriodBlocksArg, linkToken)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) Initialize(beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.Initialize(&_TestVRFCoordinatorV1.TransactOpts, beaconPeriodBlocksArg, linkToken)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "onTokenTransfer", arg0, amount, data)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.OnTokenTransfer(&_TestVRFCoordinatorV1.TransactOpts, arg0, amount, data)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.OnTokenTransfer(&_TestVRFCoordinatorV1.TransactOpts, arg0, amount, data)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "processVRFOutputs", vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.ProcessVRFOutputs(&_TestVRFCoordinatorV1.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.ProcessVRFOutputs(&_TestVRFCoordinatorV1.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "redeemRandomness", requestID)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RedeemRandomness(&_TestVRFCoordinatorV1.TransactOpts, requestID)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RedeemRandomness(&_TestVRFCoordinatorV1.TransactOpts, requestID)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "removeConsumer", subId, consumer)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RemoveConsumer(&_TestVRFCoordinatorV1.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RemoveConsumer(&_TestVRFCoordinatorV1.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "renounceOwnership")
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) RenounceOwnership() (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RenounceOwnership(&_TestVRFCoordinatorV1.TransactOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RenounceOwnership(&_TestVRFCoordinatorV1.TransactOpts)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "requestRandomness", numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RequestRandomness(&_TestVRFCoordinatorV1.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RequestRandomness(&_TestVRFCoordinatorV1.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "requestRandomnessFulfillment", subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RequestRandomnessFulfillment(&_TestVRFCoordinatorV1.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RequestRandomnessFulfillment(&_TestVRFCoordinatorV1.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "requestSubscriptionOwnerTransfer", subId, newOwner)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RequestSubscriptionOwnerTransfer(&_TestVRFCoordinatorV1.TransactOpts, subId, newOwner)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.RequestSubscriptionOwnerTransfer(&_TestVRFCoordinatorV1.TransactOpts, subId, newOwner)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "setConfirmationDelays", confDelays)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.SetConfirmationDelays(&_TestVRFCoordinatorV1.TransactOpts, confDelays)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.SetConfirmationDelays(&_TestVRFCoordinatorV1.TransactOpts, confDelays)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "setProducer", addr)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.SetProducer(&_TestVRFCoordinatorV1.TransactOpts, addr)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.SetProducer(&_TestVRFCoordinatorV1.TransactOpts, addr)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "transferLink", recipient, juelsAmount)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.TransferLink(&_TestVRFCoordinatorV1.TransactOpts, recipient, juelsAmount)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.TransferLink(&_TestVRFCoordinatorV1.TransactOpts, recipient, juelsAmount)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.contract.Transact(opts, "transferOwnership", newOwner)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.TransferOwnership(&_TestVRFCoordinatorV1.TransactOpts, newOwner)
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV1.Contract.TransferOwnership(&_TestVRFCoordinatorV1.TransactOpts, newOwner)
}

type TestVRFCoordinatorV1InitializedIterator struct {
	Event *TestVRFCoordinatorV1Initialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1InitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1Initialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1Initialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1InitializedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1InitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1Initialized struct {
	Version uint8
	Raw     types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterInitialized(opts *bind.FilterOpts) (*TestVRFCoordinatorV1InitializedIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1InitializedIterator{contract: _TestVRFCoordinatorV1.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1Initialized) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1Initialized)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseInitialized(log types.Log) (*TestVRFCoordinatorV1Initialized, error) {
	event := new(TestVRFCoordinatorV1Initialized)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1OwnershipTransferredIterator struct {
	Event *TestVRFCoordinatorV1OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TestVRFCoordinatorV1OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1OwnershipTransferredIterator{contract: _TestVRFCoordinatorV1.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1OwnershipTransferred)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseOwnershipTransferred(log types.Log) (*TestVRFCoordinatorV1OwnershipTransferred, error) {
	event := new(TestVRFCoordinatorV1OwnershipTransferred)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1RandomWordsFulfilledIterator struct {
	Event *TestVRFCoordinatorV1RandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1RandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1RandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1RandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1RandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1RandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1RandomWordsFulfilled struct {
	RequestIDs            []*big.Int
	SuccessfulFulfillment []byte
	TruncatedErrorData    [][]byte
	Raw                   types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*TestVRFCoordinatorV1RandomWordsFulfilledIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1RandomWordsFulfilledIterator{contract: _TestVRFCoordinatorV1.contract, event: "RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1RandomWordsFulfilled) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1RandomWordsFulfilled)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseRandomWordsFulfilled(log types.Log) (*TestVRFCoordinatorV1RandomWordsFulfilled, error) {
	event := new(TestVRFCoordinatorV1RandomWordsFulfilled)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1RandomnessFulfillmentRequestedIterator struct {
	Event *TestVRFCoordinatorV1RandomnessFulfillmentRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1RandomnessFulfillmentRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1RandomnessFulfillmentRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1RandomnessFulfillmentRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1RandomnessFulfillmentRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1RandomnessFulfillmentRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1RandomnessFulfillmentRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	SubID                  uint64
	Callback               VRFBeaconTypesCallback
	Raw                    types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*TestVRFCoordinatorV1RandomnessFulfillmentRequestedIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1RandomnessFulfillmentRequestedIterator{contract: _TestVRFCoordinatorV1.contract, event: "RandomnessFulfillmentRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1RandomnessFulfillmentRequested) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1RandomnessFulfillmentRequested)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseRandomnessFulfillmentRequested(log types.Log) (*TestVRFCoordinatorV1RandomnessFulfillmentRequested, error) {
	event := new(TestVRFCoordinatorV1RandomnessFulfillmentRequested)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1RandomnessRequestedIterator struct {
	Event *TestVRFCoordinatorV1RandomnessRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1RandomnessRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1RandomnessRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1RandomnessRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1RandomnessRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1RandomnessRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1RandomnessRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	Raw                    types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*TestVRFCoordinatorV1RandomnessRequestedIterator, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1RandomnessRequestedIterator{contract: _TestVRFCoordinatorV1.contract, event: "RandomnessRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1RandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1RandomnessRequested)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseRandomnessRequested(log types.Log) (*TestVRFCoordinatorV1RandomnessRequested, error) {
	event := new(TestVRFCoordinatorV1RandomnessRequested)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1SubscriptionCanceledIterator struct {
	Event *TestVRFCoordinatorV1SubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1SubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1SubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1SubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1SubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1SubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1SubscriptionCanceled struct {
	SubId  uint64
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionCanceledIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1SubscriptionCanceledIterator{contract: _TestVRFCoordinatorV1.contract, event: "SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionCanceled, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1SubscriptionCanceled)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseSubscriptionCanceled(log types.Log) (*TestVRFCoordinatorV1SubscriptionCanceled, error) {
	event := new(TestVRFCoordinatorV1SubscriptionCanceled)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1SubscriptionConsumerAddedIterator struct {
	Event *TestVRFCoordinatorV1SubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1SubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1SubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1SubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1SubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1SubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1SubscriptionConsumerAdded struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionConsumerAddedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1SubscriptionConsumerAddedIterator{contract: _TestVRFCoordinatorV1.contract, event: "SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1SubscriptionConsumerAdded)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseSubscriptionConsumerAdded(log types.Log) (*TestVRFCoordinatorV1SubscriptionConsumerAdded, error) {
	event := new(TestVRFCoordinatorV1SubscriptionConsumerAdded)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1SubscriptionConsumerRemovedIterator struct {
	Event *TestVRFCoordinatorV1SubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1SubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1SubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1SubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1SubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1SubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1SubscriptionConsumerRemoved struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionConsumerRemovedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1SubscriptionConsumerRemovedIterator{contract: _TestVRFCoordinatorV1.contract, event: "SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1SubscriptionConsumerRemoved)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseSubscriptionConsumerRemoved(log types.Log) (*TestVRFCoordinatorV1SubscriptionConsumerRemoved, error) {
	event := new(TestVRFCoordinatorV1SubscriptionConsumerRemoved)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1SubscriptionCreatedIterator struct {
	Event *TestVRFCoordinatorV1SubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1SubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1SubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1SubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1SubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1SubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1SubscriptionCreated struct {
	SubId uint64
	Owner common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionCreatedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1SubscriptionCreatedIterator{contract: _TestVRFCoordinatorV1.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionCreated, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1SubscriptionCreated)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseSubscriptionCreated(log types.Log) (*TestVRFCoordinatorV1SubscriptionCreated, error) {
	event := new(TestVRFCoordinatorV1SubscriptionCreated)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1SubscriptionFundedIterator struct {
	Event *TestVRFCoordinatorV1SubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1SubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1SubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1SubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1SubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1SubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1SubscriptionFunded struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionFundedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1SubscriptionFundedIterator{contract: _TestVRFCoordinatorV1.contract, event: "SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionFunded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1SubscriptionFunded)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseSubscriptionFunded(log types.Log) (*TestVRFCoordinatorV1SubscriptionFunded, error) {
	event := new(TestVRFCoordinatorV1SubscriptionFunded)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1SubscriptionOwnerTransferRequestedIterator struct {
	Event *TestVRFCoordinatorV1SubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1SubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1SubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1SubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1SubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1SubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1SubscriptionOwnerTransferRequested struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionOwnerTransferRequestedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1SubscriptionOwnerTransferRequestedIterator{contract: _TestVRFCoordinatorV1.contract, event: "SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1SubscriptionOwnerTransferRequested)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseSubscriptionOwnerTransferRequested(log types.Log) (*TestVRFCoordinatorV1SubscriptionOwnerTransferRequested, error) {
	event := new(TestVRFCoordinatorV1SubscriptionOwnerTransferRequested)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV1SubscriptionOwnerTransferredIterator struct {
	Event *TestVRFCoordinatorV1SubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV1SubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV1SubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV1SubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV1SubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV1SubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV1SubscriptionOwnerTransferred struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionOwnerTransferredIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.FilterLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV1SubscriptionOwnerTransferredIterator{contract: _TestVRFCoordinatorV1.contract, event: "SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV1.contract.WatchLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV1SubscriptionOwnerTransferred)
				if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1Filterer) ParseSubscriptionOwnerTransferred(log types.Log) (*TestVRFCoordinatorV1SubscriptionOwnerTransferred, error) {
	event := new(TestVRFCoordinatorV1SubscriptionOwnerTransferred)
	if err := _TestVRFCoordinatorV1.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetSubscription struct {
	Balance   *big.Int
	ReqCount  uint64
	Owner     common.Address
	Consumers []common.Address
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _TestVRFCoordinatorV1.abi.Events["Initialized"].ID:
		return _TestVRFCoordinatorV1.ParseInitialized(log)
	case _TestVRFCoordinatorV1.abi.Events["OwnershipTransferred"].ID:
		return _TestVRFCoordinatorV1.ParseOwnershipTransferred(log)
	case _TestVRFCoordinatorV1.abi.Events["RandomWordsFulfilled"].ID:
		return _TestVRFCoordinatorV1.ParseRandomWordsFulfilled(log)
	case _TestVRFCoordinatorV1.abi.Events["RandomnessFulfillmentRequested"].ID:
		return _TestVRFCoordinatorV1.ParseRandomnessFulfillmentRequested(log)
	case _TestVRFCoordinatorV1.abi.Events["RandomnessRequested"].ID:
		return _TestVRFCoordinatorV1.ParseRandomnessRequested(log)
	case _TestVRFCoordinatorV1.abi.Events["SubscriptionCanceled"].ID:
		return _TestVRFCoordinatorV1.ParseSubscriptionCanceled(log)
	case _TestVRFCoordinatorV1.abi.Events["SubscriptionConsumerAdded"].ID:
		return _TestVRFCoordinatorV1.ParseSubscriptionConsumerAdded(log)
	case _TestVRFCoordinatorV1.abi.Events["SubscriptionConsumerRemoved"].ID:
		return _TestVRFCoordinatorV1.ParseSubscriptionConsumerRemoved(log)
	case _TestVRFCoordinatorV1.abi.Events["SubscriptionCreated"].ID:
		return _TestVRFCoordinatorV1.ParseSubscriptionCreated(log)
	case _TestVRFCoordinatorV1.abi.Events["SubscriptionFunded"].ID:
		return _TestVRFCoordinatorV1.ParseSubscriptionFunded(log)
	case _TestVRFCoordinatorV1.abi.Events["SubscriptionOwnerTransferRequested"].ID:
		return _TestVRFCoordinatorV1.ParseSubscriptionOwnerTransferRequested(log)
	case _TestVRFCoordinatorV1.abi.Events["SubscriptionOwnerTransferred"].ID:
		return _TestVRFCoordinatorV1.ParseSubscriptionOwnerTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (TestVRFCoordinatorV1Initialized) Topic() common.Hash {
	return common.HexToHash("0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498")
}

func (TestVRFCoordinatorV1OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (TestVRFCoordinatorV1RandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0x47ddf7bb0cbd94c1b43c5097f1352a80db0ceb3696f029d32b24f32cd631d2b7")
}

func (TestVRFCoordinatorV1RandomnessFulfillmentRequested) Topic() common.Hash {
	return common.HexToHash("0xa62e84e206cb87e2f6896795353c5358ff3d415d0bccc24e45c5fad83e17d03c")
}

func (TestVRFCoordinatorV1RandomnessRequested) Topic() common.Hash {
	return common.HexToHash("0xc334d6f57be304c8192da2e39220c48e35f7e9afa16c541e68a6a859eff4dbc5")
}

func (TestVRFCoordinatorV1SubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0xe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd49815")
}

func (TestVRFCoordinatorV1SubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e0")
}

func (TestVRFCoordinatorV1SubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x182bff9831466789164ca77075fffd84916d35a8180ba73c27e45634549b445b")
}

func (TestVRFCoordinatorV1SubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf")
}

func (TestVRFCoordinatorV1SubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0xd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8")
}

func (TestVRFCoordinatorV1SubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x69436ea6df009049404f564eff6622cd00522b0bd6a89efd9e52a355c4a879be")
}

func (TestVRFCoordinatorV1SubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x6f1dc65165ffffedfd8e507b4a0f1fcfdada045ed11f6c26ba27cedfe87802f0")
}

func (_TestVRFCoordinatorV1 *TestVRFCoordinatorV1) Address() common.Address {
	return _TestVRFCoordinatorV1.address
}

type TestVRFCoordinatorV1Interface interface {
	MAXCONSUMERS(opts *bind.CallOpts) (uint16, error)

	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	Link(opts *bind.CallOpts) (common.Address, error)

	GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error)

	GetCurrentSubId(opts *bind.CallOpts) (uint64, error)

	GetProducer(opts *bind.CallOpts) (common.Address, error)

	GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

		error)

	GetTotalBalance(opts *bind.CallOpts) (*big.Int, error)

	GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error)

	IStartSlot(opts *bind.CallOpts) (*big.Int, error)

	IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error)

	MaxNumWords(opts *bind.CallOpts) (*big.Int, error)

	MinDelay(opts *bind.CallOpts) (uint16, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error)

	Producer(opts *bind.CallOpts) (common.Address, error)

	AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error)

	AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error)

	CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error)

	CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error)

	ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error)

	OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error)

	ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error)

	RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error)

	RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error)

	RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error)

	RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error)

	SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error)

	SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error)

	TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	FilterInitialized(opts *bind.FilterOpts) (*TestVRFCoordinatorV1InitializedIterator, error)

	WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1Initialized) (event.Subscription, error)

	ParseInitialized(log types.Log) (*TestVRFCoordinatorV1Initialized, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TestVRFCoordinatorV1OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*TestVRFCoordinatorV1OwnershipTransferred, error)

	FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*TestVRFCoordinatorV1RandomWordsFulfilledIterator, error)

	WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1RandomWordsFulfilled) (event.Subscription, error)

	ParseRandomWordsFulfilled(log types.Log) (*TestVRFCoordinatorV1RandomWordsFulfilled, error)

	FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*TestVRFCoordinatorV1RandomnessFulfillmentRequestedIterator, error)

	WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1RandomnessFulfillmentRequested) (event.Subscription, error)

	ParseRandomnessFulfillmentRequested(log types.Log) (*TestVRFCoordinatorV1RandomnessFulfillmentRequested, error)

	FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*TestVRFCoordinatorV1RandomnessRequestedIterator, error)

	WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1RandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error)

	ParseRandomnessRequested(log types.Log) (*TestVRFCoordinatorV1RandomnessRequested, error)

	FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionCanceledIterator, error)

	WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionCanceled, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCanceled(log types.Log) (*TestVRFCoordinatorV1SubscriptionCanceled, error)

	FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionConsumerAddedIterator, error)

	WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerAdded(log types.Log) (*TestVRFCoordinatorV1SubscriptionConsumerAdded, error)

	FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionConsumerRemovedIterator, error)

	WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerRemoved(log types.Log) (*TestVRFCoordinatorV1SubscriptionConsumerRemoved, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionCreated, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*TestVRFCoordinatorV1SubscriptionCreated, error)

	FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionFundedIterator, error)

	WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionFunded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionFunded(log types.Log) (*TestVRFCoordinatorV1SubscriptionFunded, error)

	FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionOwnerTransferRequestedIterator, error)

	WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferRequested(log types.Log) (*TestVRFCoordinatorV1SubscriptionOwnerTransferRequested, error)

	FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV1SubscriptionOwnerTransferredIterator, error)

	WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV1SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferred(log types.Log) (*TestVRFCoordinatorV1SubscriptionOwnerTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
