// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package test_vrf_beacon_v2

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type KeyDataStructKeyData struct {
	PublicKey []byte
	Hashes    [][32]byte
}

type VRFBeaconReportReport struct {
	Outputs           []VRFBeaconTypesVRFOutput
	JuelsPerFeeCoin   *big.Int
	RecentBlockHeight uint64
	RecentBlockHash   [32]byte
}

type VRFBeaconTypesCallback struct {
	RequestID    *big.Int
	NumWords     uint16
	Requester    common.Address
	Arguments    []byte
	SubID        uint64
	GasAllowance *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesOutputServed struct {
	Height            uint64
	ConfirmationDelay *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var TestVRFBeaconV2MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorWrong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyProvider\",\"type\":\"address\"}],\"name\":\"KeyInfoMustComeFromProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expectedLength\",\"type\":\"uint256\"}],\"name\":\"OffchainConfigHasWrongLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"occVersion\",\"type\":\"uint64\"}],\"name\":\"UnknownConfigVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"BillingAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"BillingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"aggregatorRoundId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"epochAndRound\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"structVRFBeaconTypes.OutputServed[]\",\"name\":\"outputsServed\",\"type\":\"tuple[]\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contractLinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"OraclePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_allowOnchainVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"acceptPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"recentBlockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"recentBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structVRFBeaconReport.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exposeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBilling\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBillingAccessController\",\"outputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"contractIVRFCoordinatorProducerAPI\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"contractDKG\",\"name\":\"keyProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowOnchainVerification\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structKeyDataStruct.KeyData\",\"name\":\"kd\",\"type\":\"tuple\"}],\"name\":\"keyGenerated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAvailableForPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newKeyRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"oracleObservationCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"owedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_keyID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_provingKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"setBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"}],\"name\":\"setBillingAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"setPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"transferPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061481a806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063b1dc65a4116100f9578063d57fc45a11610097578063e4902f8211610071578063e4902f821461046f578063eb5dcd6c14610497578063f2fde38b146104aa578063fbffd2c1146104bd57600080fd5b8063d57fc45a1461043f578063dc398e7f14610449578063e3d0e7121461045c57600080fd5b8063c278e5b7116100d3578063c278e5b71461040a578063c4c92b371461041b578063cc31f7dd1461042d578063d09dc3391461043757600080fd5b8063b1dc65a4146103d1578063bf2732c7146103e4578063c1075329146103f757600080fd5b806381ff7048116101665780639c849b30116101405780639c849b3014610361578063ac4cf1e714610374578063afcb95d714610392578063b121e147146103be57600080fd5b806381ff7048146102f45780638ac28d5a146103235780638da5cb5b1461033657600080fd5b80632f7527cc116101a25780632f7527cc146102b557806355e48749146102cf578063643dc105146102d957806379ba5097146102ec57600080fd5b80630eafb25b146101c9578063181f5a77146101ef578063299372681461022e575b600080fd5b6101dc6101d736600461344f565b6104d0565b6040519081526020015b60405180910390f35b604080518082018252601581527f565246426561636f6e20312e302e302d616c7068610000000000000000000000602082015290516101e691906134c4565b610279610194546a0100000000000000000000810463ffffffff90811692600160701b8304821692600160901b8104831692600160b01b82041691600160d01b90910462ffffff1690565b6040805163ffffffff9687168152948616602086015292851692840192909252909216606082015262ffffff909116608082015260a0016101e6565b6102bd600881565b60405160ff90911681526020016101e6565b6102d76105dc565b005b6102d76102e7366004613501565b610628565b6102d761088f565b61025d5461025f54604080516000815264010000000090930463ffffffff1660208401528201526060016101e6565b6102d761033136600461344f565b61095d565b6000546201000090046001600160a01b03165b6040516001600160a01b0390911681526020016101e6565b6102d761036f3660046135b6565b6109d0565b610400546103829060ff1681565b60405190151581526020016101e6565b61025f54610261546040805160008152602081019390935263ffffffff909116908201526060016101e6565b6102d76103cc36600461344f565b610bb0565b6102d76103df366004613664565b610c8f565b6102d76103f23660046138ab565b611143565b6102d7610405366004613978565b6111b3565b6102d76104183660046139a4565b50565b61026c546001600160a01b0316610349565b6101dc6103365481565b6101dc61141d565b6101dc6103375481565b6102d76104573660046139ed565b6114b7565b6102d761046a366004613a98565b6115cd565b61048261047d36600461344f565b611d27565b60405163ffffffff90911681526020016101e6565b6102d76104a5366004613b86565b611de3565b6102d76104b836600461344f565b611f1e565b6102d76104cb36600461344f565b611f2f565b6001600160a01b0381166000908152610262602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b031691810191909152906105335750600092915050565b610194546020820151600091600160901b900463ffffffff16906102669060ff16601f811061056457610564613bbf565b6008810491909101546101945461059b926007166004026101000a90910463ffffffff908116916601000000000000900416613beb565b63ffffffff166105ab9190613c10565b6105b990633b9aca00613c10565b905081604001516001600160601b0316816105d49190613c2f565b949350505050565b610335546001600160a01b031633811461061f5760405163292f4fb560e01b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b50600061033755565b61026c546001600160a01b031661064e6000546001600160a01b03620100009091041690565b6001600160a01b0316336001600160a01b031614806106da5750604051630d629b5f60e31b81526001600160a01b03821690636b14daf8906106999033906000903690600401613c70565b602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190613c93565b6107265760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610616565b61072e611f40565b61019480547fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a010000000000000000000063ffffffff8981169182027fffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffff1692909217600160701b898416908102919091177fffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffff16600160901b8985169081027fffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffff1691909117600160b01b948916948502177fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d01b62ffffff89169081029190911790955560408051938452602084019290925290820152606081019190915260808101919091527f0bf184bf1bba9699114bdceddaf338a1b364252c5e497cc01918dde92031713f9060a00160405180910390a1505050505050565b6001546001600160a01b031633146108e95760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610616565b60008054336201000081810275ffffffffffffffffffffffffffffffffffffffff0000198416178455600180546001600160a01b03191690556040516001600160a01b03919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6001600160a01b03818116600090815261026a60205260409020541633146109c75760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792070617965652063616e2077697468647261770000000000000000006044820152606401610616565b610418816123c0565b6109d86125b7565b828114610a275760405162461bcd60e51b815260206004820181905260248201527f7472616e736d6974746572732e73697a6520213d207061796565732e73697a656044820152606401610616565b60005b83811015610ba9576000858583818110610a4657610a46613bbf565b9050602002016020810190610a5b919061344f565b90506000848484818110610a7157610a71613bbf565b9050602002016020810190610a86919061344f565b6001600160a01b03808416600090815261026a60205260409020549192501680158080610ac45750826001600160a01b0316826001600160a01b0316145b610b105760405162461bcd60e51b815260206004820152601160248201527f706179656520616c7265616479207365740000000000000000000000000000006044820152606401610616565b6001600160a01b03848116600090815261026a6020526040902080546001600160a01b03191685831690811790915590831614610b9257826001600160a01b0316826001600160a01b0316856001600160a01b03167f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b360405160405180910390a45b505050508080610ba190613cb0565b915050610a2a565b5050505050565b6001600160a01b03818116600090815261026b6020526040902054163314610c1a5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792070726f706f736564207061796565732063616e20616363657074006044820152606401610616565b6001600160a01b03818116600081815261026a602090815260408083208054336001600160a01b0319808316821790935561026b909452828520805490921690915590519416939092849290917f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b39190a45050565b60005a6040805161010080820183526101945460ff808216845291810464ffffffffff166020808501919091526601000000000000820463ffffffff908116858701526a0100000000000000000000830481166060860152600160701b830481166080860152600160901b8304811660a0860152600160b01b83041660c0850152600160d01b90910462ffffff1660e0840152336000908152610262825293909320549394509092918c01359116610d895760405162461bcd60e51b815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610616565b61025f548b3514610ddc5760405162461bcd60e51b815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610616565b610dea8a8a8a8a8a8a612619565b8151610df7906001613cc9565b60ff168714610e485760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610616565b868514610e975760405162461bcd60e51b815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610616565b60008a8a604051610ea9929190613cee565b604051908190038120610ec0918e90602001613cfe565b60408051601f19818403018152828252805160209182012083830190925260008084529083018190529092509060005b8a8110156110675760006001858a8460208110610f0f57610f0f613bbf565b610f1c91901a601b613cc9565b8f8f86818110610f2e57610f2e613bbf565b905060200201358e8e87818110610f4757610f47613bbf565b9050602002013560405160008152602001604052604051610f84949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610fa6573d6000803e3d6000fd5b505060408051601f198101516001600160a01b0381166000908152610263602090815290849020838501909452925460ff80821615158085526101009092041693830193909352909550925090506110405760405162461bcd60e51b815260206004820152600f60248201527f7369676e6174757265206572726f7200000000000000000000000000000000006044820152606401610616565b826020015160080260ff166001901b8401935050808061105f90613cb0565b915050610ef0565b5081827e0101010101010101010101010101010101010101010101010101010101010116146110d85760405162461bcd60e51b815260206004820152601060248201527f6475706c6963617465207369676e6572000000000000000000000000000000006044820152606401610616565b50600091506111279050838d836020020135848e8e8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506126ad92505050565b9050611135838286336129ae565b505050505050505050505050565b610335546001600160a01b03163381146111815760405163292f4fb560e01b81523360048201526001600160a01b0382166024820152604401610616565b81516040516111939190602001613d1a565b60408051601f198184030181529190528051602090910120610337555050565b6000546201000090046001600160a01b03166001600160a01b0316336001600160a01b03161480611256575061026c54604051630d629b5f60e31b81526001600160a01b0390911690636b14daf8906112159033906000903690600401613c70565b602060405180830381865afa158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190613c93565b6112a25760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610616565b60006112ac612ac5565b9050600061019360009054906101000a90046001600160a01b03166001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113289190613d36565b90508181101561137a5760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610616565b610193546001600160a01b031663f99b1d68856113a061139a8686613d4f565b87612c97565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044015b600060405180830381600087803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b5050505050505050565b60008061019360009054906101000a90046001600160a01b03166001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114989190613d36565b905060006114a4612ac5565b90506114b08183613d66565b9250505090565b600054600290610100900460ff161580156114d9575060005460ff8083169116105b61154b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610616565b6000805461ffff191660ff83161761010017905561156a878785612cb1565b6115748585612d27565b610400805460ff19168315151790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050565b6115d56125b7565b601f8911156116265760405162461bcd60e51b815260206004820152601060248201527f746f6f206d616e79206f7261636c6573000000000000000000000000000000006044820152606401610616565b8887146116755760405162461bcd60e51b815260206004820152601660248201527f6f7261636c65206c656e677468206d69736d61746368000000000000000000006044820152606401610616565b88611681876003613dda565b60ff16106116d15760405162461bcd60e51b815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610616565b6116dd8660ff16612dba565b6040805160e060208c02808301820190935260c082018c815260009383928f918f918291908601908490808284376000920191909152505050908252506040805160208c810282810182019093528c82529283019290918d918d91829185019084908082843760009201919091525050509082525060ff891660208083019190915260408051601f8a01839004830281018301825289815292019190899089908190840183828082843760009201919091525050509082525067ffffffffffffffff861660208083019190915260408051601f870183900483028101830182528681529201919086908690819084018382808284376000920191909152505050915250610194805465ffffffffff001916905590506117fa611f40565b6102645460005b818110156118b0576000610264828154811061181f5761181f613bbf565b600091825260208220015461026580546001600160a01b039092169350908490811061184d5761184d613bbf565b60009182526020808320909101546001600160a01b03948516835261026382526040808420805461ffff191690559416825261026290529190912080546dffffffffffffffffffffffffffff1916905550806118a881613cb0565b915050611801565b506118be610264600061330f565b6118cb610265600061330f565b60005b825151811015611b4d576102636000846000015183815181106118f3576118f3613bbf565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156119675760405162461bcd60e51b815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610616565b604080518082019091526001815260ff8216602082015283518051610263916000918590811061199957611999613bbf565b6020908102919091018101516001600160a01b03168252818101929092526040016000908120835181549484015161ffff1990951690151561ff0019161761010060ff9095169490940293909317909255840151805161026292919084908110611a0557611a05613bbf565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615611a795760405162461bcd60e51b815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610616565b60405180606001604052806001151581526020018260ff16815260200160006001600160601b0316815250610262600085602001518481518110611abf57611abf613bbf565b6020908102919091018101516001600160a01b03168252818101929092526040908101600020835181549385015194909201516001600160601b031662010000026dffffffffffffffffffffffff00001960ff959095166101000261ff00199315159390931661ffff1990941693909317919091179290921617905580611b4581613cb0565b9150506118ce565b5081518051611b65916102649160209091019061332d565b506020808301518051611b7d9261026592019061332d565b506040820151610194805460ff191660ff90921691909117905561025d805467ffffffff0000000019811664010000000063ffffffff43811682029283179094558204831692600092611bd7929082169116176001613e03565b90508061025d60006101000a81548163ffffffff021916908363ffffffff1602179055506000611c2c46308463ffffffff16886000015189602001518a604001518b606001518c608001518d60a00151612e0a565b90508061025f600001819055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05838284886000015189602001518a604001518b606001518c608001518d60a00151604051611c9099989796959493929190613e6f565b60405180910390a1610194546601000000000000900463ffffffff1660005b865151811015611d0a578161026682601f8110611cce57611cce613bbf565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508080611d0290613cb0565b915050611caf565b50611d158b8b612e97565b50505050505050505050505050505050565b6001600160a01b0381166000908152610262602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b03169181019190915290611d8a5750600092915050565b610266816020015160ff16601f8110611da557611da5613bbf565b60088104919091015461019454611ddc926007166004026101000a90910463ffffffff908116916601000000000000900416613beb565b9392505050565b6001600160a01b03828116600090815261026a6020526040902054163314611e4d5760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792063757272656e742070617965652063616e207570646174650000006044820152606401610616565b6001600160a01b0381163303611ea55760405162461bcd60e51b815260206004820152601760248201527f63616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610616565b6001600160a01b03808316600090815261026b6020526040902080548383166001600160a01b031982168117909255909116908114611f19576040516001600160a01b038084169133918616907f84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e3836790600090a45b505050565b611f266125b7565b61041881612ea5565b611f376125b7565b61041881612f55565b6101925461019454604080516103e08101918290526001600160a01b0390931692660100000000000090920463ffffffff169160009161026690601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611f8157905050505050509050600061026580548060200260200160405190810160405280929190818152602001828054801561201d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fff575b5050505050905060008151905060008167ffffffffffffffff8111156120455761204561371b565b60405190808252806020026020018201604052801561206e578160200160208202803683370190505b50905060008267ffffffffffffffff81111561208c5761208c61371b565b6040519080825280602002602001820160405280156120b5578160200160208202803683370190505b50905060005b8381101561232157600061026260008784815181106120dc576120dc613bbf565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160029054906101000a90046001600160601b03166001600160601b031690506000610262600088858151811061213f5761213f613bbf565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160026101000a8154816001600160601b0302191690836001600160601b0316021790555060008783601f81106121a2576121a2613bbf565b602002015161019454908a0363ffffffff9081169250600160901b909104168102633b9aca00028201801561231657600061026a60008a87815181106121ea576121ea613bbf565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031690508087868151811061223b5761223b613bbf565b60200260200101906001600160a01b031690816001600160a01b0316815250508186868151811061226e5761226e613bbf565b6020026020010181815250508a8a86601f811061228d5761228d613bbf565b602002019063ffffffff16908163ffffffff16815250508b6001600160a01b0316816001600160a01b03168a87815181106122ca576122ca613bbf565b60200260200101516001600160a01b03167fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c8560405161230c91815260200190565b60405180910390a4505b5050506001016120bb565b5061233061026686601f613392565b508051156123b757610193546040517f73433a2f0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906373433a2f906123849085908590600401613f05565b600060405180830381600087803b15801561239e57600080fd5b505af11580156123b2573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b038116600090815261026260209081526040918290208251606081018452905460ff80821615158084526101008304909116938301939093526201000090046001600160601b03169281019290925261241e575050565b6000612429836104d0565b90508015611f19576001600160a01b03838116600090815261026a60209081526040909120546101945491850151921691660100000000000090910463ffffffff16906102669060ff16601f811061248357612483613bbf565b60088104909101805463ffffffff9384166004600790941684026101000a90810294021916929092179091556001600160a01b03808616600090815261026260205260409081902080546dffffffffffffffffffffffff0000191690556101935490517ff99b1d6800000000000000000000000000000000000000000000000000000000815291169163f99b1d68916125349185918791016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b5050610192546040518581526001600160a01b0391821693508482169250908716907fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c9060200160405180910390a450505050565b6000546201000090046001600160a01b031633146126175760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610616565b565b6000612626826020613c10565b612631856020613c10565b61263d88610144613c2f565b6126479190613c2f565b6126519190613c2f565b61265c906000613c2f565b90503681146123b75760405162461bcd60e51b815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610616565b600080828060200190518101906126c49190614152565b64ffffffffff851660208801526040870180519192506126e382614327565b63ffffffff1663ffffffff16815250508561019460008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160066101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600a6101000a81548163ffffffff021916908363ffffffff160217905550608082015181600001600e6101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160000160126101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160000160166101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600001601a6101000a81548162ffffff021916908362ffffff1602179055509050506000816040015167ffffffffffffffff16409050808260600151146128a157606082015160408084015190517faed0afe500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905267ffffffffffffffff166044820152606401610616565b6101935482516020840151604080860151606087015191517f098ace260000000000000000000000000000000000000000000000000000000081526000956001600160a01b03169463098ace26946129029491939092909190600401614433565b6000604051808303816000875af1158015612921573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129499190810190614528565b90508564ffffffffff16886040015163ffffffff167fe0c90b8e55243fcba0f8b68b201983b97f7a3d5aebd6dfa1a4082a07925cc7443386602001518b8660405161299794939291906145f1565b60405180910390a350506020015195945050505050565b60006129d5633b9aca003a04866080015163ffffffff16876060015163ffffffff16612fcd565b90506010360260005a905060006129fe8663ffffffff1685858b60e0015162ffffff1686612ff3565b90506000670de0b6b3a76400006001600160c01b03891683026001600160a01b0388166000908152610262602052604090205460c08c01519290910492506201000090046001600160601b039081169163ffffffff16633b9aca000282840101908116821115612a745750505050505050612abf565b6001600160a01b03881660009081526102626020526040902080546001600160601b0390921662010000026dffffffffffffffffffffffff0000199092169190911790555050505050505b50505050565b600080610265805480602002602001604051908101604052809291908181526020018280548015612b1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612b01575b5050835161019454604080516103e08101918290529697509195660100000000000090910463ffffffff16945060009350915061026690601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411612b5d5790505050505050905060005b83811015612bf0578181601f8110612bbd57612bbd613bbf565b6020020151612bcc9084613beb565b612bdc9063ffffffff1687613c2f565b955080612be881613cb0565b915050612ba3565b5061019454612c1090600160901b900463ffffffff16633b9aca00613c10565b612c1a9086613c10565b945060005b83811015612c8f576102626000868381518110612c3e57612c3e613bbf565b6020908102919091018101516001600160a01b0316825281019190915260400160002054612c7b906201000090046001600160601b031687613c2f565b955080612c8781613cb0565b915050612c1f565b505050505090565b600081831015612ca8575081612cab565b50805b92915050565b600054610100900460ff16612d1c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610616565b611f19838383613057565b600054610100900460ff16612d925760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610616565b61033580546001600160a01b0319166001600160a01b03939093169290921790915561033655565b806000106104185760405162461bcd60e51b815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610616565b6000808a8a8a8a8a8a8a8a8a604051602001612e2e99989796959493929190614679565b60408051601f1981840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b612ea182826130fd565b5050565b336001600160a01b03821603612efd5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610616565b600180546001600160a01b0319166001600160a01b038381169182179092556000805460405192936201000090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b61026c546001600160a01b039081169082168114612ea15761026c80546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527f793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d48912910160405180910390a15050565b60008383811015612fe057600285850304015b612fea8184612c97565b95945050505050565b6000818610156130455760405162461bcd60e51b815260206004820181905260248201527f6c6566744761732063616e6e6f742065786365656420696e697469616c4761736044820152606401610616565b50633b9aca0094039190910101020290565b600054610100900460ff166130c25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610616565b61019280546001600160a01b038086166001600160a01b031992831617909255610193805492851692909116919091179055611f1981613198565b61010081811461313f578282826040517fb93aa5de00000000000000000000000000000000000000000000000000000000815260040161061693929190614701565b600061314d83850185614725565b610193546040517f8eef585f0000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690638eef585f906113e59084906004016147ad565b600054610100900460ff166132035760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610616565b6104188160008054610100900460ff166132735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610616565b6001600160a01b0382166132c95760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f00000000000000006044820152606401610616565b600080546001600160a01b03808516620100000275ffffffffffffffffffffffffffffffffffffffff00001990921691909117909155811615612ea157612ea181612ea5565b50805460008255906000526020600020908101906104189190613425565b828054828255906000526020600020908101928215613382579160200282015b8281111561338257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061334d565b5061338e929150613425565b5090565b6004830191839082156133825791602002820160005b838211156133ec57835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026133a8565b801561341c5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026133ec565b505061338e9291505b5b8082111561338e5760008155600101613426565b6001600160a01b038116811461041857600080fd5b60006020828403121561346157600080fd5b8135611ddc8161343a565b60005b8381101561348757818101518382015260200161346f565b83811115612abf5750506000910152565b600081518084526134b081602086016020860161346c565b601f01601f19169290920160200192915050565b602081526000611ddc6020830184613498565b803563ffffffff811681146134eb57600080fd5b919050565b62ffffff8116811461041857600080fd5b600080600080600060a0868803121561351957600080fd5b613522866134d7565b9450613530602087016134d7565b935061353e604087016134d7565b925061354c606087016134d7565b9150608086013561355c816134f0565b809150509295509295909350565b60008083601f84011261357c57600080fd5b50813567ffffffffffffffff81111561359457600080fd5b6020830191508360208260051b85010111156135af57600080fd5b9250929050565b600080600080604085870312156135cc57600080fd5b843567ffffffffffffffff808211156135e457600080fd5b6135f08883890161356a565b9096509450602087013591508082111561360957600080fd5b506136168782880161356a565b95989497509550505050565b60008083601f84011261363457600080fd5b50813567ffffffffffffffff81111561364c57600080fd5b6020830191508360208285010111156135af57600080fd5b60008060008060008060008060e0898b03121561368057600080fd5b606089018a81111561369157600080fd5b8998503567ffffffffffffffff808211156136ab57600080fd5b6136b78c838d01613622565b909950975060808b01359150808211156136d057600080fd5b6136dc8c838d0161356a565b909750955060a08b01359150808211156136f557600080fd5b506137028b828c0161356a565b999c989b50969995989497949560c00135949350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156137545761375461371b565b60405290565b60405160c0810167ffffffffffffffff811182821017156137545761375461371b565b6040516080810167ffffffffffffffff811182821017156137545761375461371b565b6040516020810167ffffffffffffffff811182821017156137545761375461371b565b604051601f8201601f1916810167ffffffffffffffff811182821017156137ec576137ec61371b565b604052919050565b600067ffffffffffffffff82111561380e5761380e61371b565b50601f01601f191660200190565b600067ffffffffffffffff8211156138365761383661371b565b5060051b60200190565b600082601f83011261385157600080fd5b813560206138666138618361381c565b6137c3565b82815260059290921b8401810191818101908684111561388557600080fd5b8286015b848110156138a05780358352918301918301613889565b509695505050505050565b600060208083850312156138be57600080fd5b823567ffffffffffffffff808211156138d657600080fd5b90840190604082870312156138ea57600080fd5b6138f2613731565b82358281111561390157600080fd5b8301601f8101881361391257600080fd5b8035613920613861826137f4565b818152898783850101111561393457600080fd5b81878401888301376000878383010152808452505050838301358281111561395b57600080fd5b61396788828601613840565b948201949094529695505050505050565b6000806040838503121561398b57600080fd5b82356139968161343a565b946020939093013593505050565b6000602082840312156139b657600080fd5b813567ffffffffffffffff8111156139cd57600080fd5b820160808185031215611ddc57600080fd5b801515811461041857600080fd5b60008060008060008060c08789031215613a0657600080fd5b8635613a118161343a565b95506020870135613a218161343a565b94506040870135613a318161343a565b9350606087013592506080870135613a488161343a565b915060a0870135613a58816139df565b809150509295509295509295565b803560ff811681146134eb57600080fd5b67ffffffffffffffff8116811461041857600080fd5b80356134eb81613a77565b60008060008060008060008060008060c08b8d031215613ab757600080fd5b8a3567ffffffffffffffff80821115613acf57600080fd5b613adb8e838f0161356a565b909c509a5060208d0135915080821115613af457600080fd5b613b008e838f0161356a565b909a509850889150613b1460408e01613a66565b975060608d0135915080821115613b2a57600080fd5b613b368e838f01613622565b9097509550859150613b4a60808e01613a8d565b945060a08d0135915080821115613b6057600080fd5b50613b6d8d828e01613622565b915080935050809150509295989b9194979a5092959850565b60008060408385031215613b9957600080fd5b8235613ba48161343a565b91506020830135613bb48161343a565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015613c0857613c08613bd5565b039392505050565b6000816000190483118215151615613c2a57613c2a613bd5565b500290565b60008219821115613c4257613c42613bd5565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201526000612fea604083018486613c47565b600060208284031215613ca557600080fd5b8151611ddc816139df565b600060018201613cc257613cc2613bd5565b5060010190565b600060ff821660ff84168060ff03821115613ce657613ce6613bd5565b019392505050565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60008251613d2c81846020870161346c565b9190910192915050565b600060208284031215613d4857600080fd5b5051919050565b600082821015613d6157613d61613bd5565b500390565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613da057613da0613bd5565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613dd457613dd4613bd5565b50500390565b600060ff821660ff84168160ff0481118215151615613dfb57613dfb613bd5565b029392505050565b600063ffffffff808316818516808303821115613e2257613e22613bd5565b01949350505050565b600081518084526020808501945080840160005b83811015613e645781516001600160a01b031687529582019590820190600101613e3f565b509495945050505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152613e9f8184018a613e2b565b90508281036080840152613eb38189613e2b565b905060ff871660a084015282810360c0840152613ed08187613498565b905067ffffffffffffffff851660e0840152828103610100840152613ef58185613498565b9c9b505050505050505050505050565b604081526000613f186040830185613e2b565b82810360208481019190915284518083528582019282019060005b81811015613f4f57845183529383019391830191600101613f33565b5090979650505050505050565b80516134eb81613a77565b805161ffff811681146134eb57600080fd5b80516134eb8161343a565b600082601f830112613f9557600080fd5b8151613fa3613861826137f4565b818152846020838601011115613fb857600080fd5b6105d482602083016020870161346c565b80516001600160601b03811681146134eb57600080fd5b600082601f830112613ff157600080fd5b815160206140016138618361381c565b82815260059290921b8401810191818101908684111561402057600080fd5b8286015b848110156138a057805167ffffffffffffffff8082111561404457600080fd5b90880190601f196040838c038201121561405d57600080fd5b614065613731565b878401518381111561407657600080fd5b840160c0818e038401121561408a57600080fd5b61409261375a565b92508881015165ffffffffffff811681146140ac57600080fd5b83526140ba60408201613f67565b898401526140ca60608201613f79565b60408401526080810151848111156140e157600080fd5b6140ef8e8b83850101613f84565b60608501525061410160a08201613f5c565b608084015261411260c08201613fc9565b60a08401525081815261412760408501613fc9565b818901528652505050918301918301614024565b80516001600160c01b03811681146134eb57600080fd5b60006020828403121561416457600080fd5b815167ffffffffffffffff8082111561417c57600080fd5b908301906080828603121561419057600080fd5b61419861377d565b8251828111156141a757600080fd5b8301601f810187136141b857600080fd5b80516141c66138618261381c565b8082825260208201915060208360051b8501019250898311156141e857600080fd5b602084015b838110156142e85780518781111561420457600080fd5b850160a0818d03601f1901121561421a57600080fd5b61422261377d565b602082015161423081613a77565b81526040820151614240816134f0565b60208201526040828e03605f1901121561425957600080fd5b6142616137a0565b8d607f84011261427057600080fd5b614278613731565b808f60a08601111561428957600080fd5b606085015b60a086018110156142a957805183526020928301920161428e565b50825250604082015260a0820151898111156142c457600080fd5b6142d38e602083860101613fe0565b606083015250845250602092830192016141ed565b508452506142fb9150506020840161413b565b602082015261430c60408401613f5c565b60408201526060830151606082015280935050505092915050565b600063ffffffff80831681810361434057614340613bd5565b6001019392505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561442657828403895281516040815181875265ffffffffffff8151168288015287810151606061ffff8216818a0152838301519350608091506001600160a01b038416828a01528083015193505060c060a081818b01526143d16101008b0186613498565b9284015167ffffffffffffffff16918a0191909152909101516001600160601b031660e088015291870151919050614413878701836001600160601b03169052565b9986019994505090840190600101614368565b5091979650505050505050565b6000608080830181845280885180835260a092508286019150828160051b8701016020808c016000805b858110156144e3578a8503609f190187528251805167ffffffffffffffff1686528481015162ffffff16858701526040808201515190849088015b60028210156144b7578251815291870191600191909101908701614498565b50505060600151858a018990526144d0868a018261434a565b978501979550509183019160010161445d565b5050508196506144fd8189018c6001600160c01b03169052565b505050505050614519604083018567ffffffffffffffff169052565b82606083015295945050505050565b6000602080838503121561453b57600080fd5b825167ffffffffffffffff81111561455257600080fd5b8301601f8101851361456357600080fd5b80516145716138618261381c565b81815260069190911b8201830190838101908783111561459057600080fd5b928401925b828410156145e657604084890312156145ae5760008081fd5b6145b6613731565b84516145c181613a77565b8152848601516145d0816134f0565b8187015282526040939093019290840190614595565b979650505050505050565b6000608082016001600160a01b038716835260206001600160c01b03871681850152604086818601526080606086015282865180855260a087019150838801945060005b81811015614669578551805167ffffffffffffffff16845285015162ffffff16858401529484019491830191600101614635565b50909a9950505050505050505050565b60006101208b83526001600160a01b038b16602084015267ffffffffffffffff808b1660408501528160608501526146b38285018b613e2b565b915083820360808501526146c7828a613e2b565b915060ff881660a085015283820360c08501526146e48288613498565b90861660e08501528381036101008501529050613ef58185613498565b604081526000614715604083018587613c47565b9050826020830152949350505050565b600061010080838503121561473957600080fd5b83601f84011261474857600080fd5b60405181810181811067ffffffffffffffff8211171561476a5761476a61371b565b60405290830190808583111561477f57600080fd5b845b838110156147a2578035614794816134f0565b825260209182019101614781565b509095945050505050565b6101008101818360005b60088110156147db57815162ffffff168352602092830192909101906001016147b7565b5050509291505056fea2646970667358221220d4ffb1d40ea39397316bf9d7c077a68831dd5a0077e6bdf8adfa8872d5cbb4f864736f6c634300080f0033",
}

var TestVRFBeaconV2ABI = TestVRFBeaconV2MetaData.ABI

var TestVRFBeaconV2Bin = TestVRFBeaconV2MetaData.Bin

func DeployTestVRFBeaconV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TestVRFBeaconV2, error) {
	parsed, err := TestVRFBeaconV2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestVRFBeaconV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestVRFBeaconV2{TestVRFBeaconV2Caller: TestVRFBeaconV2Caller{contract: contract}, TestVRFBeaconV2Transactor: TestVRFBeaconV2Transactor{contract: contract}, TestVRFBeaconV2Filterer: TestVRFBeaconV2Filterer{contract: contract}}, nil
}

type TestVRFBeaconV2 struct {
	address common.Address
	abi     abi.ABI
	TestVRFBeaconV2Caller
	TestVRFBeaconV2Transactor
	TestVRFBeaconV2Filterer
}

type TestVRFBeaconV2Caller struct {
	contract *bind.BoundContract
}

type TestVRFBeaconV2Transactor struct {
	contract *bind.BoundContract
}

type TestVRFBeaconV2Filterer struct {
	contract *bind.BoundContract
}

type TestVRFBeaconV2Session struct {
	Contract     *TestVRFBeaconV2
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type TestVRFBeaconV2CallerSession struct {
	Contract *TestVRFBeaconV2Caller
	CallOpts bind.CallOpts
}

type TestVRFBeaconV2TransactorSession struct {
	Contract     *TestVRFBeaconV2Transactor
	TransactOpts bind.TransactOpts
}

type TestVRFBeaconV2Raw struct {
	Contract *TestVRFBeaconV2
}

type TestVRFBeaconV2CallerRaw struct {
	Contract *TestVRFBeaconV2Caller
}

type TestVRFBeaconV2TransactorRaw struct {
	Contract *TestVRFBeaconV2Transactor
}

func NewTestVRFBeaconV2(address common.Address, backend bind.ContractBackend) (*TestVRFBeaconV2, error) {
	abi, err := abi.JSON(strings.NewReader(TestVRFBeaconV2ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindTestVRFBeaconV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2{address: address, abi: abi, TestVRFBeaconV2Caller: TestVRFBeaconV2Caller{contract: contract}, TestVRFBeaconV2Transactor: TestVRFBeaconV2Transactor{contract: contract}, TestVRFBeaconV2Filterer: TestVRFBeaconV2Filterer{contract: contract}}, nil
}

func NewTestVRFBeaconV2Caller(address common.Address, caller bind.ContractCaller) (*TestVRFBeaconV2Caller, error) {
	contract, err := bindTestVRFBeaconV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2Caller{contract: contract}, nil
}

func NewTestVRFBeaconV2Transactor(address common.Address, transactor bind.ContractTransactor) (*TestVRFBeaconV2Transactor, error) {
	contract, err := bindTestVRFBeaconV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2Transactor{contract: contract}, nil
}

func NewTestVRFBeaconV2Filterer(address common.Address, filterer bind.ContractFilterer) (*TestVRFBeaconV2Filterer, error) {
	contract, err := bindTestVRFBeaconV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2Filterer{contract: contract}, nil
}

func bindTestVRFBeaconV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestVRFBeaconV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFBeaconV2.Contract.TestVRFBeaconV2Caller.contract.Call(opts, result, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TestVRFBeaconV2Transactor.contract.Transfer(opts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TestVRFBeaconV2Transactor.contract.Transact(opts, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFBeaconV2.Contract.contract.Call(opts, result, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.contract.Transfer(opts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.contract.Transact(opts, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFBeaconV2.Contract.NUMCONFDELAYS(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFBeaconV2.Contract.NUMCONFDELAYS(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) AllowOnchainVerification(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "_allowOnchainVerification")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) AllowOnchainVerification() (bool, error) {
	return _TestVRFBeaconV2.Contract.AllowOnchainVerification(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) AllowOnchainVerification() (bool, error) {
	return _TestVRFBeaconV2.Contract.AllowOnchainVerification(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) GetBilling(opts *bind.CallOpts) (GetBilling,

	error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "getBilling")

	outstruct := new(GetBilling)
	if err != nil {
		return *outstruct, err
	}

	outstruct.MaximumGasPriceGwei = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.ReasonableGasPriceGwei = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ObservationPaymentGjuels = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.TransmissionPaymentGjuels = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.AccountingGas = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) GetBilling() (GetBilling,

	error) {
	return _TestVRFBeaconV2.Contract.GetBilling(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) GetBilling() (GetBilling,

	error) {
	return _TestVRFBeaconV2.Contract.GetBilling(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) GetBillingAccessController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "getBillingAccessController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) GetBillingAccessController() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.GetBillingAccessController(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) GetBillingAccessController() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.GetBillingAccessController(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDetails(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDetails(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDigestAndEpoch(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDigestAndEpoch(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "linkAvailableForPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) LinkAvailableForPayment() (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.LinkAvailableForPayment(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) LinkAvailableForPayment() (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.LinkAvailableForPayment(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) OracleObservationCount(opts *bind.CallOpts, transmitterAddress common.Address) (uint32, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "oracleObservationCount", transmitterAddress)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) OracleObservationCount(transmitterAddress common.Address) (uint32, error) {
	return _TestVRFBeaconV2.Contract.OracleObservationCount(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) OracleObservationCount(transmitterAddress common.Address) (uint32, error) {
	return _TestVRFBeaconV2.Contract.OracleObservationCount(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) OwedPayment(opts *bind.CallOpts, transmitterAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "owedPayment", transmitterAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) OwedPayment(transmitterAddress common.Address) (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.OwedPayment(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) OwedPayment(transmitterAddress common.Address) (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.OwedPayment(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) Owner() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.Owner(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) Owner() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.Owner(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) SKeyID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "s_keyID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SKeyID() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SKeyID(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) SKeyID() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SKeyID(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "s_provingKeyHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SProvingKeyHash() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SProvingKeyHash(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) SProvingKeyHash() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SProvingKeyHash(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) TypeAndVersion() (string, error) {
	return _TestVRFBeaconV2.Contract.TypeAndVersion(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) TypeAndVersion() (string, error) {
	return _TestVRFBeaconV2.Contract.TypeAndVersion(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "acceptOwnership")
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) AcceptOwnership() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.AcceptOwnership(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.AcceptOwnership(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) AcceptPayeeship(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "acceptPayeeship", transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) AcceptPayeeship(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.AcceptPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) AcceptPayeeship(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.AcceptPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "exposeType", arg0)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.ExposeType(&_TestVRFBeaconV2.TransactOpts, arg0)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.ExposeType(&_TestVRFBeaconV2.TransactOpts, arg0)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) Initialize(opts *bind.TransactOpts, link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, owner common.Address, allowOnchainVerification bool) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "initialize", link, coordinator, keyProvider, keyID, owner, allowOnchainVerification)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) Initialize(link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, owner common.Address, allowOnchainVerification bool) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Initialize(&_TestVRFBeaconV2.TransactOpts, link, coordinator, keyProvider, keyID, owner, allowOnchainVerification)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) Initialize(link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, owner common.Address, allowOnchainVerification bool) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Initialize(&_TestVRFBeaconV2.TransactOpts, link, coordinator, keyProvider, keyID, owner, allowOnchainVerification)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "keyGenerated", kd)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.KeyGenerated(&_TestVRFBeaconV2.TransactOpts, kd)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.KeyGenerated(&_TestVRFBeaconV2.TransactOpts, kd)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "newKeyRequested")
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) NewKeyRequested() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.NewKeyRequested(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) NewKeyRequested() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.NewKeyRequested(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetBilling(opts *bind.TransactOpts, maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setBilling", maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetBilling(maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBilling(&_TestVRFBeaconV2.TransactOpts, maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetBilling(maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBilling(&_TestVRFBeaconV2.TransactOpts, maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetBillingAccessController(opts *bind.TransactOpts, _billingAccessController common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setBillingAccessController", _billingAccessController)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetBillingAccessController(_billingAccessController common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBillingAccessController(&_TestVRFBeaconV2.TransactOpts, _billingAccessController)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetBillingAccessController(_billingAccessController common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBillingAccessController(&_TestVRFBeaconV2.TransactOpts, _billingAccessController)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setConfig", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetConfig(&_TestVRFBeaconV2.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetConfig(&_TestVRFBeaconV2.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetPayees(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setPayees", transmitters, payees)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetPayees(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetPayees(&_TestVRFBeaconV2.TransactOpts, transmitters, payees)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetPayees(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetPayees(&_TestVRFBeaconV2.TransactOpts, transmitters, payees)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "transferOwnership", to)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferOwnership(&_TestVRFBeaconV2.TransactOpts, to)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferOwnership(&_TestVRFBeaconV2.TransactOpts, to)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) TransferPayeeship(opts *bind.TransactOpts, transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "transferPayeeship", transmitter, proposed)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) TransferPayeeship(transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter, proposed)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) TransferPayeeship(transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter, proposed)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Transmit(&_TestVRFBeaconV2.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Transmit(&_TestVRFBeaconV2.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) WithdrawFunds(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "withdrawFunds", recipient, amount)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawFunds(&_TestVRFBeaconV2.TransactOpts, recipient, amount)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawFunds(&_TestVRFBeaconV2.TransactOpts, recipient, amount)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) WithdrawPayment(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "withdrawPayment", transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) WithdrawPayment(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawPayment(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) WithdrawPayment(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawPayment(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

type TestVRFBeaconV2BillingAccessControllerSetIterator struct {
	Event *TestVRFBeaconV2BillingAccessControllerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2BillingAccessControllerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2BillingAccessControllerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2BillingAccessControllerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2BillingAccessControllerSetIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2BillingAccessControllerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2BillingAccessControllerSet struct {
	Old     common.Address
	Current common.Address
	Raw     types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterBillingAccessControllerSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingAccessControllerSetIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "BillingAccessControllerSet")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2BillingAccessControllerSetIterator{contract: _TestVRFBeaconV2.contract, event: "BillingAccessControllerSet", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchBillingAccessControllerSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingAccessControllerSet) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "BillingAccessControllerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2BillingAccessControllerSet)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingAccessControllerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseBillingAccessControllerSet(log types.Log) (*TestVRFBeaconV2BillingAccessControllerSet, error) {
	event := new(TestVRFBeaconV2BillingAccessControllerSet)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingAccessControllerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2BillingSetIterator struct {
	Event *TestVRFBeaconV2BillingSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2BillingSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2BillingSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2BillingSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2BillingSetIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2BillingSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2BillingSet struct {
	MaximumGasPriceGwei       uint32
	ReasonableGasPriceGwei    uint32
	ObservationPaymentGjuels  uint32
	TransmissionPaymentGjuels uint32
	AccountingGas             *big.Int
	Raw                       types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterBillingSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingSetIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "BillingSet")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2BillingSetIterator{contract: _TestVRFBeaconV2.contract, event: "BillingSet", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchBillingSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingSet) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "BillingSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2BillingSet)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseBillingSet(log types.Log) (*TestVRFBeaconV2BillingSet, error) {
	event := new(TestVRFBeaconV2BillingSet)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2ConfigSetIterator struct {
	Event *TestVRFBeaconV2ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2ConfigSetIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2ConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterConfigSet(opts *bind.FilterOpts) (*TestVRFBeaconV2ConfigSetIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2ConfigSetIterator{contract: _TestVRFBeaconV2.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2ConfigSet) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2ConfigSet)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseConfigSet(log types.Log) (*TestVRFBeaconV2ConfigSet, error) {
	event := new(TestVRFBeaconV2ConfigSet)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2InitializedIterator struct {
	Event *TestVRFBeaconV2Initialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2InitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2Initialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2Initialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2InitializedIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2InitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2Initialized struct {
	Version uint8
	Raw     types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterInitialized(opts *bind.FilterOpts) (*TestVRFBeaconV2InitializedIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2InitializedIterator{contract: _TestVRFBeaconV2.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2Initialized) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2Initialized)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseInitialized(log types.Log) (*TestVRFBeaconV2Initialized, error) {
	event := new(TestVRFBeaconV2Initialized)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2NewTransmissionIterator struct {
	Event *TestVRFBeaconV2NewTransmission

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2NewTransmissionIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2NewTransmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2NewTransmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2NewTransmissionIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2NewTransmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2NewTransmission struct {
	AggregatorRoundId uint32
	EpochAndRound     *big.Int
	Transmitter       common.Address
	JuelsPerFeeCoin   *big.Int
	ConfigDigest      [32]byte
	OutputsServed     []VRFBeaconTypesOutputServed
	Raw               types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterNewTransmission(opts *bind.FilterOpts, aggregatorRoundId []uint32, epochAndRound []*big.Int) (*TestVRFBeaconV2NewTransmissionIterator, error) {

	var aggregatorRoundIdRule []interface{}
	for _, aggregatorRoundIdItem := range aggregatorRoundId {
		aggregatorRoundIdRule = append(aggregatorRoundIdRule, aggregatorRoundIdItem)
	}
	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "NewTransmission", aggregatorRoundIdRule, epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2NewTransmissionIterator{contract: _TestVRFBeaconV2.contract, event: "NewTransmission", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2NewTransmission, aggregatorRoundId []uint32, epochAndRound []*big.Int) (event.Subscription, error) {

	var aggregatorRoundIdRule []interface{}
	for _, aggregatorRoundIdItem := range aggregatorRoundId {
		aggregatorRoundIdRule = append(aggregatorRoundIdRule, aggregatorRoundIdItem)
	}
	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "NewTransmission", aggregatorRoundIdRule, epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2NewTransmission)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "NewTransmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseNewTransmission(log types.Log) (*TestVRFBeaconV2NewTransmission, error) {
	event := new(TestVRFBeaconV2NewTransmission)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "NewTransmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2OraclePaidIterator struct {
	Event *TestVRFBeaconV2OraclePaid

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2OraclePaidIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2OraclePaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2OraclePaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2OraclePaidIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2OraclePaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2OraclePaid struct {
	Transmitter common.Address
	Payee       common.Address
	Amount      *big.Int
	LinkToken   common.Address
	Raw         types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterOraclePaid(opts *bind.FilterOpts, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (*TestVRFBeaconV2OraclePaidIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}

	var linkTokenRule []interface{}
	for _, linkTokenItem := range linkToken {
		linkTokenRule = append(linkTokenRule, linkTokenItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "OraclePaid", transmitterRule, payeeRule, linkTokenRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2OraclePaidIterator{contract: _TestVRFBeaconV2.contract, event: "OraclePaid", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchOraclePaid(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OraclePaid, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}

	var linkTokenRule []interface{}
	for _, linkTokenItem := range linkToken {
		linkTokenRule = append(linkTokenRule, linkTokenItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "OraclePaid", transmitterRule, payeeRule, linkTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2OraclePaid)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OraclePaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseOraclePaid(log types.Log) (*TestVRFBeaconV2OraclePaid, error) {
	event := new(TestVRFBeaconV2OraclePaid)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OraclePaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2OwnershipTransferRequestedIterator struct {
	Event *TestVRFBeaconV2OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFBeaconV2OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2OwnershipTransferRequestedIterator{contract: _TestVRFBeaconV2.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2OwnershipTransferRequested)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseOwnershipTransferRequested(log types.Log) (*TestVRFBeaconV2OwnershipTransferRequested, error) {
	event := new(TestVRFBeaconV2OwnershipTransferRequested)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2OwnershipTransferredIterator struct {
	Event *TestVRFBeaconV2OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFBeaconV2OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2OwnershipTransferredIterator{contract: _TestVRFBeaconV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2OwnershipTransferred)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseOwnershipTransferred(log types.Log) (*TestVRFBeaconV2OwnershipTransferred, error) {
	event := new(TestVRFBeaconV2OwnershipTransferred)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2PayeeshipTransferRequestedIterator struct {
	Event *TestVRFBeaconV2PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2PayeeshipTransferRequested struct {
	Transmitter common.Address
	Current     common.Address
	Proposed    common.Address
	Raw         types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterPayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, current []common.Address, proposed []common.Address) (*TestVRFBeaconV2PayeeshipTransferRequestedIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var proposedRule []interface{}
	for _, proposedItem := range proposed {
		proposedRule = append(proposedRule, proposedItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "PayeeshipTransferRequested", transmitterRule, currentRule, proposedRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2PayeeshipTransferRequestedIterator{contract: _TestVRFBeaconV2.contract, event: "PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchPayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferRequested, transmitter []common.Address, current []common.Address, proposed []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var proposedRule []interface{}
	for _, proposedItem := range proposed {
		proposedRule = append(proposedRule, proposedItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "PayeeshipTransferRequested", transmitterRule, currentRule, proposedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2PayeeshipTransferRequested)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParsePayeeshipTransferRequested(log types.Log) (*TestVRFBeaconV2PayeeshipTransferRequested, error) {
	event := new(TestVRFBeaconV2PayeeshipTransferRequested)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2PayeeshipTransferredIterator struct {
	Event *TestVRFBeaconV2PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2PayeeshipTransferred struct {
	Transmitter common.Address
	Previous    common.Address
	Current     common.Address
	Raw         types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterPayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, previous []common.Address, current []common.Address) (*TestVRFBeaconV2PayeeshipTransferredIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var previousRule []interface{}
	for _, previousItem := range previous {
		previousRule = append(previousRule, previousItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "PayeeshipTransferred", transmitterRule, previousRule, currentRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2PayeeshipTransferredIterator{contract: _TestVRFBeaconV2.contract, event: "PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchPayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferred, transmitter []common.Address, previous []common.Address, current []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var previousRule []interface{}
	for _, previousItem := range previous {
		previousRule = append(previousRule, previousItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "PayeeshipTransferred", transmitterRule, previousRule, currentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2PayeeshipTransferred)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParsePayeeshipTransferred(log types.Log) (*TestVRFBeaconV2PayeeshipTransferred, error) {
	event := new(TestVRFBeaconV2PayeeshipTransferred)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetBilling struct {
	MaximumGasPriceGwei       uint32
	ReasonableGasPriceGwei    uint32
	ObservationPaymentGjuels  uint32
	TransmissionPaymentGjuels uint32
	AccountingGas             *big.Int
}
type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _TestVRFBeaconV2.abi.Events["BillingAccessControllerSet"].ID:
		return _TestVRFBeaconV2.ParseBillingAccessControllerSet(log)
	case _TestVRFBeaconV2.abi.Events["BillingSet"].ID:
		return _TestVRFBeaconV2.ParseBillingSet(log)
	case _TestVRFBeaconV2.abi.Events["ConfigSet"].ID:
		return _TestVRFBeaconV2.ParseConfigSet(log)
	case _TestVRFBeaconV2.abi.Events["Initialized"].ID:
		return _TestVRFBeaconV2.ParseInitialized(log)
	case _TestVRFBeaconV2.abi.Events["NewTransmission"].ID:
		return _TestVRFBeaconV2.ParseNewTransmission(log)
	case _TestVRFBeaconV2.abi.Events["OraclePaid"].ID:
		return _TestVRFBeaconV2.ParseOraclePaid(log)
	case _TestVRFBeaconV2.abi.Events["OwnershipTransferRequested"].ID:
		return _TestVRFBeaconV2.ParseOwnershipTransferRequested(log)
	case _TestVRFBeaconV2.abi.Events["OwnershipTransferred"].ID:
		return _TestVRFBeaconV2.ParseOwnershipTransferred(log)
	case _TestVRFBeaconV2.abi.Events["PayeeshipTransferRequested"].ID:
		return _TestVRFBeaconV2.ParsePayeeshipTransferRequested(log)
	case _TestVRFBeaconV2.abi.Events["PayeeshipTransferred"].ID:
		return _TestVRFBeaconV2.ParsePayeeshipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (TestVRFBeaconV2BillingAccessControllerSet) Topic() common.Hash {
	return common.HexToHash("0x793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d48912")
}

func (TestVRFBeaconV2BillingSet) Topic() common.Hash {
	return common.HexToHash("0x0bf184bf1bba9699114bdceddaf338a1b364252c5e497cc01918dde92031713f")
}

func (TestVRFBeaconV2ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (TestVRFBeaconV2Initialized) Topic() common.Hash {
	return common.HexToHash("0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498")
}

func (TestVRFBeaconV2NewTransmission) Topic() common.Hash {
	return common.HexToHash("0xe0c90b8e55243fcba0f8b68b201983b97f7a3d5aebd6dfa1a4082a07925cc744")
}

func (TestVRFBeaconV2OraclePaid) Topic() common.Hash {
	return common.HexToHash("0xd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c")
}

func (TestVRFBeaconV2OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (TestVRFBeaconV2OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (TestVRFBeaconV2PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e38367")
}

func (TestVRFBeaconV2PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b3")
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2) Address() common.Address {
	return _TestVRFBeaconV2.address
}

type TestVRFBeaconV2Interface interface {
	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	AllowOnchainVerification(opts *bind.CallOpts) (bool, error)

	GetBilling(opts *bind.CallOpts) (GetBilling,

		error)

	GetBillingAccessController(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error)

	OracleObservationCount(opts *bind.CallOpts, transmitterAddress common.Address) (uint32, error)

	OwedPayment(opts *bind.CallOpts, transmitterAddress common.Address) (*big.Int, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SKeyID(opts *bind.CallOpts) ([32]byte, error)

	SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AcceptPayeeship(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error)

	ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, owner common.Address, allowOnchainVerification bool) (*types.Transaction, error)

	KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error)

	NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error)

	SetBilling(opts *bind.TransactOpts, maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error)

	SetBillingAccessController(opts *bind.TransactOpts, _billingAccessController common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	SetPayees(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	TransferPayeeship(opts *bind.TransactOpts, transmitter common.Address, proposed common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawFunds(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	WithdrawPayment(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error)

	FilterBillingAccessControllerSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingAccessControllerSetIterator, error)

	WatchBillingAccessControllerSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingAccessControllerSet) (event.Subscription, error)

	ParseBillingAccessControllerSet(log types.Log) (*TestVRFBeaconV2BillingAccessControllerSet, error)

	FilterBillingSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingSetIterator, error)

	WatchBillingSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingSet) (event.Subscription, error)

	ParseBillingSet(log types.Log) (*TestVRFBeaconV2BillingSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*TestVRFBeaconV2ConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2ConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*TestVRFBeaconV2ConfigSet, error)

	FilterInitialized(opts *bind.FilterOpts) (*TestVRFBeaconV2InitializedIterator, error)

	WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2Initialized) (event.Subscription, error)

	ParseInitialized(log types.Log) (*TestVRFBeaconV2Initialized, error)

	FilterNewTransmission(opts *bind.FilterOpts, aggregatorRoundId []uint32, epochAndRound []*big.Int) (*TestVRFBeaconV2NewTransmissionIterator, error)

	WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2NewTransmission, aggregatorRoundId []uint32, epochAndRound []*big.Int) (event.Subscription, error)

	ParseNewTransmission(log types.Log) (*TestVRFBeaconV2NewTransmission, error)

	FilterOraclePaid(opts *bind.FilterOpts, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (*TestVRFBeaconV2OraclePaidIterator, error)

	WatchOraclePaid(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OraclePaid, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (event.Subscription, error)

	ParseOraclePaid(log types.Log) (*TestVRFBeaconV2OraclePaid, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFBeaconV2OwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*TestVRFBeaconV2OwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFBeaconV2OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*TestVRFBeaconV2OwnershipTransferred, error)

	FilterPayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, current []common.Address, proposed []common.Address) (*TestVRFBeaconV2PayeeshipTransferRequestedIterator, error)

	WatchPayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferRequested, transmitter []common.Address, current []common.Address, proposed []common.Address) (event.Subscription, error)

	ParsePayeeshipTransferRequested(log types.Log) (*TestVRFBeaconV2PayeeshipTransferRequested, error)

	FilterPayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, previous []common.Address, current []common.Address) (*TestVRFBeaconV2PayeeshipTransferredIterator, error)

	WatchPayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferred, transmitter []common.Address, previous []common.Address, current []common.Address) (event.Subscription, error)

	ParsePayeeshipTransferred(log types.Log) (*TestVRFBeaconV2PayeeshipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
