// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package test_vrf_beacon_v2

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type KeyDataStructKeyData struct {
	PublicKey []byte
	Hashes    [][32]byte
}

type VRFBeaconReportReport struct {
	Outputs           []VRFBeaconTypesVRFOutput
	JuelsPerFeeCoin   *big.Int
	RecentBlockHeight uint64
	RecentBlockHash   [32]byte
}

type VRFBeaconTypesCallback struct {
	RequestID    *big.Int
	NumWords     uint16
	Requester    common.Address
	Arguments    []byte
	SubID        uint64
	GasAllowance *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesOutputServed struct {
	Height            uint64
	ConfirmationDelay *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var TestVRFBeaconV2MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"providedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"onchainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorWrong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyProvider\",\"type\":\"address\"}],\"name\":\"KeyInfoMustComeFromProvider\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expectedLength\",\"type\":\"uint256\"}],\"name\":\"OffchainConfigHasWrongLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"occVersion\",\"type\":\"uint64\"}],\"name\":\"UnknownConfigVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"BillingAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"BillingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"aggregatorRoundId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"epochAndRound\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"structVRFBeaconTypes.OutputServed[]\",\"name\":\"outputsServed\",\"type\":\"tuple[]\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contractLinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"OraclePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_allowOnchainVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"acceptPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"recentBlockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"recentBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structVRFBeaconReport.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"exposeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBilling\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBillingAccessController\",\"outputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"contractIVRFCoordinatorProducerAPI\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"contractDKG\",\"name\":\"keyProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyID\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowOnchainVerification\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structKeyDataStruct.KeyData\",\"name\":\"kd\",\"type\":\"tuple\"}],\"name\":\"keyGenerated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAvailableForPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newKeyRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"oracleObservationCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitterAddress\",\"type\":\"address\"}],\"name\":\"owedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_keyID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_provingKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPriceGwei\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"observationPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"transmissionPaymentGjuels\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"accountingGas\",\"type\":\"uint24\"}],\"name\":\"setBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"}],\"name\":\"setBillingAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"}],\"name\":\"setPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"transferPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614666806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063b121e147116100f9578063d09dc33911610097578063e4902f8211610071578063e4902f8214610460578063eb5dcd6c14610488578063f2fde38b1461049b578063fbffd2c1146104ae57600080fd5b8063d09dc3391461043c578063d57fc45a14610444578063e3d0e7121461044d57600080fd5b8063c1075329116100d3578063c1075329146103fe578063c278e5b714610411578063c4c92b3714610422578063cc31f7dd1461043357600080fd5b8063b121e147146103c5578063b1dc65a4146103d8578063bf2732c7146103eb57600080fd5b8063715018a6116101665780638da5cb5b116101405780638da5cb5b146103465780639c849b301461036b578063ac4cf1e71461037e578063afcb95d71461039b57600080fd5b8063715018a6146102fe57806381ff7048146103065780638ac28d5a1461033357600080fd5b80632f7527cc116101a25780632f7527cc146102b457806355e48749146102ce578063643dc105146102d857806367da3ab0146102eb57600080fd5b80630eafb25b146101c9578063181f5a77146101ef578063299372681461022e575b600080fd5b6101dc6101d73660046132ba565b6104c1565b6040519081526020015b60405180910390f35b604080518082018252601581527f565246426561636f6e20312e302e302d616c7068610000000000000000000000602082015290516101e6919061332f565b6102786067546a0100000000000000000000810463ffffffff90811692600160701b8304821692600160901b8104831692600160b01b82041691600160d01b90910462ffffff1690565b6040805163ffffffff9687168152948616602086015292851692840192909252909216606082015262ffffff909116608082015260a0016101e6565b6102bc600881565b60405160ff90911681526020016101e6565b6102d66105c9565b005b6102d66102e636600461336c565b610613565b6102d66102f93660046133e3565b610872565b6102d66109ad565b606854606a54604080516000815264010000000090930463ffffffff1660208401528201526060016101e6565b6102d66103413660046132ba565b6109c1565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016101e6565b6102d6610379366004613489565b610a33565b607b5461038b9060ff1681565b60405190151581526020016101e6565b606a54606c546040805160008152602081019390935263ffffffff909116908201526060016101e6565b6102d66103d33660046132ba565b610c11565b6102d66103e6366004613537565b610ced565b6102d66103f936600461377e565b61119d565b6102d661040c36600461384b565b61120b565b6102d661041f366004613877565b50565b6077546001600160a01b0316610353565b6101dc60795481565b6101dc61145a565b6101dc607a5481565b6102d661045b3660046138e4565b6114f3565b61047361046e3660046132ba565b611c39565b60405163ffffffff90911681526020016101e6565b6102d66104963660046139d2565b611cf2565b6102d66104a93660046132ba565b611e2b565b6102d66104bc3660046132ba565b611eb8565b6001600160a01b0381166000908152606d602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b031691810191909152906105235750600092915050565b6067546020820151600091600160901b900463ffffffff169060719060ff16601f811061055257610552613a0b565b600881049190910154606754610588926007166004026101000a90910463ffffffff908116916601000000000000900416613a37565b63ffffffff166105989190613a5c565b6105a690633b9aca00613a5c565b905081604001516001600160601b0316816105c19190613a7b565b949350505050565b6078546001600160a01b031633811461060b5760405163292f4fb560e01b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b506000607a55565b6077546001600160a01b03166106316033546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806106bd5750604051630d629b5f60e31b81526001600160a01b03821690636b14daf89061067c9033906000903690600401613abc565b602060405180830381865afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190613adf565b6107095760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610602565b610711611ec9565b606780547fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff166a010000000000000000000063ffffffff8981169182027fffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffff1692909217600160701b898416908102919091177fffffffffffff0000000000000000ffffffffffffffffffffffffffffffffffff16600160901b8985169081027fffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffff1691909117600160b01b948916948502177fffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d01b62ffffff89169081029190911790955560408051938452602084019290925290820152606081019190915260808101919091527f0bf184bf1bba9699114bdceddaf338a1b364252c5e497cc01918dde92031713f9060a0015b60405180910390a1505050505050565b600054610100900460ff16158080156108925750600054600160ff909116105b806108ac5750303b1580156108ac575060005460ff166001145b61091e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610602565b6000805460ff191660011790558015610941576000805461ff0019166101001790555b61094b868661233f565b61095584846123b8565b607b805460ff191683151517905580156109a5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610862565b505050505050565b6109b5612449565b6109bf60006124a3565b565b6001600160a01b03818116600090815260756020526040902054163314610a2a5760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792070617965652063616e2077697468647261770000000000000000006044820152606401610602565b61041f816124f5565b610a3b612449565b828114610a8a5760405162461bcd60e51b815260206004820181905260248201527f7472616e736d6974746572732e73697a6520213d207061796565732e73697a656044820152606401610602565b60005b83811015610c0a576000858583818110610aa957610aa9613a0b565b9050602002016020810190610abe91906132ba565b90506000848484818110610ad457610ad4613a0b565b9050602002016020810190610ae991906132ba565b6001600160a01b038084166000908152607560205260409020549192501680158080610b265750826001600160a01b0316826001600160a01b0316145b610b725760405162461bcd60e51b815260206004820152601160248201527f706179656520616c7265616479207365740000000000000000000000000000006044820152606401610602565b6001600160a01b03848116600090815260756020526040902080546001600160a01b03191685831690811790915590831614610bf357826001600160a01b0316826001600160a01b0316856001600160a01b03167f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b360405160405180910390a45b505050508080610c0290613afc565b915050610a8d565b5050505050565b6001600160a01b03818116600090815260766020526040902054163314610c7a5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792070726f706f736564207061796565732063616e20616363657074006044820152606401610602565b6001600160a01b0381811660008181526075602090815260408083208054336001600160a01b031980831682179093556076909452828520805490921690915590519416939092849290917f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b39190a45050565b60005a60408051610100808201835260675460ff808216845291810464ffffffffff166020808501919091526601000000000000820463ffffffff908116858701526a0100000000000000000000830481166060860152600160701b830481166080860152600160901b8304811660a0860152600160b01b83041660c0850152600160d01b90910462ffffff1660e0840152336000908152606d825293909320549394509092918c01359116610de55760405162461bcd60e51b815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610602565b606a548b3514610e375760405162461bcd60e51b815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610602565b610e458a8a8a8a8a8a6126e5565b8151610e52906001613b15565b60ff168714610ea35760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610602565b868514610ef25760405162461bcd60e51b815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610602565b60008a8a604051610f04929190613b3a565b604051908190038120610f1b918e90602001613b4a565b60408051601f19818403018152828252805160209182012083830190925260008084529083018190529092509060005b8a8110156110c15760006001858a8460208110610f6a57610f6a613a0b565b610f7791901a601b613b15565b8f8f86818110610f8957610f89613a0b565b905060200201358e8e87818110610fa257610fa2613a0b565b9050602002013560405160008152602001604052604051610fdf949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611001573d6000803e3d6000fd5b505060408051601f198101516001600160a01b0381166000908152606e602090815290849020838501909452925460ff808216151580855261010090920416938301939093529095509250905061109a5760405162461bcd60e51b815260206004820152600f60248201527f7369676e6174757265206572726f7200000000000000000000000000000000006044820152606401610602565b826020015160080260ff166001901b840193505080806110b990613afc565b915050610f4b565b5081827e0101010101010101010101010101010101010101010101010101010101010116146111325760405162461bcd60e51b815260206004820152601060248201527f6475706c6963617465207369676e6572000000000000000000000000000000006044820152606401610602565b50600091506111819050838d836020020135848e8e8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277992505050565b905061118f83828633612a78565b505050505050505050505050565b6078546001600160a01b03163381146111da5760405163292f4fb560e01b81523360048201526001600160a01b0382166024820152604401610602565b81516040516111ec9190602001613b66565b60408051601f198184030181529190528051602090910120607a555050565b6033546001600160a01b03163314806112955750607754604051630d629b5f60e31b81526001600160a01b0390911690636b14daf8906112549033906000903690600401613abc565b602060405180830381865afa158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190613adf565b6112e15760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c6044820152606401610602565b60006112eb612b8d565b90506000606660009054906101000a90046001600160a01b03166001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113669190613b82565b9050818110156113b85760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610602565b6066546001600160a01b031663f99b1d68856113dd6113d78686613b9b565b87612d5a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044015b600060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b5050505050505050565b600080606660009054906101000a90046001600160a01b03166001600160a01b03166345ccbb8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190613b82565b905060006114e0612b8d565b90506114ec8183613bb2565b9250505090565b6114fb612449565b601f89111561154c5760405162461bcd60e51b815260206004820152601060248201527f746f6f206d616e79206f7261636c6573000000000000000000000000000000006044820152606401610602565b88871461159b5760405162461bcd60e51b815260206004820152601660248201527f6f7261636c65206c656e677468206d69736d61746368000000000000000000006044820152606401610602565b886115a7876003613c26565b60ff16106115f75760405162461bcd60e51b815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610602565b6116038660ff16612d74565b6040805160e060208c02808301820190935260c082018c815260009383928f918f918291908601908490808284376000920191909152505050908252506040805160208c810282810182019093528c82529283019290918d918d91829185019084908082843760009201919091525050509082525060ff891660208083019190915260408051601f8a01839004830281018301825289815292019190899089908190840183828082843760009201919091525050509082525067ffffffffffffffff861660208083019190915260408051601f8701839004830281018301825286815292019190869086908190840183828082843760009201919091525050509152506067805465ffffffffff0019169055905061171f611ec9565b606f5460005b818110156117d0576000606f828154811061174257611742613a0b565b6000918252602082200154607080546001600160a01b039092169350908490811061176f5761176f613a0b565b60009182526020808320909101546001600160a01b039485168352606e82526040808420805461ffff1916905594168252606d90529190912080546dffffffffffffffffffffffffffff1916905550806117c881613afc565b915050611725565b506117dd606f600061317a565b6117e96070600061317a565b60005b825151811015611a6757606e60008460000151838151811061181057611810613a0b565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156118845760405162461bcd60e51b815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610602565b604080518082019091526001815260ff8216602082015283518051606e91600091859081106118b5576118b5613a0b565b6020908102919091018101516001600160a01b03168252818101929092526040016000908120835181549484015161ffff1990951690151561ff0019161761010060ff90951694909402939093179092558401518051606d9291908490811061192057611920613a0b565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156119945760405162461bcd60e51b815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610602565b60405180606001604052806001151581526020018260ff16815260200160006001600160601b0316815250606d6000856020015184815181106119d9576119d9613a0b565b6020908102919091018101516001600160a01b03168252818101929092526040908101600020835181549385015194909201516001600160601b031662010000026dffffffffffffffffffffffff00001960ff959095166101000261ff00199315159390931661ffff1990941693909317919091179290921617905580611a5f81613afc565b9150506117ec565b5081518051611a7e91606f91602090910190613198565b506020808301518051611a95926070920190613198565b5060408201516067805460ff191660ff9092169190911790556068805467ffffffff0000000019811664010000000063ffffffff43811682029283179094558204831692600092611aed929082169116176001613c4f565b905080606860006101000a81548163ffffffff021916908363ffffffff1602179055506000611b4146308463ffffffff16886000015189602001518a604001518b606001518c608001518d60a00151612dc4565b905080606a600001819055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05838284886000015189602001518a604001518b606001518c608001518d60a00151604051611ba499989796959493929190613cbb565b60405180910390a16067546601000000000000900463ffffffff1660005b865151811015611c1c5781607182601f8110611be057611be0613a0b565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508080611c1490613afc565b915050611bc2565b50611c278b8b612e51565b50505050505050505050505050505050565b6001600160a01b0381166000908152606d602090815260408083208151606081018352905460ff80821615158084526101008304909116948301949094526201000090046001600160601b03169181019190915290611c9b5750600092915050565b6071816020015160ff16601f8110611cb557611cb5613a0b565b600881049190910154606754611ceb926007166004026101000a90910463ffffffff908116916601000000000000900416613a37565b9392505050565b6001600160a01b03828116600090815260756020526040902054163314611d5b5760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792063757272656e742070617965652063616e207570646174650000006044820152606401610602565b6001600160a01b0381163303611db35760405162461bcd60e51b815260206004820152601760248201527f63616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610602565b6001600160a01b03808316600090815260766020526040902080548383166001600160a01b031982168117909255909116908114611e26576040516001600160a01b038084169133918616907f84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e3836790600090a45b505050565b611e33612449565b6001600160a01b038116611eaf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610602565b61041f816124a3565b611ec0612449565b61041f81612e5b565b606554606754604080516103e08101918290526001600160a01b0390931692660100000000000090920463ffffffff1691600091607190601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611f075790505050505050905060006070805480602002602001604051908101604052809291908181526020018280548015611fa257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f84575b5050505050905060008151905060008167ffffffffffffffff811115611fca57611fca6135ee565b604051908082528060200260200182016040528015611ff3578160200160208202803683370190505b50905060008267ffffffffffffffff811115612011576120116135ee565b60405190808252806020026020018201604052801561203a578160200160208202803683370190505b50905060005b838110156122a2576000606d600087848151811061206057612060613a0b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160029054906101000a90046001600160601b03166001600160601b031690506000606d60008885815181106120c2576120c2613a0b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160026101000a8154816001600160601b0302191690836001600160601b0316021790555060008783601f811061212557612125613a0b565b6020020151606754908a0363ffffffff9081169250600160901b909104168102633b9aca000282018015612297576000607560008a878151811061216b5761216b613a0b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03169050808786815181106121bc576121bc613a0b565b60200260200101906001600160a01b031690816001600160a01b031681525050818686815181106121ef576121ef613a0b565b6020026020010181815250508a8a86601f811061220e5761220e613a0b565b602002019063ffffffff16908163ffffffff16815250508b6001600160a01b0316816001600160a01b03168a878151811061224b5761224b613a0b565b60200260200101516001600160a01b03167fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c8560405161228d91815260200190565b60405180910390a4505b505050600101612040565b506122b0607186601f6131fd565b50805115612336576066546040517f73433a2f0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906373433a2f906123039085908590600401613d51565b600060405180830381600087803b15801561231d57600080fd5b505af1158015612331573d6000803e3d6000fd5b505050505b50505050505050565b600054610100900460ff166123aa5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b6123b48282612ed1565b5050565b600054610100900460ff166124235760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b607880546001600160a01b0319166001600160a01b039390931692909217909155607955565b6033546001600160a01b031633146109bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610602565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166000908152606d60209081526040918290208251606081018452905460ff80821615158084526101008304909116938301939093526201000090046001600160601b031692810192909252612552575050565b600061255d836104c1565b90508015611e26576001600160a01b0383811660009081526075602090815260409091205460675491850151921691660100000000000090910463ffffffff169060719060ff16601f81106125b4576125b4613a0b565b60088104909101805463ffffffff9384166004600790941684026101000a90810294021916929092179091556001600160a01b038086166000908152606d60205260409081902080546dffffffffffffffffffffffff00001916905560665490517ff99b1d6800000000000000000000000000000000000000000000000000000000815291169163f99b1d68916126639185918791016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561267d57600080fd5b505af1158015612691573d6000803e3d6000fd5b50506065546040518581526001600160a01b0391821693508482169250908716907fd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c9060200160405180910390a450505050565b60006126f2826020613a5c565b6126fd856020613a5c565b61270988610144613a7b565b6127139190613a7b565b61271d9190613a7b565b612728906000613a7b565b90503681146123365760405162461bcd60e51b815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610602565b600080828060200190518101906127909190613f9e565b64ffffffffff851660208801526040870180519192506127af82614173565b63ffffffff1663ffffffff168152505085606760008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160066101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600a6101000a81548163ffffffff021916908363ffffffff160217905550608082015181600001600e6101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160000160126101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160000160166101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600001601a6101000a81548162ffffff021916908362ffffff1602179055509050506000816040015167ffffffffffffffff164090508082606001511461296c57606082015160408084015190517faed0afe500000000000000000000000000000000000000000000000000000000815260048101929092526024820183905267ffffffffffffffff166044820152606401610602565b60665482516020840151604080860151606087015191517f098ace260000000000000000000000000000000000000000000000000000000081526000956001600160a01b03169463098ace26946129cc949193909290919060040161427f565b6000604051808303816000875af11580156129eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a139190810190614374565b90508564ffffffffff16886040015163ffffffff167fe0c90b8e55243fcba0f8b68b201983b97f7a3d5aebd6dfa1a4082a07925cc7443386602001518b86604051612a61949392919061443d565b60405180910390a350506020015195945050505050565b6000612a9f633b9aca003a04866080015163ffffffff16876060015163ffffffff16612f74565b90506010360260005a90506000612ac88663ffffffff1685858b60e0015162ffffff1686612f9a565b90506000670de0b6b3a76400006001600160c01b03891683026001600160a01b0388166000908152606d602052604090205460c08c01519290910492506201000090046001600160601b039081169163ffffffff16633b9aca000282840101908116821115612b3d5750505050505050612b87565b6001600160a01b0388166000908152606d6020526040902080546001600160601b0390921662010000026dffffffffffffffffffffffff0000199092169190911790555050505050505b50505050565b6000806070805480602002602001604051908101604052809291908181526020018280548015612be657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612bc8575b50508351606754604080516103e08101918290529697509195660100000000000090910463ffffffff169450600093509150607190601f908285855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411612c225790505050505050905060005b83811015612cb5578181601f8110612c8257612c82613a0b565b6020020151612c919084613a37565b612ca19063ffffffff1687613a7b565b955080612cad81613afc565b915050612c68565b50606754612cd490600160901b900463ffffffff16633b9aca00613a5c565b612cde9086613a5c565b945060005b83811015612d5257606d6000868381518110612d0157612d01613a0b565b6020908102919091018101516001600160a01b0316825281019190915260400160002054612d3e906201000090046001600160601b031687613a7b565b955080612d4a81613afc565b915050612ce3565b505050505090565b600081831015612d6b575081612d6e565b50805b92915050565b8060001061041f5760405162461bcd60e51b815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610602565b6000808a8a8a8a8a8a8a8a8a604051602001612de8999897969594939291906144c5565b60408051601f1981840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b6123b48282612ffe565b6077546001600160a01b0390811690821681146123b457607780546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527f793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d48912910160405180910390a15050565b600054610100900460ff16612f3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b606580546001600160a01b038085166001600160a01b03199283161790925560668054928416929091169190911790556123b4613098565b60008383811015612f8757600285850304015b612f918184612d5a565b95945050505050565b600081861015612fec5760405162461bcd60e51b815260206004820181905260248201527f6c6566744761732063616e6e6f742065786365656420696e697469616c4761736044820152606401610602565b50633b9aca0094039190910101020290565b610100818114613040578282826040517fb93aa5de0000000000000000000000000000000000000000000000000000000081526004016106029392919061454d565b600061304e83850185614571565b6066546040517f8eef585f0000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690638eef585f906114229084906004016145f9565b600054610100900460ff166131035760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b6109bf600054610100900460ff166131715760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b6109bf336124a3565b508054600082559060005260206000209081019061041f9190613290565b8280548282559060005260206000209081019282156131ed579160200282015b828111156131ed57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906131b8565b506131f9929150613290565b5090565b6004830191839082156131ed5791602002820160005b8382111561325757835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302613213565b80156132875782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613257565b50506131f99291505b5b808211156131f95760008155600101613291565b6001600160a01b038116811461041f57600080fd5b6000602082840312156132cc57600080fd5b8135611ceb816132a5565b60005b838110156132f25781810151838201526020016132da565b83811115612b875750506000910152565b6000815180845261331b8160208601602086016132d7565b601f01601f19169290920160200192915050565b602081526000611ceb6020830184613303565b803563ffffffff8116811461335657600080fd5b919050565b62ffffff8116811461041f57600080fd5b600080600080600060a0868803121561338457600080fd5b61338d86613342565b945061339b60208701613342565b93506133a960408701613342565b92506133b760608701613342565b915060808601356133c78161335b565b809150509295509295909350565b801515811461041f57600080fd5b600080600080600060a086880312156133fb57600080fd5b8535613406816132a5565b94506020860135613416816132a5565b93506040860135613426816132a5565b92506060860135915060808601356133c7816133d5565b60008083601f84011261344f57600080fd5b50813567ffffffffffffffff81111561346757600080fd5b6020830191508360208260051b850101111561348257600080fd5b9250929050565b6000806000806040858703121561349f57600080fd5b843567ffffffffffffffff808211156134b757600080fd5b6134c38883890161343d565b909650945060208701359150808211156134dc57600080fd5b506134e98782880161343d565b95989497509550505050565b60008083601f84011261350757600080fd5b50813567ffffffffffffffff81111561351f57600080fd5b60208301915083602082850101111561348257600080fd5b60008060008060008060008060e0898b03121561355357600080fd5b606089018a81111561356457600080fd5b8998503567ffffffffffffffff8082111561357e57600080fd5b61358a8c838d016134f5565b909950975060808b01359150808211156135a357600080fd5b6135af8c838d0161343d565b909750955060a08b01359150808211156135c857600080fd5b506135d58b828c0161343d565b999c989b50969995989497949560c00135949350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613627576136276135ee565b60405290565b60405160c0810167ffffffffffffffff81118282101715613627576136276135ee565b6040516080810167ffffffffffffffff81118282101715613627576136276135ee565b6040516020810167ffffffffffffffff81118282101715613627576136276135ee565b604051601f8201601f1916810167ffffffffffffffff811182821017156136bf576136bf6135ee565b604052919050565b600067ffffffffffffffff8211156136e1576136e16135ee565b50601f01601f191660200190565b600067ffffffffffffffff821115613709576137096135ee565b5060051b60200190565b600082601f83011261372457600080fd5b81356020613739613734836136ef565b613696565b82815260059290921b8401810191818101908684111561375857600080fd5b8286015b84811015613773578035835291830191830161375c565b509695505050505050565b6000602080838503121561379157600080fd5b823567ffffffffffffffff808211156137a957600080fd5b90840190604082870312156137bd57600080fd5b6137c5613604565b8235828111156137d457600080fd5b8301601f810188136137e557600080fd5b80356137f3613734826136c7565b818152898783850101111561380757600080fd5b81878401888301376000878383010152808452505050838301358281111561382e57600080fd5b61383a88828601613713565b948201949094529695505050505050565b6000806040838503121561385e57600080fd5b8235613869816132a5565b946020939093013593505050565b60006020828403121561388957600080fd5b813567ffffffffffffffff8111156138a057600080fd5b820160808185031215611ceb57600080fd5b803560ff8116811461335657600080fd5b67ffffffffffffffff8116811461041f57600080fd5b8035613356816138c3565b60008060008060008060008060008060c08b8d03121561390357600080fd5b8a3567ffffffffffffffff8082111561391b57600080fd5b6139278e838f0161343d565b909c509a5060208d013591508082111561394057600080fd5b61394c8e838f0161343d565b909a50985088915061396060408e016138b2565b975060608d013591508082111561397657600080fd5b6139828e838f016134f5565b909750955085915061399660808e016138d9565b945060a08d01359150808211156139ac57600080fd5b506139b98d828e016134f5565b915080935050809150509295989b9194979a5092959850565b600080604083850312156139e557600080fd5b82356139f0816132a5565b91506020830135613a00816132a5565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015613a5457613a54613a21565b039392505050565b6000816000190483118215151615613a7657613a76613a21565b500290565b60008219821115613a8e57613a8e613a21565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201526000612f91604083018486613a93565b600060208284031215613af157600080fd5b8151611ceb816133d5565b600060018201613b0e57613b0e613a21565b5060010190565b600060ff821660ff84168060ff03821115613b3257613b32613a21565b019392505050565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60008251613b788184602087016132d7565b9190910192915050565b600060208284031215613b9457600080fd5b5051919050565b600082821015613bad57613bad613a21565b500390565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613bec57613bec613a21565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613c2057613c20613a21565b50500390565b600060ff821660ff84168160ff0481118215151615613c4757613c47613a21565b029392505050565b600063ffffffff808316818516808303821115613c6e57613c6e613a21565b01949350505050565b600081518084526020808501945080840160005b83811015613cb05781516001600160a01b031687529582019590820190600101613c8b565b509495945050505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152613ceb8184018a613c77565b90508281036080840152613cff8189613c77565b905060ff871660a084015282810360c0840152613d1c8187613303565b905067ffffffffffffffff851660e0840152828103610100840152613d418185613303565b9c9b505050505050505050505050565b604081526000613d646040830185613c77565b82810360208481019190915284518083528582019282019060005b81811015613d9b57845183529383019391830191600101613d7f565b5090979650505050505050565b8051613356816138c3565b805161ffff8116811461335657600080fd5b8051613356816132a5565b600082601f830112613de157600080fd5b8151613def613734826136c7565b818152846020838601011115613e0457600080fd5b6105c18260208301602087016132d7565b80516001600160601b038116811461335657600080fd5b600082601f830112613e3d57600080fd5b81516020613e4d613734836136ef565b82815260059290921b84018101918181019086841115613e6c57600080fd5b8286015b8481101561377357805167ffffffffffffffff80821115613e9057600080fd5b90880190601f196040838c0382011215613ea957600080fd5b613eb1613604565b8784015183811115613ec257600080fd5b840160c0818e0384011215613ed657600080fd5b613ede61362d565b92508881015165ffffffffffff81168114613ef857600080fd5b8352613f0660408201613db3565b89840152613f1660608201613dc5565b6040840152608081015184811115613f2d57600080fd5b613f3b8e8b83850101613dd0565b606085015250613f4d60a08201613da8565b6080840152613f5e60c08201613e15565b60a084015250818152613f7360408501613e15565b818901528652505050918301918301613e70565b80516001600160c01b038116811461335657600080fd5b600060208284031215613fb057600080fd5b815167ffffffffffffffff80821115613fc857600080fd5b9083019060808286031215613fdc57600080fd5b613fe4613650565b825182811115613ff357600080fd5b8301601f8101871361400457600080fd5b8051614012613734826136ef565b8082825260208201915060208360051b85010192508983111561403457600080fd5b602084015b838110156141345780518781111561405057600080fd5b850160a0818d03601f1901121561406657600080fd5b61406e613650565b602082015161407c816138c3565b8152604082015161408c8161335b565b60208201526040828e03605f190112156140a557600080fd5b6140ad613673565b8d607f8401126140bc57600080fd5b6140c4613604565b808f60a0860111156140d557600080fd5b606085015b60a086018110156140f55780518352602092830192016140da565b50825250604082015260a08201518981111561411057600080fd5b61411f8e602083860101613e2c565b60608301525084525060209283019201614039565b5084525061414791505060208401613f87565b602082015261415860408401613da8565b60408201526060830151606082015280935050505092915050565b600063ffffffff80831681810361418c5761418c613a21565b6001019392505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561427257828403895281516040815181875265ffffffffffff8151168288015287810151606061ffff8216818a0152838301519350608091506001600160a01b038416828a01528083015193505060c060a081818b015261421d6101008b0186613303565b9284015167ffffffffffffffff16918a0191909152909101516001600160601b031660e08801529187015191905061425f878701836001600160601b03169052565b99860199945050908401906001016141b4565b5091979650505050505050565b6000608080830181845280885180835260a092508286019150828160051b8701016020808c016000805b8581101561432f578a8503609f190187528251805167ffffffffffffffff1686528481015162ffffff16858701526040808201515190849088015b60028210156143035782518152918701916001919091019087016142e4565b50505060600151858a0189905261431c868a0182614196565b97850197955050918301916001016142a9565b5050508196506143498189018c6001600160c01b03169052565b505050505050614365604083018567ffffffffffffffff169052565b82606083015295945050505050565b6000602080838503121561438757600080fd5b825167ffffffffffffffff81111561439e57600080fd5b8301601f810185136143af57600080fd5b80516143bd613734826136ef565b81815260069190911b820183019083810190878311156143dc57600080fd5b928401925b8284101561443257604084890312156143fa5760008081fd5b614402613604565b845161440d816138c3565b81528486015161441c8161335b565b81870152825260409390930192908401906143e1565b979650505050505050565b6000608082016001600160a01b038716835260206001600160c01b03871681850152604086818601526080606086015282865180855260a087019150838801945060005b818110156144b5578551805167ffffffffffffffff16845285015162ffffff16858401529484019491830191600101614481565b50909a9950505050505050505050565b60006101208b83526001600160a01b038b16602084015267ffffffffffffffff808b1660408501528160608501526144ff8285018b613c77565b91508382036080850152614513828a613c77565b915060ff881660a085015283820360c08501526145308288613303565b90861660e08501528381036101008501529050613d418185613303565b604081526000614561604083018587613a93565b9050826020830152949350505050565b600061010080838503121561458557600080fd5b83601f84011261459457600080fd5b60405181810181811067ffffffffffffffff821117156145b6576145b66135ee565b6040529083019080858311156145cb57600080fd5b845b838110156145ee5780356145e08161335b565b8252602091820191016145cd565b509095945050505050565b6101008101818360005b600881101561462757815162ffffff16835260209283019290910190600101614603565b5050509291505056fea264697066735822122030e7a64919c02efceac84f2a15fcaff13691206ed088394918d2338d3ce1dd8e64736f6c634300080f0033",
}

var TestVRFBeaconV2ABI = TestVRFBeaconV2MetaData.ABI

var TestVRFBeaconV2Bin = TestVRFBeaconV2MetaData.Bin

func DeployTestVRFBeaconV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TestVRFBeaconV2, error) {
	parsed, err := TestVRFBeaconV2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestVRFBeaconV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestVRFBeaconV2{TestVRFBeaconV2Caller: TestVRFBeaconV2Caller{contract: contract}, TestVRFBeaconV2Transactor: TestVRFBeaconV2Transactor{contract: contract}, TestVRFBeaconV2Filterer: TestVRFBeaconV2Filterer{contract: contract}}, nil
}

type TestVRFBeaconV2 struct {
	address common.Address
	abi     abi.ABI
	TestVRFBeaconV2Caller
	TestVRFBeaconV2Transactor
	TestVRFBeaconV2Filterer
}

type TestVRFBeaconV2Caller struct {
	contract *bind.BoundContract
}

type TestVRFBeaconV2Transactor struct {
	contract *bind.BoundContract
}

type TestVRFBeaconV2Filterer struct {
	contract *bind.BoundContract
}

type TestVRFBeaconV2Session struct {
	Contract     *TestVRFBeaconV2
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type TestVRFBeaconV2CallerSession struct {
	Contract *TestVRFBeaconV2Caller
	CallOpts bind.CallOpts
}

type TestVRFBeaconV2TransactorSession struct {
	Contract     *TestVRFBeaconV2Transactor
	TransactOpts bind.TransactOpts
}

type TestVRFBeaconV2Raw struct {
	Contract *TestVRFBeaconV2
}

type TestVRFBeaconV2CallerRaw struct {
	Contract *TestVRFBeaconV2Caller
}

type TestVRFBeaconV2TransactorRaw struct {
	Contract *TestVRFBeaconV2Transactor
}

func NewTestVRFBeaconV2(address common.Address, backend bind.ContractBackend) (*TestVRFBeaconV2, error) {
	abi, err := abi.JSON(strings.NewReader(TestVRFBeaconV2ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindTestVRFBeaconV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2{address: address, abi: abi, TestVRFBeaconV2Caller: TestVRFBeaconV2Caller{contract: contract}, TestVRFBeaconV2Transactor: TestVRFBeaconV2Transactor{contract: contract}, TestVRFBeaconV2Filterer: TestVRFBeaconV2Filterer{contract: contract}}, nil
}

func NewTestVRFBeaconV2Caller(address common.Address, caller bind.ContractCaller) (*TestVRFBeaconV2Caller, error) {
	contract, err := bindTestVRFBeaconV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2Caller{contract: contract}, nil
}

func NewTestVRFBeaconV2Transactor(address common.Address, transactor bind.ContractTransactor) (*TestVRFBeaconV2Transactor, error) {
	contract, err := bindTestVRFBeaconV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2Transactor{contract: contract}, nil
}

func NewTestVRFBeaconV2Filterer(address common.Address, filterer bind.ContractFilterer) (*TestVRFBeaconV2Filterer, error) {
	contract, err := bindTestVRFBeaconV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2Filterer{contract: contract}, nil
}

func bindTestVRFBeaconV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestVRFBeaconV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFBeaconV2.Contract.TestVRFBeaconV2Caller.contract.Call(opts, result, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TestVRFBeaconV2Transactor.contract.Transfer(opts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TestVRFBeaconV2Transactor.contract.Transact(opts, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFBeaconV2.Contract.contract.Call(opts, result, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.contract.Transfer(opts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.contract.Transact(opts, method, params...)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFBeaconV2.Contract.NUMCONFDELAYS(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFBeaconV2.Contract.NUMCONFDELAYS(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) AllowOnchainVerification(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "_allowOnchainVerification")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) AllowOnchainVerification() (bool, error) {
	return _TestVRFBeaconV2.Contract.AllowOnchainVerification(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) AllowOnchainVerification() (bool, error) {
	return _TestVRFBeaconV2.Contract.AllowOnchainVerification(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) GetBilling(opts *bind.CallOpts) (GetBilling,

	error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "getBilling")

	outstruct := new(GetBilling)
	if err != nil {
		return *outstruct, err
	}

	outstruct.MaximumGasPriceGwei = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.ReasonableGasPriceGwei = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ObservationPaymentGjuels = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.TransmissionPaymentGjuels = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.AccountingGas = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) GetBilling() (GetBilling,

	error) {
	return _TestVRFBeaconV2.Contract.GetBilling(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) GetBilling() (GetBilling,

	error) {
	return _TestVRFBeaconV2.Contract.GetBilling(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) GetBillingAccessController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "getBillingAccessController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) GetBillingAccessController() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.GetBillingAccessController(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) GetBillingAccessController() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.GetBillingAccessController(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDetails(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDetails(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDigestAndEpoch(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _TestVRFBeaconV2.Contract.LatestConfigDigestAndEpoch(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "linkAvailableForPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) LinkAvailableForPayment() (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.LinkAvailableForPayment(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) LinkAvailableForPayment() (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.LinkAvailableForPayment(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) OracleObservationCount(opts *bind.CallOpts, transmitterAddress common.Address) (uint32, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "oracleObservationCount", transmitterAddress)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) OracleObservationCount(transmitterAddress common.Address) (uint32, error) {
	return _TestVRFBeaconV2.Contract.OracleObservationCount(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) OracleObservationCount(transmitterAddress common.Address) (uint32, error) {
	return _TestVRFBeaconV2.Contract.OracleObservationCount(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) OwedPayment(opts *bind.CallOpts, transmitterAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "owedPayment", transmitterAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) OwedPayment(transmitterAddress common.Address) (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.OwedPayment(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) OwedPayment(transmitterAddress common.Address) (*big.Int, error) {
	return _TestVRFBeaconV2.Contract.OwedPayment(&_TestVRFBeaconV2.CallOpts, transmitterAddress)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) Owner() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.Owner(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) Owner() (common.Address, error) {
	return _TestVRFBeaconV2.Contract.Owner(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) SKeyID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "s_keyID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SKeyID() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SKeyID(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) SKeyID() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SKeyID(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "s_provingKeyHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SProvingKeyHash() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SProvingKeyHash(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) SProvingKeyHash() ([32]byte, error) {
	return _TestVRFBeaconV2.Contract.SProvingKeyHash(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Caller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TestVRFBeaconV2.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) TypeAndVersion() (string, error) {
	return _TestVRFBeaconV2.Contract.TypeAndVersion(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2CallerSession) TypeAndVersion() (string, error) {
	return _TestVRFBeaconV2.Contract.TypeAndVersion(&_TestVRFBeaconV2.CallOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) AcceptPayeeship(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "acceptPayeeship", transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) AcceptPayeeship(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.AcceptPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) AcceptPayeeship(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.AcceptPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "exposeType", arg0)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.ExposeType(&_TestVRFBeaconV2.TransactOpts, arg0)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) ExposeType(arg0 VRFBeaconReportReport) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.ExposeType(&_TestVRFBeaconV2.TransactOpts, arg0)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) Initialize(opts *bind.TransactOpts, link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, allowOnchainVerification bool) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "initialize", link, coordinator, keyProvider, keyID, allowOnchainVerification)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) Initialize(link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, allowOnchainVerification bool) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Initialize(&_TestVRFBeaconV2.TransactOpts, link, coordinator, keyProvider, keyID, allowOnchainVerification)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) Initialize(link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, allowOnchainVerification bool) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Initialize(&_TestVRFBeaconV2.TransactOpts, link, coordinator, keyProvider, keyID, allowOnchainVerification)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "keyGenerated", kd)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.KeyGenerated(&_TestVRFBeaconV2.TransactOpts, kd)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.KeyGenerated(&_TestVRFBeaconV2.TransactOpts, kd)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "newKeyRequested")
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) NewKeyRequested() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.NewKeyRequested(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) NewKeyRequested() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.NewKeyRequested(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "renounceOwnership")
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.RenounceOwnership(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.RenounceOwnership(&_TestVRFBeaconV2.TransactOpts)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetBilling(opts *bind.TransactOpts, maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setBilling", maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetBilling(maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBilling(&_TestVRFBeaconV2.TransactOpts, maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetBilling(maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBilling(&_TestVRFBeaconV2.TransactOpts, maximumGasPriceGwei, reasonableGasPriceGwei, observationPaymentGjuels, transmissionPaymentGjuels, accountingGas)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetBillingAccessController(opts *bind.TransactOpts, _billingAccessController common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setBillingAccessController", _billingAccessController)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetBillingAccessController(_billingAccessController common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBillingAccessController(&_TestVRFBeaconV2.TransactOpts, _billingAccessController)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetBillingAccessController(_billingAccessController common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetBillingAccessController(&_TestVRFBeaconV2.TransactOpts, _billingAccessController)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setConfig", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetConfig(&_TestVRFBeaconV2.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetConfig(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetConfig(&_TestVRFBeaconV2.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) SetPayees(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "setPayees", transmitters, payees)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) SetPayees(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetPayees(&_TestVRFBeaconV2.TransactOpts, transmitters, payees)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) SetPayees(transmitters []common.Address, payees []common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.SetPayees(&_TestVRFBeaconV2.TransactOpts, transmitters, payees)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "transferOwnership", newOwner)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferOwnership(&_TestVRFBeaconV2.TransactOpts, newOwner)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferOwnership(&_TestVRFBeaconV2.TransactOpts, newOwner)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) TransferPayeeship(opts *bind.TransactOpts, transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "transferPayeeship", transmitter, proposed)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) TransferPayeeship(transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter, proposed)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) TransferPayeeship(transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.TransferPayeeship(&_TestVRFBeaconV2.TransactOpts, transmitter, proposed)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Transmit(&_TestVRFBeaconV2.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.Transmit(&_TestVRFBeaconV2.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) WithdrawFunds(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "withdrawFunds", recipient, amount)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawFunds(&_TestVRFBeaconV2.TransactOpts, recipient, amount)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawFunds(&_TestVRFBeaconV2.TransactOpts, recipient, amount)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Transactor) WithdrawPayment(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.contract.Transact(opts, "withdrawPayment", transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Session) WithdrawPayment(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawPayment(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2TransactorSession) WithdrawPayment(transmitter common.Address) (*types.Transaction, error) {
	return _TestVRFBeaconV2.Contract.WithdrawPayment(&_TestVRFBeaconV2.TransactOpts, transmitter)
}

type TestVRFBeaconV2BillingAccessControllerSetIterator struct {
	Event *TestVRFBeaconV2BillingAccessControllerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2BillingAccessControllerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2BillingAccessControllerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2BillingAccessControllerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2BillingAccessControllerSetIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2BillingAccessControllerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2BillingAccessControllerSet struct {
	Old     common.Address
	Current common.Address
	Raw     types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterBillingAccessControllerSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingAccessControllerSetIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "BillingAccessControllerSet")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2BillingAccessControllerSetIterator{contract: _TestVRFBeaconV2.contract, event: "BillingAccessControllerSet", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchBillingAccessControllerSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingAccessControllerSet) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "BillingAccessControllerSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2BillingAccessControllerSet)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingAccessControllerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseBillingAccessControllerSet(log types.Log) (*TestVRFBeaconV2BillingAccessControllerSet, error) {
	event := new(TestVRFBeaconV2BillingAccessControllerSet)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingAccessControllerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2BillingSetIterator struct {
	Event *TestVRFBeaconV2BillingSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2BillingSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2BillingSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2BillingSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2BillingSetIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2BillingSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2BillingSet struct {
	MaximumGasPriceGwei       uint32
	ReasonableGasPriceGwei    uint32
	ObservationPaymentGjuels  uint32
	TransmissionPaymentGjuels uint32
	AccountingGas             *big.Int
	Raw                       types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterBillingSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingSetIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "BillingSet")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2BillingSetIterator{contract: _TestVRFBeaconV2.contract, event: "BillingSet", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchBillingSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingSet) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "BillingSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2BillingSet)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseBillingSet(log types.Log) (*TestVRFBeaconV2BillingSet, error) {
	event := new(TestVRFBeaconV2BillingSet)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "BillingSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2ConfigSetIterator struct {
	Event *TestVRFBeaconV2ConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2ConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2ConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2ConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2ConfigSetIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2ConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2ConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterConfigSet(opts *bind.FilterOpts) (*TestVRFBeaconV2ConfigSetIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2ConfigSetIterator{contract: _TestVRFBeaconV2.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2ConfigSet) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2ConfigSet)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseConfigSet(log types.Log) (*TestVRFBeaconV2ConfigSet, error) {
	event := new(TestVRFBeaconV2ConfigSet)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2InitializedIterator struct {
	Event *TestVRFBeaconV2Initialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2InitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2Initialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2Initialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2InitializedIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2InitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2Initialized struct {
	Version uint8
	Raw     types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterInitialized(opts *bind.FilterOpts) (*TestVRFBeaconV2InitializedIterator, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2InitializedIterator{contract: _TestVRFBeaconV2.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2Initialized) (event.Subscription, error) {

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2Initialized)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseInitialized(log types.Log) (*TestVRFBeaconV2Initialized, error) {
	event := new(TestVRFBeaconV2Initialized)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2NewTransmissionIterator struct {
	Event *TestVRFBeaconV2NewTransmission

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2NewTransmissionIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2NewTransmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2NewTransmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2NewTransmissionIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2NewTransmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2NewTransmission struct {
	AggregatorRoundId uint32
	EpochAndRound     *big.Int
	Transmitter       common.Address
	JuelsPerFeeCoin   *big.Int
	ConfigDigest      [32]byte
	OutputsServed     []VRFBeaconTypesOutputServed
	Raw               types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterNewTransmission(opts *bind.FilterOpts, aggregatorRoundId []uint32, epochAndRound []*big.Int) (*TestVRFBeaconV2NewTransmissionIterator, error) {

	var aggregatorRoundIdRule []interface{}
	for _, aggregatorRoundIdItem := range aggregatorRoundId {
		aggregatorRoundIdRule = append(aggregatorRoundIdRule, aggregatorRoundIdItem)
	}
	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "NewTransmission", aggregatorRoundIdRule, epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2NewTransmissionIterator{contract: _TestVRFBeaconV2.contract, event: "NewTransmission", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2NewTransmission, aggregatorRoundId []uint32, epochAndRound []*big.Int) (event.Subscription, error) {

	var aggregatorRoundIdRule []interface{}
	for _, aggregatorRoundIdItem := range aggregatorRoundId {
		aggregatorRoundIdRule = append(aggregatorRoundIdRule, aggregatorRoundIdItem)
	}
	var epochAndRoundRule []interface{}
	for _, epochAndRoundItem := range epochAndRound {
		epochAndRoundRule = append(epochAndRoundRule, epochAndRoundItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "NewTransmission", aggregatorRoundIdRule, epochAndRoundRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2NewTransmission)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "NewTransmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseNewTransmission(log types.Log) (*TestVRFBeaconV2NewTransmission, error) {
	event := new(TestVRFBeaconV2NewTransmission)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "NewTransmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2OraclePaidIterator struct {
	Event *TestVRFBeaconV2OraclePaid

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2OraclePaidIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2OraclePaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2OraclePaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2OraclePaidIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2OraclePaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2OraclePaid struct {
	Transmitter common.Address
	Payee       common.Address
	Amount      *big.Int
	LinkToken   common.Address
	Raw         types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterOraclePaid(opts *bind.FilterOpts, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (*TestVRFBeaconV2OraclePaidIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}

	var linkTokenRule []interface{}
	for _, linkTokenItem := range linkToken {
		linkTokenRule = append(linkTokenRule, linkTokenItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "OraclePaid", transmitterRule, payeeRule, linkTokenRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2OraclePaidIterator{contract: _TestVRFBeaconV2.contract, event: "OraclePaid", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchOraclePaid(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OraclePaid, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var payeeRule []interface{}
	for _, payeeItem := range payee {
		payeeRule = append(payeeRule, payeeItem)
	}

	var linkTokenRule []interface{}
	for _, linkTokenItem := range linkToken {
		linkTokenRule = append(linkTokenRule, linkTokenItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "OraclePaid", transmitterRule, payeeRule, linkTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2OraclePaid)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OraclePaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseOraclePaid(log types.Log) (*TestVRFBeaconV2OraclePaid, error) {
	event := new(TestVRFBeaconV2OraclePaid)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OraclePaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2OwnershipTransferredIterator struct {
	Event *TestVRFBeaconV2OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TestVRFBeaconV2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2OwnershipTransferredIterator{contract: _TestVRFBeaconV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2OwnershipTransferred)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParseOwnershipTransferred(log types.Log) (*TestVRFBeaconV2OwnershipTransferred, error) {
	event := new(TestVRFBeaconV2OwnershipTransferred)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2PayeeshipTransferRequestedIterator struct {
	Event *TestVRFBeaconV2PayeeshipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2PayeeshipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2PayeeshipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2PayeeshipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2PayeeshipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2PayeeshipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2PayeeshipTransferRequested struct {
	Transmitter common.Address
	Current     common.Address
	Proposed    common.Address
	Raw         types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterPayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, current []common.Address, proposed []common.Address) (*TestVRFBeaconV2PayeeshipTransferRequestedIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var proposedRule []interface{}
	for _, proposedItem := range proposed {
		proposedRule = append(proposedRule, proposedItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "PayeeshipTransferRequested", transmitterRule, currentRule, proposedRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2PayeeshipTransferRequestedIterator{contract: _TestVRFBeaconV2.contract, event: "PayeeshipTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchPayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferRequested, transmitter []common.Address, current []common.Address, proposed []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}
	var proposedRule []interface{}
	for _, proposedItem := range proposed {
		proposedRule = append(proposedRule, proposedItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "PayeeshipTransferRequested", transmitterRule, currentRule, proposedRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2PayeeshipTransferRequested)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParsePayeeshipTransferRequested(log types.Log) (*TestVRFBeaconV2PayeeshipTransferRequested, error) {
	event := new(TestVRFBeaconV2PayeeshipTransferRequested)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFBeaconV2PayeeshipTransferredIterator struct {
	Event *TestVRFBeaconV2PayeeshipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFBeaconV2PayeeshipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFBeaconV2PayeeshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFBeaconV2PayeeshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFBeaconV2PayeeshipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFBeaconV2PayeeshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFBeaconV2PayeeshipTransferred struct {
	Transmitter common.Address
	Previous    common.Address
	Current     common.Address
	Raw         types.Log
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) FilterPayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, previous []common.Address, current []common.Address) (*TestVRFBeaconV2PayeeshipTransferredIterator, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var previousRule []interface{}
	for _, previousItem := range previous {
		previousRule = append(previousRule, previousItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.FilterLogs(opts, "PayeeshipTransferred", transmitterRule, previousRule, currentRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFBeaconV2PayeeshipTransferredIterator{contract: _TestVRFBeaconV2.contract, event: "PayeeshipTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) WatchPayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferred, transmitter []common.Address, previous []common.Address, current []common.Address) (event.Subscription, error) {

	var transmitterRule []interface{}
	for _, transmitterItem := range transmitter {
		transmitterRule = append(transmitterRule, transmitterItem)
	}
	var previousRule []interface{}
	for _, previousItem := range previous {
		previousRule = append(previousRule, previousItem)
	}
	var currentRule []interface{}
	for _, currentItem := range current {
		currentRule = append(currentRule, currentItem)
	}

	logs, sub, err := _TestVRFBeaconV2.contract.WatchLogs(opts, "PayeeshipTransferred", transmitterRule, previousRule, currentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFBeaconV2PayeeshipTransferred)
				if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2Filterer) ParsePayeeshipTransferred(log types.Log) (*TestVRFBeaconV2PayeeshipTransferred, error) {
	event := new(TestVRFBeaconV2PayeeshipTransferred)
	if err := _TestVRFBeaconV2.contract.UnpackLog(event, "PayeeshipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetBilling struct {
	MaximumGasPriceGwei       uint32
	ReasonableGasPriceGwei    uint32
	ObservationPaymentGjuels  uint32
	TransmissionPaymentGjuels uint32
	AccountingGas             *big.Int
}
type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _TestVRFBeaconV2.abi.Events["BillingAccessControllerSet"].ID:
		return _TestVRFBeaconV2.ParseBillingAccessControllerSet(log)
	case _TestVRFBeaconV2.abi.Events["BillingSet"].ID:
		return _TestVRFBeaconV2.ParseBillingSet(log)
	case _TestVRFBeaconV2.abi.Events["ConfigSet"].ID:
		return _TestVRFBeaconV2.ParseConfigSet(log)
	case _TestVRFBeaconV2.abi.Events["Initialized"].ID:
		return _TestVRFBeaconV2.ParseInitialized(log)
	case _TestVRFBeaconV2.abi.Events["NewTransmission"].ID:
		return _TestVRFBeaconV2.ParseNewTransmission(log)
	case _TestVRFBeaconV2.abi.Events["OraclePaid"].ID:
		return _TestVRFBeaconV2.ParseOraclePaid(log)
	case _TestVRFBeaconV2.abi.Events["OwnershipTransferred"].ID:
		return _TestVRFBeaconV2.ParseOwnershipTransferred(log)
	case _TestVRFBeaconV2.abi.Events["PayeeshipTransferRequested"].ID:
		return _TestVRFBeaconV2.ParsePayeeshipTransferRequested(log)
	case _TestVRFBeaconV2.abi.Events["PayeeshipTransferred"].ID:
		return _TestVRFBeaconV2.ParsePayeeshipTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (TestVRFBeaconV2BillingAccessControllerSet) Topic() common.Hash {
	return common.HexToHash("0x793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d48912")
}

func (TestVRFBeaconV2BillingSet) Topic() common.Hash {
	return common.HexToHash("0x0bf184bf1bba9699114bdceddaf338a1b364252c5e497cc01918dde92031713f")
}

func (TestVRFBeaconV2ConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (TestVRFBeaconV2Initialized) Topic() common.Hash {
	return common.HexToHash("0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498")
}

func (TestVRFBeaconV2NewTransmission) Topic() common.Hash {
	return common.HexToHash("0xe0c90b8e55243fcba0f8b68b201983b97f7a3d5aebd6dfa1a4082a07925cc744")
}

func (TestVRFBeaconV2OraclePaid) Topic() common.Hash {
	return common.HexToHash("0xd0b1dac935d85bd54cf0a33b0d41d39f8cf53a968465fc7ea2377526b8ac712c")
}

func (TestVRFBeaconV2OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (TestVRFBeaconV2PayeeshipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e38367")
}

func (TestVRFBeaconV2PayeeshipTransferred) Topic() common.Hash {
	return common.HexToHash("0x78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b3")
}

func (_TestVRFBeaconV2 *TestVRFBeaconV2) Address() common.Address {
	return _TestVRFBeaconV2.address
}

type TestVRFBeaconV2Interface interface {
	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	AllowOnchainVerification(opts *bind.CallOpts) (bool, error)

	GetBilling(opts *bind.CallOpts) (GetBilling,

		error)

	GetBillingAccessController(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	LinkAvailableForPayment(opts *bind.CallOpts) (*big.Int, error)

	OracleObservationCount(opts *bind.CallOpts, transmitterAddress common.Address) (uint32, error)

	OwedPayment(opts *bind.CallOpts, transmitterAddress common.Address) (*big.Int, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SKeyID(opts *bind.CallOpts) ([32]byte, error)

	SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptPayeeship(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error)

	ExposeType(opts *bind.TransactOpts, arg0 VRFBeaconReportReport) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, link common.Address, coordinator common.Address, keyProvider common.Address, keyID [32]byte, allowOnchainVerification bool) (*types.Transaction, error)

	KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error)

	NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetBilling(opts *bind.TransactOpts, maximumGasPriceGwei uint32, reasonableGasPriceGwei uint32, observationPaymentGjuels uint32, transmissionPaymentGjuels uint32, accountingGas *big.Int) (*types.Transaction, error)

	SetBillingAccessController(opts *bind.TransactOpts, _billingAccessController common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	SetPayees(opts *bind.TransactOpts, transmitters []common.Address, payees []common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	TransferPayeeship(opts *bind.TransactOpts, transmitter common.Address, proposed common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawFunds(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	WithdrawPayment(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error)

	FilterBillingAccessControllerSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingAccessControllerSetIterator, error)

	WatchBillingAccessControllerSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingAccessControllerSet) (event.Subscription, error)

	ParseBillingAccessControllerSet(log types.Log) (*TestVRFBeaconV2BillingAccessControllerSet, error)

	FilterBillingSet(opts *bind.FilterOpts) (*TestVRFBeaconV2BillingSetIterator, error)

	WatchBillingSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2BillingSet) (event.Subscription, error)

	ParseBillingSet(log types.Log) (*TestVRFBeaconV2BillingSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*TestVRFBeaconV2ConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2ConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*TestVRFBeaconV2ConfigSet, error)

	FilterInitialized(opts *bind.FilterOpts) (*TestVRFBeaconV2InitializedIterator, error)

	WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2Initialized) (event.Subscription, error)

	ParseInitialized(log types.Log) (*TestVRFBeaconV2Initialized, error)

	FilterNewTransmission(opts *bind.FilterOpts, aggregatorRoundId []uint32, epochAndRound []*big.Int) (*TestVRFBeaconV2NewTransmissionIterator, error)

	WatchNewTransmission(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2NewTransmission, aggregatorRoundId []uint32, epochAndRound []*big.Int) (event.Subscription, error)

	ParseNewTransmission(log types.Log) (*TestVRFBeaconV2NewTransmission, error)

	FilterOraclePaid(opts *bind.FilterOpts, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (*TestVRFBeaconV2OraclePaidIterator, error)

	WatchOraclePaid(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OraclePaid, transmitter []common.Address, payee []common.Address, linkToken []common.Address) (event.Subscription, error)

	ParseOraclePaid(log types.Log) (*TestVRFBeaconV2OraclePaid, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TestVRFBeaconV2OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*TestVRFBeaconV2OwnershipTransferred, error)

	FilterPayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, current []common.Address, proposed []common.Address) (*TestVRFBeaconV2PayeeshipTransferRequestedIterator, error)

	WatchPayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferRequested, transmitter []common.Address, current []common.Address, proposed []common.Address) (event.Subscription, error)

	ParsePayeeshipTransferRequested(log types.Log) (*TestVRFBeaconV2PayeeshipTransferRequested, error)

	FilterPayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, previous []common.Address, current []common.Address) (*TestVRFBeaconV2PayeeshipTransferredIterator, error)

	WatchPayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFBeaconV2PayeeshipTransferred, transmitter []common.Address, previous []common.Address, current []common.Address) (event.Subscription, error)

	ParsePayeeshipTransferred(log types.Log) (*TestVRFBeaconV2PayeeshipTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
