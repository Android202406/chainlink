// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package test_vrf_coordinator_v2

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type VRFBeaconTypesCallback struct {
	RequestID    *big.Int
	NumWords     uint16
	Requester    common.Address
	Arguments    []byte
	SubID        uint64
	GasAllowance *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesOutputServed struct {
	Height            uint64
	ConfirmationDelay *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var TestVRFCoordinatorV2MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"BeaconPeriodMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earliestAllowed\",\"type\":\"uint256\"}],\"name\":\"BlockTooRecent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"firstDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDelay\",\"type\":\"uint16\"}],\"name\":\"ConfirmationDelayBlocksTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confirmationDelays\",\"type\":\"uint16[10]\"},{\"internalType\":\"uint8\",\"name\":\"violatingIndex\",\"type\":\"uint8\"}],\"name\":\"ConfirmationDelaysNotIncreasing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reportHeight\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"separatorHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"MustBeRequestedOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWordsRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confDelays\",\"type\":\"uint16[10]\"}],\"name\":\"NonZeroDelayAfterZeroDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableFromLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"}],\"name\":\"RandomnessNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ResponseMustBeRetrievedByRequester\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyRequestsReplaceContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySlotsReplaceContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyWords\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"UniverseHasEndedBangBangBang\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"givenDelay\",\"type\":\"uint24\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"knownDelays\",\"type\":\"uint24[8]\"}],\"name\":\"UnknownConfirmationDelay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.RequestID[]\",\"name\":\"requestIDs\",\"type\":\"uint48[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"successfulFulfillment\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"truncatedErrorData\",\"type\":\"bytes[]\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"}],\"name\":\"RandomnessFulfillmentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_link\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentsInJuels\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"forgetConsumerSubscriptionID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationDelays\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"\",\"type\":\"uint24[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProducer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLinkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_StartSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_beaconPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconPeriodBlocksArg\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"vrfOutputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processVRFOutputs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"}],\"internalType\":\"structVRFBeaconTypes.OutputServed[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"}],\"name\":\"redeemRandomness\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomness\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"}],\"name\":\"requestRandomnessFulfillment\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"confDelays\",\"type\":\"uint24[8]\"}],\"name\":\"setConfirmationDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProducer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"juelsAmount\",\"type\":\"uint256\"}],\"name\":\"transferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

var TestVRFCoordinatorV2ABI = TestVRFCoordinatorV2MetaData.ABI

var TestVRFCoordinatorV2Bin = TestVRFCoordinatorV2MetaData.Bin

func DeployTestVRFCoordinatorV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TestVRFCoordinatorV2, error) {
	parsed, err := TestVRFCoordinatorV2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestVRFCoordinatorV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestVRFCoordinatorV2{TestVRFCoordinatorV2Caller: TestVRFCoordinatorV2Caller{contract: contract}, TestVRFCoordinatorV2Transactor: TestVRFCoordinatorV2Transactor{contract: contract}, TestVRFCoordinatorV2Filterer: TestVRFCoordinatorV2Filterer{contract: contract}}, nil
}

type TestVRFCoordinatorV2 struct {
	address common.Address
	abi     abi.ABI
	TestVRFCoordinatorV2Caller
	TestVRFCoordinatorV2Transactor
	TestVRFCoordinatorV2Filterer
}

type TestVRFCoordinatorV2Caller struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV2Transactor struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV2Filterer struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV2Session struct {
	Contract     *TestVRFCoordinatorV2
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type TestVRFCoordinatorV2CallerSession struct {
	Contract *TestVRFCoordinatorV2Caller
	CallOpts bind.CallOpts
}

type TestVRFCoordinatorV2TransactorSession struct {
	Contract     *TestVRFCoordinatorV2Transactor
	TransactOpts bind.TransactOpts
}

type TestVRFCoordinatorV2Raw struct {
	Contract *TestVRFCoordinatorV2
}

type TestVRFCoordinatorV2CallerRaw struct {
	Contract *TestVRFCoordinatorV2Caller
}

type TestVRFCoordinatorV2TransactorRaw struct {
	Contract *TestVRFCoordinatorV2Transactor
}

func NewTestVRFCoordinatorV2(address common.Address, backend bind.ContractBackend) (*TestVRFCoordinatorV2, error) {
	abi, err := abi.JSON(strings.NewReader(TestVRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindTestVRFCoordinatorV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2{address: address, abi: abi, TestVRFCoordinatorV2Caller: TestVRFCoordinatorV2Caller{contract: contract}, TestVRFCoordinatorV2Transactor: TestVRFCoordinatorV2Transactor{contract: contract}, TestVRFCoordinatorV2Filterer: TestVRFCoordinatorV2Filterer{contract: contract}}, nil
}

func NewTestVRFCoordinatorV2Caller(address common.Address, caller bind.ContractCaller) (*TestVRFCoordinatorV2Caller, error) {
	contract, err := bindTestVRFCoordinatorV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2Caller{contract: contract}, nil
}

func NewTestVRFCoordinatorV2Transactor(address common.Address, transactor bind.ContractTransactor) (*TestVRFCoordinatorV2Transactor, error) {
	contract, err := bindTestVRFCoordinatorV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2Transactor{contract: contract}, nil
}

func NewTestVRFCoordinatorV2Filterer(address common.Address, filterer bind.ContractFilterer) (*TestVRFCoordinatorV2Filterer, error) {
	contract, err := bindTestVRFCoordinatorV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2Filterer{contract: contract}, nil
}

func bindTestVRFCoordinatorV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestVRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFCoordinatorV2.Contract.TestVRFCoordinatorV2Caller.contract.Call(opts, result, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TestVRFCoordinatorV2Transactor.contract.Transfer(opts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TestVRFCoordinatorV2Transactor.contract.Transact(opts, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFCoordinatorV2.Contract.contract.Call(opts, result, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.contract.Transfer(opts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.contract.Transact(opts, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) MAXCONSUMERS(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "MAX_CONSUMERS")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) MAXCONSUMERS() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MAXCONSUMERS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) MAXCONSUMERS() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MAXCONSUMERS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFCoordinatorV2.Contract.NUMCONFDELAYS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFCoordinatorV2.Contract.NUMCONFDELAYS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) Link(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "_link")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Link() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Link(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) Link() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Link(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) AcceptedTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "acceptedTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) AcceptedTokens(arg0 *big.Int) (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptedTokens(&_TestVRFCoordinatorV2.CallOpts, arg0)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) AcceptedTokens(arg0 *big.Int) (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptedTokens(&_TestVRFCoordinatorV2.CallOpts, arg0)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getConfirmationDelays")

	if err != nil {
		return *new([8]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([8]*big.Int)).(*[8]*big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetConfirmationDelays() ([8]*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetConfirmationDelays(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetConfirmationDelays() ([8]*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetConfirmationDelays(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetCurrentSubId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getCurrentSubId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetCurrentSubId() (uint64, error) {
	return _TestVRFCoordinatorV2.Contract.GetCurrentSubId(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetCurrentSubId() (uint64, error) {
	return _TestVRFCoordinatorV2.Contract.GetCurrentSubId(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetProducer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getProducer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetProducer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.GetProducer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetProducer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.GetProducer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

	error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getSubscription", subId)

	outstruct := new(GetSubscription)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ReqCount = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Owner = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Consumers = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)

	return *outstruct, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _TestVRFCoordinatorV2.Contract.GetSubscription(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _TestVRFCoordinatorV2.Contract.GetSubscription(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetTotalBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getTotalBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetTotalBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetTotalBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getTotalLinkBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetTotalLinkBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalLinkBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetTotalLinkBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalLinkBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) IStartSlot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "i_StartSlot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) IStartSlot() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IStartSlot(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) IStartSlot() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IStartSlot(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "i_beaconPeriodBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) IBeaconPeriodBlocks() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IBeaconPeriodBlocks(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) IBeaconPeriodBlocks() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IBeaconPeriodBlocks(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) MaxNumWords(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "maxNumWords")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) MaxNumWords() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.MaxNumWords(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) MaxNumWords() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.MaxNumWords(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) MinDelay(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "minDelay")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) MinDelay() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MinDelay(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) MinDelay() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MinDelay(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Owner() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Owner(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) Owner() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Owner(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "pendingRequestExists", subId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) PendingRequestExists(subId uint64) (bool, error) {
	return _TestVRFCoordinatorV2.Contract.PendingRequestExists(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) PendingRequestExists(subId uint64) (bool, error) {
	return _TestVRFCoordinatorV2.Contract.PendingRequestExists(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) Producer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "producer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Producer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Producer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) Producer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Producer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "acceptOwnership")
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) AcceptOwnership() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptOwnership(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptOwnership(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "acceptSubscriptionOwnerTransfer", subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "addConsumer", subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AddConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AddConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "batchTransferLink", recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.BatchTransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.BatchTransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "cancelSubscription", subId, to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CancelSubscription(&_TestVRFCoordinatorV2.TransactOpts, subId, to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CancelSubscription(&_TestVRFCoordinatorV2.TransactOpts, subId, to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "createSubscription")
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) CreateSubscription() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CreateSubscription(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) CreateSubscription() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CreateSubscription(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "forgetConsumerSubscriptionID", consumers)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ForgetConsumerSubscriptionID(&_TestVRFCoordinatorV2.TransactOpts, consumers)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ForgetConsumerSubscriptionID(&_TestVRFCoordinatorV2.TransactOpts, consumers)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) Initialize(opts *bind.TransactOpts, beaconPeriodBlocksArg *big.Int, linkToken common.Address, owner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "initialize", beaconPeriodBlocksArg, linkToken, owner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Initialize(beaconPeriodBlocksArg *big.Int, linkToken common.Address, owner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.Initialize(&_TestVRFCoordinatorV2.TransactOpts, beaconPeriodBlocksArg, linkToken, owner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) Initialize(beaconPeriodBlocksArg *big.Int, linkToken common.Address, owner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.Initialize(&_TestVRFCoordinatorV2.TransactOpts, beaconPeriodBlocksArg, linkToken, owner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "onTokenTransfer", arg0, amount, data)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.OnTokenTransfer(&_TestVRFCoordinatorV2.TransactOpts, arg0, amount, data)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.OnTokenTransfer(&_TestVRFCoordinatorV2.TransactOpts, arg0, amount, data)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "processVRFOutputs", vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ProcessVRFOutputs(&_TestVRFCoordinatorV2.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ProcessVRFOutputs(&_TestVRFCoordinatorV2.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "redeemRandomness", requestID)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RedeemRandomness(&_TestVRFCoordinatorV2.TransactOpts, requestID)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RedeemRandomness(&_TestVRFCoordinatorV2.TransactOpts, requestID)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RegisterToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "registerToken", token)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RegisterToken(token common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RegisterToken(&_TestVRFCoordinatorV2.TransactOpts, token)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RegisterToken(token common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RegisterToken(&_TestVRFCoordinatorV2.TransactOpts, token)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "removeConsumer", subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RemoveConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RemoveConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "requestRandomness", numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomness(&_TestVRFCoordinatorV2.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomness(&_TestVRFCoordinatorV2.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "requestRandomnessFulfillment", subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomnessFulfillment(&_TestVRFCoordinatorV2.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomnessFulfillment(&_TestVRFCoordinatorV2.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "requestSubscriptionOwnerTransfer", subId, newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId, newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId, newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "setConfirmationDelays", confDelays)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetConfirmationDelays(&_TestVRFCoordinatorV2.TransactOpts, confDelays)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetConfirmationDelays(&_TestVRFCoordinatorV2.TransactOpts, confDelays)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "setProducer", addr)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetProducer(&_TestVRFCoordinatorV2.TransactOpts, addr)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetProducer(&_TestVRFCoordinatorV2.TransactOpts, addr)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "transferLink", recipient, juelsAmount)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipient, juelsAmount)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipient, juelsAmount)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "transferOwnership", to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferOwnership(&_TestVRFCoordinatorV2.TransactOpts, to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferOwnership(&_TestVRFCoordinatorV2.TransactOpts, to)
}

type TestVRFCoordinatorV2InitializedIterator struct {
	Event *TestVRFCoordinatorV2Initialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2InitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2Initialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2Initialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2InitializedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2InitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2Initialized struct {
	Version uint8
	Raw     types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterInitialized(opts *bind.FilterOpts) (*TestVRFCoordinatorV2InitializedIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2InitializedIterator{contract: _TestVRFCoordinatorV2.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2Initialized) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2Initialized)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseInitialized(log types.Log) (*TestVRFCoordinatorV2Initialized, error) {
	event := new(TestVRFCoordinatorV2Initialized)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2OwnershipTransferRequestedIterator struct {
	Event *TestVRFCoordinatorV2OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFCoordinatorV2OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2OwnershipTransferRequestedIterator{contract: _TestVRFCoordinatorV2.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2OwnershipTransferRequested)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseOwnershipTransferRequested(log types.Log) (*TestVRFCoordinatorV2OwnershipTransferRequested, error) {
	event := new(TestVRFCoordinatorV2OwnershipTransferRequested)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2OwnershipTransferredIterator struct {
	Event *TestVRFCoordinatorV2OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFCoordinatorV2OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2OwnershipTransferredIterator{contract: _TestVRFCoordinatorV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2OwnershipTransferred)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseOwnershipTransferred(log types.Log) (*TestVRFCoordinatorV2OwnershipTransferred, error) {
	event := new(TestVRFCoordinatorV2OwnershipTransferred)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2RandomWordsFulfilledIterator struct {
	Event *TestVRFCoordinatorV2RandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2RandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2RandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2RandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2RandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2RandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2RandomWordsFulfilled struct {
	RequestIDs            []*big.Int
	SuccessfulFulfillment []byte
	TruncatedErrorData    [][]byte
	Raw                   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomWordsFulfilledIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2RandomWordsFulfilledIterator{contract: _TestVRFCoordinatorV2.contract, event: "RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2RandomWordsFulfilled)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseRandomWordsFulfilled(log types.Log) (*TestVRFCoordinatorV2RandomWordsFulfilled, error) {
	event := new(TestVRFCoordinatorV2RandomWordsFulfilled)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator struct {
	Event *TestVRFCoordinatorV2RandomnessFulfillmentRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2RandomnessFulfillmentRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	SubID                  uint64
	Callback               VRFBeaconTypesCallback
	Raw                    types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator{contract: _TestVRFCoordinatorV2.contract, event: "RandomnessFulfillmentRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessFulfillmentRequested) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseRandomnessFulfillmentRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessFulfillmentRequested, error) {
	event := new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2RandomnessRequestedIterator struct {
	Event *TestVRFCoordinatorV2RandomnessRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2RandomnessRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2RandomnessRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2RandomnessRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2RandomnessRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2RandomnessRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2RandomnessRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	Raw                    types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*TestVRFCoordinatorV2RandomnessRequestedIterator, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2RandomnessRequestedIterator{contract: _TestVRFCoordinatorV2.contract, event: "RandomnessRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2RandomnessRequested)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseRandomnessRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessRequested, error) {
	event := new(TestVRFCoordinatorV2RandomnessRequested)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionCanceledIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionCanceled struct {
	SubId  uint64
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCanceledIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionCanceledIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCanceled, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionCanceled)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionCanceled(log types.Log) (*TestVRFCoordinatorV2SubscriptionCanceled, error) {
	event := new(TestVRFCoordinatorV2SubscriptionCanceled)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionConsumerAddedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionConsumerAdded struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerAddedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionConsumerAddedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionConsumerAdded(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerAdded, error) {
	event := new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionConsumerRemoved struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionConsumerRemoved(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerRemoved, error) {
	event := new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionCreatedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionCreated struct {
	SubId uint64
	Owner common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCreatedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionCreatedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCreated, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionCreated)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionCreated(log types.Log) (*TestVRFCoordinatorV2SubscriptionCreated, error) {
	event := new(TestVRFCoordinatorV2SubscriptionCreated)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionFundedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionFunded struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionFundedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionFundedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionFunded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionFunded)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionFunded(log types.Log) (*TestVRFCoordinatorV2SubscriptionFunded, error) {
	event := new(TestVRFCoordinatorV2SubscriptionFunded)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferRequested struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionOwnerTransferRequested(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, error) {
	event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferred struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionOwnerTransferred(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferred, error) {
	event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetSubscription struct {
	Balance   *big.Int
	ReqCount  uint64
	Owner     common.Address
	Consumers []common.Address
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _TestVRFCoordinatorV2.abi.Events["Initialized"].ID:
		return _TestVRFCoordinatorV2.ParseInitialized(log)
	case _TestVRFCoordinatorV2.abi.Events["OwnershipTransferRequested"].ID:
		return _TestVRFCoordinatorV2.ParseOwnershipTransferRequested(log)
	case _TestVRFCoordinatorV2.abi.Events["OwnershipTransferred"].ID:
		return _TestVRFCoordinatorV2.ParseOwnershipTransferred(log)
	case _TestVRFCoordinatorV2.abi.Events["RandomWordsFulfilled"].ID:
		return _TestVRFCoordinatorV2.ParseRandomWordsFulfilled(log)
	case _TestVRFCoordinatorV2.abi.Events["RandomnessFulfillmentRequested"].ID:
		return _TestVRFCoordinatorV2.ParseRandomnessFulfillmentRequested(log)
	case _TestVRFCoordinatorV2.abi.Events["RandomnessRequested"].ID:
		return _TestVRFCoordinatorV2.ParseRandomnessRequested(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionCanceled"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionCanceled(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionConsumerAdded"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionConsumerAdded(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionConsumerRemoved"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionConsumerRemoved(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionCreated"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionCreated(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionFunded"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionFunded(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionOwnerTransferRequested"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionOwnerTransferRequested(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionOwnerTransferred"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionOwnerTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (TestVRFCoordinatorV2Initialized) Topic() common.Hash {
	return common.HexToHash("0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498")
}

func (TestVRFCoordinatorV2OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (TestVRFCoordinatorV2OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (TestVRFCoordinatorV2RandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0x47ddf7bb0cbd94c1b43c5097f1352a80db0ceb3696f029d32b24f32cd631d2b7")
}

func (TestVRFCoordinatorV2RandomnessFulfillmentRequested) Topic() common.Hash {
	return common.HexToHash("0xa62e84e206cb87e2f6896795353c5358ff3d415d0bccc24e45c5fad83e17d03c")
}

func (TestVRFCoordinatorV2RandomnessRequested) Topic() common.Hash {
	return common.HexToHash("0xc334d6f57be304c8192da2e39220c48e35f7e9afa16c541e68a6a859eff4dbc5")
}

func (TestVRFCoordinatorV2SubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0xe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd49815")
}

func (TestVRFCoordinatorV2SubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e0")
}

func (TestVRFCoordinatorV2SubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x182bff9831466789164ca77075fffd84916d35a8180ba73c27e45634549b445b")
}

func (TestVRFCoordinatorV2SubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf")
}

func (TestVRFCoordinatorV2SubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0xd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8")
}

func (TestVRFCoordinatorV2SubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x69436ea6df009049404f564eff6622cd00522b0bd6a89efd9e52a355c4a879be")
}

func (TestVRFCoordinatorV2SubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x6f1dc65165ffffedfd8e507b4a0f1fcfdada045ed11f6c26ba27cedfe87802f0")
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2) Address() common.Address {
	return _TestVRFCoordinatorV2.address
}

type TestVRFCoordinatorV2Interface interface {
	MAXCONSUMERS(opts *bind.CallOpts) (uint16, error)

	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	Link(opts *bind.CallOpts) (common.Address, error)

	AcceptedTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error)

	GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error)

	GetCurrentSubId(opts *bind.CallOpts) (uint64, error)

	GetProducer(opts *bind.CallOpts) (common.Address, error)

	GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

		error)

	GetTotalBalance(opts *bind.CallOpts) (*big.Int, error)

	GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error)

	IStartSlot(opts *bind.CallOpts) (*big.Int, error)

	IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error)

	MaxNumWords(opts *bind.CallOpts) (*big.Int, error)

	MinDelay(opts *bind.CallOpts) (uint16, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error)

	Producer(opts *bind.CallOpts) (common.Address, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error)

	AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error)

	CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error)

	CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error)

	ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, beaconPeriodBlocksArg *big.Int, linkToken common.Address, owner common.Address) (*types.Transaction, error)

	OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error)

	ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error)

	RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error)

	RegisterToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error)

	RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error)

	RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error)

	RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error)

	SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error)

	SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error)

	TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterInitialized(opts *bind.FilterOpts) (*TestVRFCoordinatorV2InitializedIterator, error)

	WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2Initialized) (event.Subscription, error)

	ParseInitialized(log types.Log) (*TestVRFCoordinatorV2Initialized, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFCoordinatorV2OwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*TestVRFCoordinatorV2OwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TestVRFCoordinatorV2OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*TestVRFCoordinatorV2OwnershipTransferred, error)

	FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomWordsFulfilledIterator, error)

	WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error)

	ParseRandomWordsFulfilled(log types.Log) (*TestVRFCoordinatorV2RandomWordsFulfilled, error)

	FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator, error)

	WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessFulfillmentRequested) (event.Subscription, error)

	ParseRandomnessFulfillmentRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessFulfillmentRequested, error)

	FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*TestVRFCoordinatorV2RandomnessRequestedIterator, error)

	WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error)

	ParseRandomnessRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessRequested, error)

	FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCanceledIterator, error)

	WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCanceled, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCanceled(log types.Log) (*TestVRFCoordinatorV2SubscriptionCanceled, error)

	FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerAddedIterator, error)

	WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerAdded(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerAdded, error)

	FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator, error)

	WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerRemoved(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerRemoved, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCreated, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*TestVRFCoordinatorV2SubscriptionCreated, error)

	FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionFundedIterator, error)

	WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionFunded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionFunded(log types.Log) (*TestVRFCoordinatorV2SubscriptionFunded, error)

	FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator, error)

	WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferRequested(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, error)

	FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator, error)

	WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferred(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
