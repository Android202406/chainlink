// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package test_vrf_coordinator_v2

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type VRFBeaconTypesCallback struct {
	RequestID    *big.Int
	NumWords     uint16
	Requester    common.Address
	Arguments    []byte
	SubID        uint64
	GasAllowance *big.Int
}

type VRFBeaconTypesCostedCallback struct {
	Callback VRFBeaconTypesCallback
	Price    *big.Int
}

type VRFBeaconTypesOutputServed struct {
	Height            uint64
	ConfirmationDelay *big.Int
}

type VRFBeaconTypesVRFOutput struct {
	BlockHeight       uint64
	ConfirmationDelay *big.Int
	VrfOutput         ECCArithmeticG1Point
	Callbacks         []VRFBeaconTypesCostedCallback
}

var TestVRFCoordinatorV2MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"BeaconPeriodMustBePositive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earliestAllowed\",\"type\":\"uint256\"}],\"name\":\"BlockTooRecent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"firstDelay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minDelay\",\"type\":\"uint16\"}],\"name\":\"ConfirmationDelayBlocksTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confirmationDelays\",\"type\":\"uint16[10]\"},{\"internalType\":\"uint8\",\"name\":\"violatingIndex\",\"type\":\"uint8\"}],\"name\":\"ConfirmationDelaysNotIncreasing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reportHeight\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"separatorHeight\",\"type\":\"uint64\"}],\"name\":\"HistoryDomainSeparatorTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"MustBeRequestedOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWordsRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16[10]\",\"name\":\"confDelays\",\"type\":\"uint16[10]\"}],\"name\":\"NonZeroDelayAfterZeroDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableFromLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"requestHeight\",\"type\":\"uint256\"}],\"name\":\"RandomnessNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ResponseMustBeRetrievedByRequester\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyRequestsReplaceContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySlotsReplaceContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyWords\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"UniverseHasEndedBangBangBang\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"givenDelay\",\"type\":\"uint24\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"knownDelays\",\"type\":\"uint24[8]\"}],\"name\":\"UnknownConfirmationDelay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.RequestID[]\",\"name\":\"requestIDs\",\"type\":\"uint48[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"successfulFulfillment\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"truncatedErrorData\",\"type\":\"bytes[]\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"}],\"name\":\"RandomnessFulfillmentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nextBeaconOutputHeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confDelay\",\"type\":\"uint24\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CONF_DELAYS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_link\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentsInJuels\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"forgetConsumerSubscriptionID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationDelays\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"\",\"type\":\"uint24[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProducer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLinkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_StartSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_beaconPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconPeriodBlocksArg\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"vrfOutput\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"gasAllowance\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.Callback\",\"name\":\"callback\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"}],\"internalType\":\"structVRFBeaconTypes.CostedCallback[]\",\"name\":\"callbacks\",\"type\":\"tuple[]\"}],\"internalType\":\"structVRFBeaconTypes.VRFOutput[]\",\"name\":\"vrfOutputs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint192\",\"name\":\"juelsPerFeeCoin\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processVRFOutputs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelay\",\"type\":\"uint24\"}],\"internalType\":\"structVRFBeaconTypes.OutputServed[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"requestID\",\"type\":\"uint48\"}],\"name\":\"redeemRandomness\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomness\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subID\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay\",\"name\":\"confirmationDelayArg\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"}],\"name\":\"requestRandomnessFulfillment\",\"outputs\":[{\"internalType\":\"VRFBeaconTypes.RequestID\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"VRFBeaconTypes.ConfirmationDelay[8]\",\"name\":\"confDelays\",\"type\":\"uint24[8]\"}],\"name\":\"setConfirmationDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProducer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"juelsAmount\",\"type\":\"uint256\"}],\"name\":\"transferLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061424c806100206000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806385c64e1111610160578063c63c4e9b116100d8578063dc92accf1161008c578063f2fde38b11610071578063f2fde38b1461054e578063f645dcb114610561578063f99b1d681461057457600080fd5b8063dc92accf14610500578063e82ad7d41461052a57600080fd5b8063cf7e754a116100bd578063cf7e754a146104d1578063d7ae1d30146104da578063da35a26f146104ed57600080fd5b8063c63c4e9b146104c0578063cd0593df146104c857600080fd5b80639f87fad71161012f578063a47c769611610114578063a47c769614610481578063a4c0ed36146104a4578063bbcdd0d8146104b757600080fd5b80639f87fad714610466578063a21a23e41461047957600080fd5b806385c64e111461041a5780638da5cb5b1461042f5780638eef585f146104405780639e3616f41461045357600080fd5b806336c87754116101f3578063715018a6116101c257806373433a2f116101a757806373433a2f146103d457806374d84611146103e7578063823597401461040757600080fd5b8063715018a6146103b95780637341c10c146103c157600080fd5b806336c8775414610370578063376126721461038357806345ccbb8b1461039657806364d51a2a1461039e57600080fd5b806312b583491161024a5780632f183cfd1161022f5780632f183cfd146103235780632f7527cc14610343578063328d320b1461035d57600080fd5b806312b58349146102f55780632b38bafc1461031057600080fd5b806304c357cb1461027c57806306bfa6371461029157806309824a80146102c2578063098ace26146102d5575b600080fd5b61028f61028a3660046134eb565b610587565b005b606554600160a01b90046001600160401b03165b6040516001600160401b0390911681526020015b60405180910390f35b61028f6102d036600461351e565b6106cb565b6102e86102e3366004613584565b610725565b6040516102b9919061360e565b6066546001600160601b03165b6040519081526020016102b9565b61028f61031e36600461351e565b610977565b61032b6109a1565b6040516001600160a01b0390911681526020016102b9565b61034b600881565b60405160ff90911681526020016102b9565b60655461032b906001600160a01b031681565b61032b61037e36600461366b565b6109bb565b606c5461032b906001600160a01b031681565b6103026109e5565b6103a6606481565b60405161ffff90911681526020016102b9565b61028f610abf565b61028f6103cf3660046134eb565b610ad3565b61028f6103e2366004613684565b610c92565b6103fa6103f5366004613705565b610f64565b6040516102b9919061375b565b61028f61041536600461376e565b611148565b6104226112b6565b6040516102b991906137b1565b6033546001600160a01b031661032b565b61028f61044e3660046137c0565b61131b565b61028f6104613660046137eb565b611379565b61028f6104743660046134eb565b611408565b6102a5611745565b61049461048f36600461376e565b6118f2565b6040516102b9949392919061382c565b61028f6104b23660046138a7565b6119f5565b6103026103e881565b6103a6600381565b61030260705481565b61030260715481565b61028f6104e83660046134eb565b611bd1565b61028f6104fb36600461392d565b611c75565b61051361050e366004613975565b611e05565b60405165ffffffffffff90911681526020016102b9565b61053e61053836600461376e565b50600090565b60405190151581526020016102b9565b61028f61055c36600461351e565b611f3d565b61051361056f366004613afb565b611fcd565b61028f610582366004613b85565b6120cd565b6001600160401b03821660009081526069602052604090205482906001600160a01b0316806105c957604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b0382161461060257604051636c51fda960e11b81526001600160a01b03821660048201526024015b60405180910390fd5b60685460ff16156106265760405163769dd35360e11b815260040160405180910390fd5b6001600160401b0384166000908152606960205260409020600101546001600160a01b038481169116146106c5576001600160401b03841660008181526069602090815260409182902060010180546001600160a01b0319166001600160a01b0388169081179091558251338152918201527f69436ea6df009049404f564eff6622cd00522b0bd6a89efd9e52a355c4a879be91015b60405180910390a25b50505050565b6106d36121dd565b607580546001810182556000919091527f9a8d93986a7b9e6294572ea6736696119c195c1a9f5eae642d3c5fcd44e49dea0180546001600160a01b0319166001600160a01b0392909216919091179055565b606c546060906001600160a01b031633146107755760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105f9565b600080866001600160401b03811115610790576107906139b8565b6040519080825280602002602001820160405280156107d557816020015b60408051808201909152600080825260208201528152602001906001900390816107ae5790505b50905060005b878110156108aa5760008989838181106107f7576107f7613baf565b90506020028101906108099190613bc5565b61081290613d64565b905061081f81888a612237565b6040810151515115158061083b57506040810151516020015115155b1561089757604051806040016040528082600001516001600160401b03168152602001826020015162ffffff1681525083838151811061087d5761087d613baf565b6020026020010181905250838061089390613e4f565b9450505b50806108a281613e70565b9150506107db565b5060008261ffff166001600160401b038111156108c9576108c96139b8565b60405190808252806020026020018201604052801561090e57816020015b60408051808201909152600080825260208201528152602001906001900390816108e75790505b50905060005b8361ffff1681101561096a5782818151811061093257610932613baf565b602002602001015182828151811061094c5761094c613baf565b6020026020010181905250808061096290613e70565b915050610914565b5098975050505050505050565b61097f6121dd565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b60006109ab6121dd565b50606c546001600160a01b031690565b607581815481106109cb57600080fd5b6000918252602090912001546001600160a01b0316905081565b606c546000906001600160a01b03163314610a355760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105f9565b6065546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190613e89565b905090565b610ac76121dd565b610ad160006126b8565b565b6001600160401b03821660009081526069602052604090205482906001600160a01b031680610b1557604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b03821614610b4957604051636c51fda960e11b81526001600160a01b03821660048201526024016105f9565b60685460ff1615610b6d5760405163769dd35360e11b815260040160405180910390fd5b6001600160401b03841660009081526069602052604090206002015460631901610bc3576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526067602090815260408083206001600160401b03808916855292528220541690036106c5576001600160a01b03831660008181526067602090815260408083206001600160401b038916808552908352818420805467ffffffffffffffff19166001908117909155606984528285206002018054918201815585529383902090930180546001600160a01b031916851790555192835290917f43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e091016106bc565b606c546001600160a01b03163314610cdf5760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105f9565b8280610d535760405162461bcd60e51b815260206004820152602b60248201527f6e756d626572206f6620726563697069656e7473206d7573742062652067726560448201527f61746572207468616e203000000000000000000000000000000000000000000060648201526084016105f9565b601f811115610da45760405162461bcd60e51b815260206004820152601360248201527f746f6f206d616e7920726563697069656e74730000000000000000000000000060448201526064016105f9565b808214610e195760405162461bcd60e51b815260206004820152603660248201527f6c656e677468206f6620726563697069656e747320616e64207061796d656e7460448201527f73496e4a75656c7320646964206e6f74206d617463680000000000000000000060648201526084016105f9565b60005b81811015610f5c576065546001600160a01b031663a9059cbb878784818110610e4757610e47613baf565b9050602002016020810190610e5c919061351e565b868685818110610e6e57610e6e613baf565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af1158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190613ea2565b610f4a5760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e6473000000000000000000000000000060448201526064016105f9565b80610f5481613e70565b915050610e1c565b505050505050565b65ffffffffffff811660008181526074602081815260408084208151608081018352815463ffffffff8116825262ffffff6401000000008204168286015261ffff670100000000000000820416938201939093526001600160a01b03690100000000000000000084048116606083810191825298909752949093527fffffff0000000000000000000000000000000000000000000000000000000000909116905591511633146110575760608101516040517f8e30e8230000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201523360248201526044016105f9565b607054815160009161106e9163ffffffff16613ec4565b90506000826020015162ffffff16436110879190613ee3565b90508082106110cb576040517f15ad27c3000000000000000000000000000000000000000000000000000000008152600481018390524360248201526044016105f9565b6001600160401b0382111561110f576040517f058ddf02000000000000000000000000000000000000000000000000000000008152600481018390526024016105f9565b6000828152606f602090815260408083208287015162ffffff16845290915290205461113f90869085908561270a565b95945050505050565b60685460ff161561116c5760405163769dd35360e11b815260040160405180910390fd5b6001600160401b0381166000908152606960205260409020546001600160a01b03166111ab57604051630fb532db60e11b815260040160405180910390fd5b6001600160401b0381166000908152606960205260409020600101546001600160a01b03163314611231576001600160401b038116600090815260696020526040908190206001015490517fd084e9750000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024016105f9565b6001600160401b0381166000818152606960209081526040918290208054336001600160a01b0319808316821784556001909301805490931690925583516001600160a01b03909116808252928101919091529092917f6f1dc65165ffffedfd8e507b4a0f1fcfdada045ed11f6c26ba27cedfe87802f0910160405180910390a25050565b6112be613377565b6040805161010081019182905290607390600890826000855b82829054906101000a900462ffffff1662ffffff16815260200190600301906020826002010492830192600103820291508084116112d75790505050505050905090565b606c546001600160a01b031633146113685760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105f9565b6113756073826008613396565b5050565b6113816121dd565b60005b81811015611403576000606b60008585858181106113a4576113a4613baf565b90506020020160208101906113b9919061351e565b6001600160a01b031681526020810191909152604001600020805467ffffffffffffffff19166001600160401b0392909216919091179055806113fb81613e70565b915050611384565b505050565b6001600160401b03821660009081526069602052604090205482906001600160a01b03168061144a57604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b0382161461147e57604051636c51fda960e11b81526001600160a01b03821660048201526024016105f9565b60685460ff16156114a25760405163769dd35360e11b815260040160405180910390fd5b6001600160a01b03831660009081526067602090815260408083206001600160401b0380891685529252822054169003611522576040517ff0019fe60000000000000000000000000000000000000000000000000000000081526001600160401b03851660048201526001600160a01b03841660248201526044016105f9565b6001600160401b03841660009081526069602090815260408083206002018054825181850281018501909352808352919290919083018282801561158f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611571575b505050505090506000600182516115a69190613ee3565b905060005b82518110156116cc57856001600160a01b03168382815181106115d0576115d0613baf565b60200260200101516001600160a01b0316036116ba5760008383815181106115fa576115fa613baf565b6020026020010151905080606960008a6001600160401b03166001600160401b03168152602001908152602001600020600201838154811061163e5761163e613baf565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394909416939093179092556001600160401b038a16815260699091526040902060020180548061169257611692613efa565b600082815260209020810160001990810180546001600160a01b0319169055019055506116cc565b806116c481613e70565b9150506115ab565b506001600160a01b03851660008181526067602090815260408083206001600160401b038b1680855290835292819020805467ffffffffffffffff191690555192835290917f182bff9831466789164ca77075fffd84916d35a8180ba73c27e45634549b445b91015b60405180910390a2505050505050565b60685460009060ff161561176c5760405163769dd35360e11b815260040160405180910390fd5b60658054600160a01b90046001600160401b031690601461178c83613f10565b82546101009290920a6001600160401b03818102199093169183160217909155606554600160a01b90041690506000806040519080825280602002602001820160405280156117e5578160200160208202803683370190505b50604080518082018252600080825260208083018281526001600160401b03888116808552606a84528685209551865493516001600160601b039091166001600160a01b0319948516176c01000000000000000000000000919093160291909117909455845160608101865233815280830184815281870188815295855260698452959093208351815483166001600160a01b03918216178255955160018201805490931696169590951790559151805194955090936118ab9260028501920190613434565b50506040513381526001600160401b03841691507f464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf9060200160405180910390a250905090565b6001600160401b038116600090815260696020526040812054819081906060906001600160a01b031661193857604051630fb532db60e11b815260040160405180910390fd5b6001600160401b038086166000908152606a602090815260408083205460698352928190208054600290910180548351818602810186019094528084526001600160601b038616966c01000000000000000000000000909604909516946001600160a01b039092169390929183918301828280156119df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119c1575b5050505050905093509350935093509193509193565b60685460ff1615611a195760405163769dd35360e11b815260040160405180910390fd5b6065546001600160a01b03163314611a5d576040517f44b0e3c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208114611a97576040517f8129bbcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611aa58284018461376e565b6001600160401b0381166000908152606960205260409020549091506001600160a01b0316611ae757604051630fb532db60e11b815260040160405180910390fd5b6001600160401b0381166000908152606a6020526040812080546001600160601b031691869190611b188385613f2c565b92506101000a8154816001600160601b0302191690836001600160601b0316021790555084606660008282829054906101000a90046001600160601b0316611b609190613f2c565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550816001600160401b03167fd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8828784611bbc9190613f57565b60408051928352602083019190915201611735565b6001600160401b03821660009081526069602052604090205482906001600160a01b031680611c1357604051630fb532db60e11b815260040160405180910390fd5b336001600160a01b03821614611c4757604051636c51fda960e11b81526001600160a01b03821660048201526024016105f9565b60685460ff1615611c6b5760405163769dd35360e11b815260040160405180910390fd5b6106c5848461290f565b600054610100900460ff1615808015611c955750600054600160ff909116105b80611caf5750303b158015611caf575060005460ff166001145b611d215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105f9565b6000805460ff191660011790558015611d44576000805461ff0019166101001790555b611d4d82612c4e565b82600003611d87576040517f2abc297900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60708390556000611d988443613f85565b9050600081607054611daa9190613ee3565b9050611db68143613f57565b60715550508015611403576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600080600080611e158786612cdc565b92509250925065ffffffffffff831660009081526074602090815260409182902084518154928601518487015160608801516001600160a01b03166901000000000000000000027fffffff0000000000000000000000000000000000000000ffffffffffffffffff61ffff90921667010000000000000002919091167fffffff00000000000000000000000000000000000000000000ffffffffffffff62ffffff9093166401000000000266ffffffffffffff1990961663ffffffff90941693909317949094171617919091179055516001600160401b038216907fc334d6f57be304c8192da2e39220c48e35f7e9afa16c541e68a6a859eff4dbc590611f2890889062ffffff91909116815260200190565b60405180910390a250909150505b9392505050565b611f456121dd565b6001600160a01b038116611fc15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105f9565b611fca816126b8565b50565b6000806000611fdc8787612cdc565b925050915060006040518060c001604052808465ffffffffffff1681526020018961ffff168152602001336001600160a01b031681526020018681526020018a6001600160401b031681526020018763ffffffff166001600160601b0316815250905081878a836040516020016120569493929190613fe6565b60408051601f19818403018152828252805160209182012065ffffffffffff87166000908152606d909252919020557fa62e84e206cb87e2f6896795353c5358ff3d415d0bccc24e45c5fad83e17d03c906120b89084908a908d908690613fe6565b60405180910390a15090979650505050505050565b606c546001600160a01b0316331461211a5760405162461bcd60e51b815260206004820152601060248201526f31b0b6361039b2ba283937b23ab1b2b960811b60448201526064016105f9565b60655460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af115801561216d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121919190613ea2565b6113755760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e742066756e6473000000000000000000000000000060448201526064016105f9565b6033546001600160a01b03163314610ad15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f9565b82516001600160401b03808416911611156122945782516040517f012d824d0000000000000000000000000000000000000000000000000000000081526001600160401b03808516600483015290911660248201526044016105f9565b604083015151516000901580156122b2575060408401515160200151155b156122ea575082516001600160401b03166000908152606f602090815260408083208287015162ffffff168452909152902054612344565b83604001516040516020016122ff9190614089565b60408051601f19818403018152918152815160209283012086516001600160401b03166000908152606f84528281208885015162ffffff168252909352912081905590505b6060840151516000816001600160401b03811115612364576123646139b8565b60405190808252806020026020018201604052801561238d578160200160208202803683370190505b5090506000826001600160401b038111156123aa576123aa6139b8565b6040519080825280601f01601f1916602001820160405280156123d4576020820181803683370190505b5090506000836001600160401b038111156123f1576123f16139b8565b60405190808252806020026020018201604052801561242457816020015b606081526020019060019003908161240f5790505b5090506000805b858110156125b65760008a60600151828151811061244b5761244b613baf565b6020026020010151905061245f818a612fa8565b6124ce576040518060400160405280600b81526020017f756e64657266756e646564000000000000000000000000000000000000000000815250848461ffff16815181106124af576124af613baf565b602002602001018190525082806124c590613e4f565b935050506125a4565b6000806124e58d600001518e602001518c86612fb1565b9150915081156125245780868661ffff168151811061250657612506613baf565b6020026020010181905250848061251c90613e4f565b95505061256b565b600160f81b87858151811061253b5761253b613baf565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b825151885189908690811061258257612582613baf565b602002602001019065ffffffffffff16908165ffffffffffff16815250505050505b806125ae81613e70565b91505061242b565b50606089015151156126ad5760008161ffff166001600160401b038111156125e0576125e06139b8565b60405190808252806020026020018201604052801561261357816020015b60608152602001906001900390816125fe5790505b50905060005b8261ffff1681101561266f5783818151811061263757612637613baf565b602002602001015182828151811061265157612651613baf565b6020026020010181905250808061266790613e70565b915050612619565b507f47ddf7bb0cbd94c1b43c5097f1352a80db0ceb3696f029d32b24f32cd631d2b78585836040516126a3939291906140bc565b60405180910390a1505b505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60608261275c576040517fc7d41b1b00000000000000000000000000000000000000000000000000000000815265ffffffffffff861660048201526001600160401b03831660248201526044016105f9565b6040805165ffffffffffff8716602080830191909152865163ffffffff168284015286015162ffffff166060808301919091529186015161ffff166080820152908501516001600160a01b031660a082015260c0810184905260009060e0016040516020818303038152906040528051906020012090506103e8856040015161ffff161115612812576040808601519051634a90778560e01b815261ffff90911660048201526103e860248201526044016105f9565b6000856040015161ffff166001600160401b03811115612834576128346139b8565b60405190808252806020026020018201604052801561285d578160200160208202803683370190505b50905060005b866040015161ffff168161ffff1610156129045782816040516020016128b892919091825260f01b7fffff00000000000000000000000000000000000000000000000000000000000016602082015260220190565b6040516020818303038152906040528051906020012060001c828261ffff16815181106128e7576128e7613baf565b6020908102919091010152806128fc81613e4f565b915050612863565b509695505050505050565b60685460ff16156129335760405163769dd35360e11b815260040160405180910390fd5b6001600160401b0382166000908152606960209081526040808320815160608101835281546001600160a01b039081168252600183015416818501526002820180548451818702810187018652818152929593948601938301828280156129c357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116129a5575b505050919092525050506001600160401b038085166000908152606a602090815260408083208151808301909252546001600160601b0381168083526c01000000000000000000000000909104909416918101919091529293505b836040015151811015612a9f576067600085604001518381518110612a4557612a45613baf565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081206001600160401b038a1682529092529020805467ffffffffffffffff1916905580612a9781613e70565b915050612a1e565b506001600160401b038516600090815260696020526040812080546001600160a01b03199081168255600182018054909116905590612ae16002830182613489565b50506001600160401b0385166000908152606a6020526040812080546001600160a01b031916905560668054839290612b249084906001600160601b0316614162565b82546101009290920a6001600160601b0381810219909316918316021790915560655460405163a9059cbb60e01b81526001600160a01b03888116600483015292851660248201529116915063a9059cbb906044016020604051808303816000875af1158015612b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bbc9190613ea2565b612bf2576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516001600160a01b03861681526001600160601b03831660208201526001600160401b038716917fe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd49815910160405180910390a25050505050565b600054610100900460ff16612cb95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105f9565b606580546001600160a01b0319166001600160a01b038316179055611fca613244565b604080516080810182526000808252602082018190529181018290526060810182905260006103e88561ffff161115612d3657604051634a90778560e01b815261ffff861660048201526103e860248201526044016105f9565b8461ffff16600003612d74576040517f08fad2a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060705443612d849190613f85565b905060008160705443612d979190613f57565b612da19190613ee3565b9050600060705482612db3919061418a565b905063ffffffff8110612df2576040517f7b2a523000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820182526072805465ffffffffffff16825282516101008101938490528493600093929160208401916073906008908288855b82829054906101000a900462ffffff1662ffffff1681526020019060030190602082600201049283019260010382029150808411612e2a57905050505091909252505081519192505065ffffffffffff80821610612eb4576040517f2b4655b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ebf81600161419e565b6072805465ffffffffffff191665ffffffffffff9290921691909117905560005b6008811015612f26578a62ffffff1683602001518260088110612f0557612f05613baf565b602002015162ffffff1614612f265780612f1e81613e70565b915050612ee0565b60088110612f675760208301516040517fc4f769b00000000000000000000000000000000000000000000000000000000081526105f9918d916004016141bf565b506040805160808101825263ffffffff909416845262ffffff8b16602085015261ffff8c169084015233606084015297509095509193505050509250925092565b60015b92915050565b600060606000607054876001600160401b0316612fce919061418a565b845160808101516040519293509091600091612ff2918b918b918690602001613fe6565b60408051601f198184030181529181528151602092830120845165ffffffffffff166000908152606d909352912054909150811461306e5760016040518060400160405280601081526020017f756e6b6e6f776e2063616c6c6261636b000000000000000000000000000000008152509450945050505061323b565b6040805160808101825263ffffffff8516815262ffffff8a1660208083019190915284015161ffff1681830152908301516001600160a01b0316606082015282516000906130be90838b8e61270a565b60608084015186519187015160405193945090926000927f5a47dd710000000000000000000000000000000000000000000000000000000092613106928791906024016141d9565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252606e805466ff000000000000191666010000000000001790558b5160a00151918801519092506000916131a4916001600160601b0390911690846132b7565b606e805466ff00000000000019169055905080156131f6575050935165ffffffffffff166000908152606d6020908152604080832083905580519182019052818152909750955061323b945050505050565b60016040518060400160405280601081526020017f657865637574696f6e206661696c6564000000000000000000000000000000008152509950995050505050505050505b94509492505050565b600054610100900460ff166132af5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105f9565b610ad1613303565b60005a6113888110156132c957600080fd5b6113888103905084604082048203116132e157600080fd5b50823b6132ed57600080fd5b60008083516020850160008789f1949350505050565b600054610100900460ff1661336e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105f9565b610ad1336126b8565b6040518061010001604052806008906020820280368337509192915050565b6001830191839082156134245791602002820160005b838211156133f357833562ffffff1683826101000a81548162ffffff021916908362ffffff16021790555092602001926003016020816002010492830192600103026133ac565b80156134225782816101000a81549062ffffff02191690556003016020816002010492830192600103026133f3565b505b506134309291506134a3565b5090565b828054828255906000526020600020908101928215613424579160200282015b8281111561342457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613454565b5080546000825590600052602060002090810190611fca91905b5b8082111561343057600081556001016134a4565b80356001600160401b03811681146134cf57600080fd5b919050565b80356001600160a01b03811681146134cf57600080fd5b600080604083850312156134fe57600080fd5b613507836134b8565b9150613515602084016134d4565b90509250929050565b60006020828403121561353057600080fd5b611f36826134d4565b60008083601f84011261354b57600080fd5b5081356001600160401b0381111561356257600080fd5b6020830191508360208260051b850101111561357d57600080fd5b9250929050565b60008060008060006080868803121561359c57600080fd5b85356001600160401b038111156135b257600080fd5b6135be88828901613539565b909650945050602086013577ffffffffffffffffffffffffffffffffffffffffffffffff811681146135ef57600080fd5b92506135fd604087016134b8565b949793965091946060013592915050565b602080825282518282018190526000919060409081850190868401855b8281101561365e57815180516001600160401b0316855286015162ffffff1686850152928401929085019060010161362b565b5091979650505050505050565b60006020828403121561367d57600080fd5b5035919050565b6000806000806040858703121561369a57600080fd5b84356001600160401b03808211156136b157600080fd5b6136bd88838901613539565b909650945060208701359150808211156136d657600080fd5b506136e387828801613539565b95989497509550505050565b803565ffffffffffff811681146134cf57600080fd5b60006020828403121561371757600080fd5b611f36826136ef565b600081518084526020808501945080840160005b8381101561375057815187529582019590820190600101613734565b509495945050505050565b602081526000611f366020830184613720565b60006020828403121561378057600080fd5b611f36826134b8565b8060005b60088110156106c557815162ffffff1684526020938401939091019060010161378d565b6101008101612fab8284613789565b60006101008083850312156137d457600080fd5b8381840111156137e357600080fd5b509092915050565b600080602083850312156137fe57600080fd5b82356001600160401b0381111561381457600080fd5b61382085828601613539565b90969095509350505050565b6000608082016001600160601b038716835260206001600160401b038716818501526001600160a01b0380871660408601526080606086015282865180855260a087019150838801945060005b81811015613897578551841683529484019491840191600101613879565b50909a9950505050505050505050565b600080600080606085870312156138bd57600080fd5b6138c6856134d4565b93506020850135925060408501356001600160401b03808211156138e957600080fd5b818701915087601f8301126138fd57600080fd5b81358181111561390c57600080fd5b88602082850101111561391e57600080fd5b95989497505060200194505050565b6000806040838503121561394057600080fd5b82359150613515602084016134d4565b803561ffff811681146134cf57600080fd5b803562ffffff811681146134cf57600080fd5b60008060006060848603121561398a57600080fd5b61399384613950565b92506139a1602085016134b8565b91506139af60408501613962565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156139f0576139f06139b8565b60405290565b60405160c081016001600160401b03811182821017156139f0576139f06139b8565b604051608081016001600160401b03811182821017156139f0576139f06139b8565b604051602081016001600160401b03811182821017156139f0576139f06139b8565b604051601f8201601f191681016001600160401b0381118282101715613a8457613a846139b8565b604052919050565b600082601f830112613a9d57600080fd5b81356001600160401b03811115613ab657613ab66139b8565b613ac9601f8201601f1916602001613a5c565b818152846020838601011115613ade57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215613b1357600080fd5b613b1c866134b8565b9450613b2a60208701613950565b9350613b3860408701613962565b9250606086013563ffffffff81168114613b5157600080fd5b915060808601356001600160401b03811115613b6c57600080fd5b613b7888828901613a8c565b9150509295509295909350565b60008060408385031215613b9857600080fd5b613ba1836134d4565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112613bdb57600080fd5b9190910192915050565b80356001600160601b03811681146134cf57600080fd5b600082601f830112613c0d57600080fd5b813560206001600160401b0380831115613c2957613c296139b8565b8260051b613c38838201613a5c565b9384528581018301938381019088861115613c5257600080fd5b84880192505b85831015613d5857823584811115613c6f57600080fd5b8801601f196040828c0382011215613c8657600080fd5b613c8e6139ce565b8783013587811115613c9f57600080fd5b830160c0818e0384011215613cb357600080fd5b613cbb6139f6565b9250613cc88982016136ef565b8352613cd660408201613950565b89840152613ce6606082016134d4565b6040840152608081013588811115613cfd57600080fd5b613d0b8e8b83850101613a8c565b606085015250613d1d60a082016134b8565b6080840152613d2e60c08201613be5565b60a084015250818152613d4360408401613be5565b81890152845250509184019190840190613c58565b98975050505050505050565b600081360360a0811215613d7757600080fd5b613d7f613a18565b613d88846134b8565b81526020613d97818601613962565b828201526040603f1984011215613dad57600080fd5b613db5613a3a565b925036605f860112613dc657600080fd5b613dce6139ce565b806080870136811115613de057600080fd5b604088015b81811015613dfc5780358452928401928401613de5565b50908552604084019490945250509035906001600160401b03821115613e2157600080fd5b613e2d36838601613bfc565b60608201529392505050565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818103613e6657613e66613e39565b6001019392505050565b600060018201613e8257613e82613e39565b5060010190565b600060208284031215613e9b57600080fd5b5051919050565b600060208284031215613eb457600080fd5b81518015158114611f3657600080fd5b6000816000190483118215151615613ede57613ede613e39565b500290565b600082821015613ef557613ef5613e39565b500390565b634e487b7160e01b600052603160045260246000fd5b60006001600160401b03808316818103613e6657613e66613e39565b60006001600160601b03808316818516808303821115613f4e57613f4e613e39565b01949350505050565b60008219821115613f6a57613f6a613e39565b500190565b634e487b7160e01b600052601260045260246000fd5b600082613f9457613f94613f6f565b500690565b6000815180845260005b81811015613fbf57602081850181015186830182015201613fa3565b81811115613fd1576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160401b03808716835262ffffff8616602084015280851660408401526080606084015265ffffffffffff845116608084015261ffff60208501511660a08401526001600160a01b0360408501511660c0840152606084015160c060e0850152614059610140850182613f99565b60808601519092166101008501525060a0909301516001600160601b031661012090920191909152509392505050565b815160408201908260005b60028110156140b3578251825260209283019290910190600101614094565b50505092915050565b606080825284519082018190526000906020906080840190828801845b828110156140fd57815165ffffffffffff16845292840192908401906001016140d9565b505050838103828501526141118187613f99565b905083810360408501528085518083528383019150838160051b84010184880160005b8381101561389757601f19868403018552614150838351613f99565b94870194925090860190600101614134565b60006001600160601b038381169083168181101561418257614182613e39565b039392505050565b60008261419957614199613f6f565b500490565b600065ffffffffffff808316818516808303821115613f4e57613f4e613e39565b62ffffff831681526101208101611f366020830184613789565b65ffffffffffff841681526060602082015260006141fa6060830185613720565b828103604084015261420c8185613f99565b969550505050505056fea264697066735822122084d4988dd2576ec9089997fb26bd0ec8d7bd43f319d9abe086d171015e5a68ea64736f6c634300080f0033",
}

var TestVRFCoordinatorV2ABI = TestVRFCoordinatorV2MetaData.ABI

var TestVRFCoordinatorV2Bin = TestVRFCoordinatorV2MetaData.Bin

func DeployTestVRFCoordinatorV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TestVRFCoordinatorV2, error) {
	parsed, err := TestVRFCoordinatorV2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestVRFCoordinatorV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestVRFCoordinatorV2{TestVRFCoordinatorV2Caller: TestVRFCoordinatorV2Caller{contract: contract}, TestVRFCoordinatorV2Transactor: TestVRFCoordinatorV2Transactor{contract: contract}, TestVRFCoordinatorV2Filterer: TestVRFCoordinatorV2Filterer{contract: contract}}, nil
}

type TestVRFCoordinatorV2 struct {
	address common.Address
	abi     abi.ABI
	TestVRFCoordinatorV2Caller
	TestVRFCoordinatorV2Transactor
	TestVRFCoordinatorV2Filterer
}

type TestVRFCoordinatorV2Caller struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV2Transactor struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV2Filterer struct {
	contract *bind.BoundContract
}

type TestVRFCoordinatorV2Session struct {
	Contract     *TestVRFCoordinatorV2
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type TestVRFCoordinatorV2CallerSession struct {
	Contract *TestVRFCoordinatorV2Caller
	CallOpts bind.CallOpts
}

type TestVRFCoordinatorV2TransactorSession struct {
	Contract     *TestVRFCoordinatorV2Transactor
	TransactOpts bind.TransactOpts
}

type TestVRFCoordinatorV2Raw struct {
	Contract *TestVRFCoordinatorV2
}

type TestVRFCoordinatorV2CallerRaw struct {
	Contract *TestVRFCoordinatorV2Caller
}

type TestVRFCoordinatorV2TransactorRaw struct {
	Contract *TestVRFCoordinatorV2Transactor
}

func NewTestVRFCoordinatorV2(address common.Address, backend bind.ContractBackend) (*TestVRFCoordinatorV2, error) {
	abi, err := abi.JSON(strings.NewReader(TestVRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindTestVRFCoordinatorV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2{address: address, abi: abi, TestVRFCoordinatorV2Caller: TestVRFCoordinatorV2Caller{contract: contract}, TestVRFCoordinatorV2Transactor: TestVRFCoordinatorV2Transactor{contract: contract}, TestVRFCoordinatorV2Filterer: TestVRFCoordinatorV2Filterer{contract: contract}}, nil
}

func NewTestVRFCoordinatorV2Caller(address common.Address, caller bind.ContractCaller) (*TestVRFCoordinatorV2Caller, error) {
	contract, err := bindTestVRFCoordinatorV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2Caller{contract: contract}, nil
}

func NewTestVRFCoordinatorV2Transactor(address common.Address, transactor bind.ContractTransactor) (*TestVRFCoordinatorV2Transactor, error) {
	contract, err := bindTestVRFCoordinatorV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2Transactor{contract: contract}, nil
}

func NewTestVRFCoordinatorV2Filterer(address common.Address, filterer bind.ContractFilterer) (*TestVRFCoordinatorV2Filterer, error) {
	contract, err := bindTestVRFCoordinatorV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2Filterer{contract: contract}, nil
}

func bindTestVRFCoordinatorV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestVRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFCoordinatorV2.Contract.TestVRFCoordinatorV2Caller.contract.Call(opts, result, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TestVRFCoordinatorV2Transactor.contract.Transfer(opts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TestVRFCoordinatorV2Transactor.contract.Transact(opts, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestVRFCoordinatorV2.Contract.contract.Call(opts, result, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.contract.Transfer(opts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.contract.Transact(opts, method, params...)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) MAXCONSUMERS(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "MAX_CONSUMERS")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) MAXCONSUMERS() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MAXCONSUMERS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) MAXCONSUMERS() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MAXCONSUMERS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "NUM_CONF_DELAYS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFCoordinatorV2.Contract.NUMCONFDELAYS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) NUMCONFDELAYS() (uint8, error) {
	return _TestVRFCoordinatorV2.Contract.NUMCONFDELAYS(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) Link(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "_link")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Link() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Link(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) Link() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Link(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) AcceptedTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "acceptedTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) AcceptedTokens(arg0 *big.Int) (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptedTokens(&_TestVRFCoordinatorV2.CallOpts, arg0)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) AcceptedTokens(arg0 *big.Int) (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptedTokens(&_TestVRFCoordinatorV2.CallOpts, arg0)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getConfirmationDelays")

	if err != nil {
		return *new([8]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([8]*big.Int)).(*[8]*big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetConfirmationDelays() ([8]*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetConfirmationDelays(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetConfirmationDelays() ([8]*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetConfirmationDelays(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetCurrentSubId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getCurrentSubId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetCurrentSubId() (uint64, error) {
	return _TestVRFCoordinatorV2.Contract.GetCurrentSubId(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetCurrentSubId() (uint64, error) {
	return _TestVRFCoordinatorV2.Contract.GetCurrentSubId(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetProducer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getProducer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetProducer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.GetProducer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetProducer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.GetProducer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

	error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getSubscription", subId)

	outstruct := new(GetSubscription)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ReqCount = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Owner = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Consumers = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)

	return *outstruct, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _TestVRFCoordinatorV2.Contract.GetSubscription(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetSubscription(subId uint64) (GetSubscription,

	error) {
	return _TestVRFCoordinatorV2.Contract.GetSubscription(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetTotalBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getTotalBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetTotalBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetTotalBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "getTotalLinkBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) GetTotalLinkBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalLinkBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) GetTotalLinkBalance() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.GetTotalLinkBalance(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) IStartSlot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "i_StartSlot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) IStartSlot() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IStartSlot(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) IStartSlot() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IStartSlot(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "i_beaconPeriodBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) IBeaconPeriodBlocks() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IBeaconPeriodBlocks(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) IBeaconPeriodBlocks() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.IBeaconPeriodBlocks(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) MaxNumWords(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "maxNumWords")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) MaxNumWords() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.MaxNumWords(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) MaxNumWords() (*big.Int, error) {
	return _TestVRFCoordinatorV2.Contract.MaxNumWords(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) MinDelay(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "minDelay")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) MinDelay() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MinDelay(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) MinDelay() (uint16, error) {
	return _TestVRFCoordinatorV2.Contract.MinDelay(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Owner() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Owner(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) Owner() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Owner(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "pendingRequestExists", subId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) PendingRequestExists(subId uint64) (bool, error) {
	return _TestVRFCoordinatorV2.Contract.PendingRequestExists(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) PendingRequestExists(subId uint64) (bool, error) {
	return _TestVRFCoordinatorV2.Contract.PendingRequestExists(&_TestVRFCoordinatorV2.CallOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Caller) Producer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TestVRFCoordinatorV2.contract.Call(opts, &out, "producer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Producer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Producer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2CallerSession) Producer() (common.Address, error) {
	return _TestVRFCoordinatorV2.Contract.Producer(&_TestVRFCoordinatorV2.CallOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "acceptSubscriptionOwnerTransfer", subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) AcceptSubscriptionOwnerTransfer(subId uint64) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AcceptSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "addConsumer", subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AddConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) AddConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.AddConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "batchTransferLink", recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.BatchTransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) BatchTransferLink(recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.BatchTransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipients, paymentsInJuels)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "cancelSubscription", subId, to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CancelSubscription(&_TestVRFCoordinatorV2.TransactOpts, subId, to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) CancelSubscription(subId uint64, to common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CancelSubscription(&_TestVRFCoordinatorV2.TransactOpts, subId, to)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "createSubscription")
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) CreateSubscription() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CreateSubscription(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) CreateSubscription() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.CreateSubscription(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "forgetConsumerSubscriptionID", consumers)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ForgetConsumerSubscriptionID(&_TestVRFCoordinatorV2.TransactOpts, consumers)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) ForgetConsumerSubscriptionID(consumers []common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ForgetConsumerSubscriptionID(&_TestVRFCoordinatorV2.TransactOpts, consumers)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) Initialize(opts *bind.TransactOpts, beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "initialize", beaconPeriodBlocksArg, linkToken)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) Initialize(beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.Initialize(&_TestVRFCoordinatorV2.TransactOpts, beaconPeriodBlocksArg, linkToken)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) Initialize(beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.Initialize(&_TestVRFCoordinatorV2.TransactOpts, beaconPeriodBlocksArg, linkToken)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "onTokenTransfer", arg0, amount, data)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.OnTokenTransfer(&_TestVRFCoordinatorV2.TransactOpts, arg0, amount, data)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) OnTokenTransfer(arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.OnTokenTransfer(&_TestVRFCoordinatorV2.TransactOpts, arg0, amount, data)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "processVRFOutputs", vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ProcessVRFOutputs(&_TestVRFCoordinatorV2.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) ProcessVRFOutputs(vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.ProcessVRFOutputs(&_TestVRFCoordinatorV2.TransactOpts, vrfOutputs, juelsPerFeeCoin, blockHeight, arg3)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "redeemRandomness", requestID)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RedeemRandomness(&_TestVRFCoordinatorV2.TransactOpts, requestID)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RedeemRandomness(requestID *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RedeemRandomness(&_TestVRFCoordinatorV2.TransactOpts, requestID)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RegisterToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "registerToken", token)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RegisterToken(token common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RegisterToken(&_TestVRFCoordinatorV2.TransactOpts, token)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RegisterToken(token common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RegisterToken(&_TestVRFCoordinatorV2.TransactOpts, token)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "removeConsumer", subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RemoveConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RemoveConsumer(subId uint64, consumer common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RemoveConsumer(&_TestVRFCoordinatorV2.TransactOpts, subId, consumer)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "renounceOwnership")
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RenounceOwnership(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RenounceOwnership(&_TestVRFCoordinatorV2.TransactOpts)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "requestRandomness", numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomness(&_TestVRFCoordinatorV2.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RequestRandomness(numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomness(&_TestVRFCoordinatorV2.TransactOpts, numWords, subID, confirmationDelayArg)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "requestRandomnessFulfillment", subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomnessFulfillment(&_TestVRFCoordinatorV2.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RequestRandomnessFulfillment(subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestRandomnessFulfillment(&_TestVRFCoordinatorV2.TransactOpts, subID, numWords, confirmationDelayArg, callbackGasLimit, arguments)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "requestSubscriptionOwnerTransfer", subId, newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId, newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) RequestSubscriptionOwnerTransfer(subId uint64, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.RequestSubscriptionOwnerTransfer(&_TestVRFCoordinatorV2.TransactOpts, subId, newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "setConfirmationDelays", confDelays)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetConfirmationDelays(&_TestVRFCoordinatorV2.TransactOpts, confDelays)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) SetConfirmationDelays(confDelays [8]*big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetConfirmationDelays(&_TestVRFCoordinatorV2.TransactOpts, confDelays)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "setProducer", addr)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetProducer(&_TestVRFCoordinatorV2.TransactOpts, addr)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) SetProducer(addr common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.SetProducer(&_TestVRFCoordinatorV2.TransactOpts, addr)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "transferLink", recipient, juelsAmount)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipient, juelsAmount)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) TransferLink(recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferLink(&_TestVRFCoordinatorV2.TransactOpts, recipient, juelsAmount)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.contract.Transact(opts, "transferOwnership", newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferOwnership(&_TestVRFCoordinatorV2.TransactOpts, newOwner)
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TestVRFCoordinatorV2.Contract.TransferOwnership(&_TestVRFCoordinatorV2.TransactOpts, newOwner)
}

type TestVRFCoordinatorV2InitializedIterator struct {
	Event *TestVRFCoordinatorV2Initialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2InitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2Initialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2Initialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2InitializedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2InitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2Initialized struct {
	Version uint8
	Raw     types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterInitialized(opts *bind.FilterOpts) (*TestVRFCoordinatorV2InitializedIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2InitializedIterator{contract: _TestVRFCoordinatorV2.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2Initialized) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2Initialized)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseInitialized(log types.Log) (*TestVRFCoordinatorV2Initialized, error) {
	event := new(TestVRFCoordinatorV2Initialized)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2OwnershipTransferredIterator struct {
	Event *TestVRFCoordinatorV2OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TestVRFCoordinatorV2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2OwnershipTransferredIterator{contract: _TestVRFCoordinatorV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2OwnershipTransferred)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseOwnershipTransferred(log types.Log) (*TestVRFCoordinatorV2OwnershipTransferred, error) {
	event := new(TestVRFCoordinatorV2OwnershipTransferred)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2RandomWordsFulfilledIterator struct {
	Event *TestVRFCoordinatorV2RandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2RandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2RandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2RandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2RandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2RandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2RandomWordsFulfilled struct {
	RequestIDs            []*big.Int
	SuccessfulFulfillment []byte
	TruncatedErrorData    [][]byte
	Raw                   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomWordsFulfilledIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2RandomWordsFulfilledIterator{contract: _TestVRFCoordinatorV2.contract, event: "RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2RandomWordsFulfilled)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseRandomWordsFulfilled(log types.Log) (*TestVRFCoordinatorV2RandomWordsFulfilled, error) {
	event := new(TestVRFCoordinatorV2RandomWordsFulfilled)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator struct {
	Event *TestVRFCoordinatorV2RandomnessFulfillmentRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2RandomnessFulfillmentRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	SubID                  uint64
	Callback               VRFBeaconTypesCallback
	Raw                    types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator{contract: _TestVRFCoordinatorV2.contract, event: "RandomnessFulfillmentRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessFulfillmentRequested) (event.Subscription, error) {

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "RandomnessFulfillmentRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseRandomnessFulfillmentRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessFulfillmentRequested, error) {
	event := new(TestVRFCoordinatorV2RandomnessFulfillmentRequested)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessFulfillmentRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2RandomnessRequestedIterator struct {
	Event *TestVRFCoordinatorV2RandomnessRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2RandomnessRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2RandomnessRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2RandomnessRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2RandomnessRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2RandomnessRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2RandomnessRequested struct {
	NextBeaconOutputHeight uint64
	ConfDelay              *big.Int
	Raw                    types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*TestVRFCoordinatorV2RandomnessRequestedIterator, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2RandomnessRequestedIterator{contract: _TestVRFCoordinatorV2.contract, event: "RandomnessRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error) {

	var nextBeaconOutputHeightRule []interface{}
	for _, nextBeaconOutputHeightItem := range nextBeaconOutputHeight {
		nextBeaconOutputHeightRule = append(nextBeaconOutputHeightRule, nextBeaconOutputHeightItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "RandomnessRequested", nextBeaconOutputHeightRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2RandomnessRequested)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseRandomnessRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessRequested, error) {
	event := new(TestVRFCoordinatorV2RandomnessRequested)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "RandomnessRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionCanceledIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionCanceled struct {
	SubId  uint64
	To     common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCanceledIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionCanceledIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCanceled, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCanceled", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionCanceled)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionCanceled(log types.Log) (*TestVRFCoordinatorV2SubscriptionCanceled, error) {
	event := new(TestVRFCoordinatorV2SubscriptionCanceled)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionConsumerAddedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionConsumerAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerAddedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionConsumerAdded struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerAddedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionConsumerAddedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionConsumerAdded", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionConsumerAdded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionConsumerAdded(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerAdded, error) {
	event := new(TestVRFCoordinatorV2SubscriptionConsumerAdded)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionConsumerRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionConsumerRemoved struct {
	SubId    uint64
	Consumer common.Address
	Raw      types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionConsumerRemoved", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionConsumerRemoved", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionConsumerRemoved(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerRemoved, error) {
	event := new(TestVRFCoordinatorV2SubscriptionConsumerRemoved)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionCreatedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionCreated struct {
	SubId uint64
	Owner common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCreatedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionCreatedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCreated, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCreated", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionCreated)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionCreated(log types.Log) (*TestVRFCoordinatorV2SubscriptionCreated, error) {
	event := new(TestVRFCoordinatorV2SubscriptionCreated)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionFundedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionFunded struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionFundedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionFundedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionFunded, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionFunded", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionFunded)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionFunded(log types.Log) (*TestVRFCoordinatorV2SubscriptionFunded, error) {
	event := new(TestVRFCoordinatorV2SubscriptionFunded)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionOwnerTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferRequested struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionOwnerTransferRequested", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionOwnerTransferRequested", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionOwnerTransferRequested(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, error) {
	event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferRequested)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator struct {
	Event *TestVRFCoordinatorV2SubscriptionOwnerTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Error() error {
	return it.fail
}

func (it *TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type TestVRFCoordinatorV2SubscriptionOwnerTransferred struct {
	SubId uint64
	From  common.Address
	To    common.Address
	Raw   types.Log
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return &TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator{contract: _TestVRFCoordinatorV2.contract, event: "SubscriptionOwnerTransferred", logs: logs, sub: sub}, nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error) {

	var subIdRule []interface{}
	for _, subIdItem := range subId {
		subIdRule = append(subIdRule, subIdItem)
	}

	logs, sub, err := _TestVRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionOwnerTransferred", subIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
				if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2Filterer) ParseSubscriptionOwnerTransferred(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferred, error) {
	event := new(TestVRFCoordinatorV2SubscriptionOwnerTransferred)
	if err := _TestVRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionOwnerTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetSubscription struct {
	Balance   *big.Int
	ReqCount  uint64
	Owner     common.Address
	Consumers []common.Address
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _TestVRFCoordinatorV2.abi.Events["Initialized"].ID:
		return _TestVRFCoordinatorV2.ParseInitialized(log)
	case _TestVRFCoordinatorV2.abi.Events["OwnershipTransferred"].ID:
		return _TestVRFCoordinatorV2.ParseOwnershipTransferred(log)
	case _TestVRFCoordinatorV2.abi.Events["RandomWordsFulfilled"].ID:
		return _TestVRFCoordinatorV2.ParseRandomWordsFulfilled(log)
	case _TestVRFCoordinatorV2.abi.Events["RandomnessFulfillmentRequested"].ID:
		return _TestVRFCoordinatorV2.ParseRandomnessFulfillmentRequested(log)
	case _TestVRFCoordinatorV2.abi.Events["RandomnessRequested"].ID:
		return _TestVRFCoordinatorV2.ParseRandomnessRequested(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionCanceled"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionCanceled(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionConsumerAdded"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionConsumerAdded(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionConsumerRemoved"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionConsumerRemoved(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionCreated"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionCreated(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionFunded"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionFunded(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionOwnerTransferRequested"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionOwnerTransferRequested(log)
	case _TestVRFCoordinatorV2.abi.Events["SubscriptionOwnerTransferred"].ID:
		return _TestVRFCoordinatorV2.ParseSubscriptionOwnerTransferred(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (TestVRFCoordinatorV2Initialized) Topic() common.Hash {
	return common.HexToHash("0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498")
}

func (TestVRFCoordinatorV2OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (TestVRFCoordinatorV2RandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0x47ddf7bb0cbd94c1b43c5097f1352a80db0ceb3696f029d32b24f32cd631d2b7")
}

func (TestVRFCoordinatorV2RandomnessFulfillmentRequested) Topic() common.Hash {
	return common.HexToHash("0xa62e84e206cb87e2f6896795353c5358ff3d415d0bccc24e45c5fad83e17d03c")
}

func (TestVRFCoordinatorV2RandomnessRequested) Topic() common.Hash {
	return common.HexToHash("0xc334d6f57be304c8192da2e39220c48e35f7e9afa16c541e68a6a859eff4dbc5")
}

func (TestVRFCoordinatorV2SubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0xe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd49815")
}

func (TestVRFCoordinatorV2SubscriptionConsumerAdded) Topic() common.Hash {
	return common.HexToHash("0x43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e0")
}

func (TestVRFCoordinatorV2SubscriptionConsumerRemoved) Topic() common.Hash {
	return common.HexToHash("0x182bff9831466789164ca77075fffd84916d35a8180ba73c27e45634549b445b")
}

func (TestVRFCoordinatorV2SubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf")
}

func (TestVRFCoordinatorV2SubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0xd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8")
}

func (TestVRFCoordinatorV2SubscriptionOwnerTransferRequested) Topic() common.Hash {
	return common.HexToHash("0x69436ea6df009049404f564eff6622cd00522b0bd6a89efd9e52a355c4a879be")
}

func (TestVRFCoordinatorV2SubscriptionOwnerTransferred) Topic() common.Hash {
	return common.HexToHash("0x6f1dc65165ffffedfd8e507b4a0f1fcfdada045ed11f6c26ba27cedfe87802f0")
}

func (_TestVRFCoordinatorV2 *TestVRFCoordinatorV2) Address() common.Address {
	return _TestVRFCoordinatorV2.address
}

type TestVRFCoordinatorV2Interface interface {
	MAXCONSUMERS(opts *bind.CallOpts) (uint16, error)

	NUMCONFDELAYS(opts *bind.CallOpts) (uint8, error)

	Link(opts *bind.CallOpts) (common.Address, error)

	AcceptedTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error)

	GetConfirmationDelays(opts *bind.CallOpts) ([8]*big.Int, error)

	GetCurrentSubId(opts *bind.CallOpts) (uint64, error)

	GetProducer(opts *bind.CallOpts) (common.Address, error)

	GetSubscription(opts *bind.CallOpts, subId uint64) (GetSubscription,

		error)

	GetTotalBalance(opts *bind.CallOpts) (*big.Int, error)

	GetTotalLinkBalance(opts *bind.CallOpts) (*big.Int, error)

	IStartSlot(opts *bind.CallOpts) (*big.Int, error)

	IBeaconPeriodBlocks(opts *bind.CallOpts) (*big.Int, error)

	MaxNumWords(opts *bind.CallOpts) (*big.Int, error)

	MinDelay(opts *bind.CallOpts) (uint16, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PendingRequestExists(opts *bind.CallOpts, subId uint64) (bool, error)

	Producer(opts *bind.CallOpts) (common.Address, error)

	AcceptSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64) (*types.Transaction, error)

	AddConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	BatchTransferLink(opts *bind.TransactOpts, recipients []common.Address, paymentsInJuels []*big.Int) (*types.Transaction, error)

	CancelSubscription(opts *bind.TransactOpts, subId uint64, to common.Address) (*types.Transaction, error)

	CreateSubscription(opts *bind.TransactOpts) (*types.Transaction, error)

	ForgetConsumerSubscriptionID(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, beaconPeriodBlocksArg *big.Int, linkToken common.Address) (*types.Transaction, error)

	OnTokenTransfer(opts *bind.TransactOpts, arg0 common.Address, amount *big.Int, data []byte) (*types.Transaction, error)

	ProcessVRFOutputs(opts *bind.TransactOpts, vrfOutputs []VRFBeaconTypesVRFOutput, juelsPerFeeCoin *big.Int, blockHeight uint64, arg3 [32]byte) (*types.Transaction, error)

	RedeemRandomness(opts *bind.TransactOpts, requestID *big.Int) (*types.Transaction, error)

	RegisterToken(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error)

	RemoveConsumer(opts *bind.TransactOpts, subId uint64, consumer common.Address) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	RequestRandomness(opts *bind.TransactOpts, numWords uint16, subID uint64, confirmationDelayArg *big.Int) (*types.Transaction, error)

	RequestRandomnessFulfillment(opts *bind.TransactOpts, subID uint64, numWords uint16, confirmationDelayArg *big.Int, callbackGasLimit uint32, arguments []byte) (*types.Transaction, error)

	RequestSubscriptionOwnerTransfer(opts *bind.TransactOpts, subId uint64, newOwner common.Address) (*types.Transaction, error)

	SetConfirmationDelays(opts *bind.TransactOpts, confDelays [8]*big.Int) (*types.Transaction, error)

	SetProducer(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error)

	TransferLink(opts *bind.TransactOpts, recipient common.Address, juelsAmount *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	FilterInitialized(opts *bind.FilterOpts) (*TestVRFCoordinatorV2InitializedIterator, error)

	WatchInitialized(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2Initialized) (event.Subscription, error)

	ParseInitialized(log types.Log) (*TestVRFCoordinatorV2Initialized, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TestVRFCoordinatorV2OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*TestVRFCoordinatorV2OwnershipTransferred, error)

	FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomWordsFulfilledIterator, error)

	WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error)

	ParseRandomWordsFulfilled(log types.Log) (*TestVRFCoordinatorV2RandomWordsFulfilled, error)

	FilterRandomnessFulfillmentRequested(opts *bind.FilterOpts) (*TestVRFCoordinatorV2RandomnessFulfillmentRequestedIterator, error)

	WatchRandomnessFulfillmentRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessFulfillmentRequested) (event.Subscription, error)

	ParseRandomnessFulfillmentRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessFulfillmentRequested, error)

	FilterRandomnessRequested(opts *bind.FilterOpts, nextBeaconOutputHeight []uint64) (*TestVRFCoordinatorV2RandomnessRequestedIterator, error)

	WatchRandomnessRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2RandomnessRequested, nextBeaconOutputHeight []uint64) (event.Subscription, error)

	ParseRandomnessRequested(log types.Log) (*TestVRFCoordinatorV2RandomnessRequested, error)

	FilterSubscriptionCanceled(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCanceledIterator, error)

	WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCanceled, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCanceled(log types.Log) (*TestVRFCoordinatorV2SubscriptionCanceled, error)

	FilterSubscriptionConsumerAdded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerAddedIterator, error)

	WatchSubscriptionConsumerAdded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerAdded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerAdded(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerAdded, error)

	FilterSubscriptionConsumerRemoved(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionConsumerRemovedIterator, error)

	WatchSubscriptionConsumerRemoved(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionConsumerRemoved, subId []uint64) (event.Subscription, error)

	ParseSubscriptionConsumerRemoved(log types.Log) (*TestVRFCoordinatorV2SubscriptionConsumerRemoved, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionCreated, subId []uint64) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*TestVRFCoordinatorV2SubscriptionCreated, error)

	FilterSubscriptionFunded(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionFundedIterator, error)

	WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionFunded, subId []uint64) (event.Subscription, error)

	ParseSubscriptionFunded(log types.Log) (*TestVRFCoordinatorV2SubscriptionFunded, error)

	FilterSubscriptionOwnerTransferRequested(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequestedIterator, error)

	WatchSubscriptionOwnerTransferRequested(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferRequested(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferRequested, error)

	FilterSubscriptionOwnerTransferred(opts *bind.FilterOpts, subId []uint64) (*TestVRFCoordinatorV2SubscriptionOwnerTransferredIterator, error)

	WatchSubscriptionOwnerTransferred(opts *bind.WatchOpts, sink chan<- *TestVRFCoordinatorV2SubscriptionOwnerTransferred, subId []uint64) (event.Subscription, error)

	ParseSubscriptionOwnerTransferred(log types.Log) (*TestVRFCoordinatorV2SubscriptionOwnerTransferred, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
