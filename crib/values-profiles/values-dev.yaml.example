# Disable geth if using existing testnets.
geth:
  enabled: false
chainlink:
  global:
    toml: |-
      RootDir = './clroot'
      [Log]
      JSONConsole = true
      Level = 'debug'
      [WebServer]
      AllowOrigins = '*'
      SecureCookies = false
      SessionTimeout = '999h0m0s'
      [Feature]
      FeedsManager = true
      LogPoller = true
      UICSAKeys = true
      [OCR]
      Enabled = true
      DefaultTransactionQueueDepth = 0
      [P2P]
      [P2P.V2]
      Enabled = true
      ListenAddresses = ['0.0.0.0:6690']
      AnnounceAddresses = ['0.0.0.0:6690']
      DeltaDial = '500ms'
      DeltaReconcile = '5s'
      [[EVM]]
      # Avax Fuji Testnet
      ChainID = "43113"
      MinContractPayment = '0'
      AutoCreateKey = true
      FinalityDepth = 1
      [[EVM.Nodes]]
      Name = 'avax-fuji-testnet-official'
      WSURL = 'wss://api.avax-test.network/ext/bc/C/ws'
      HTTPURL = 'https://api.avax-test.network/ext/bc/C/rpc'
      [[EVM]]
      # BSC Testnet
      ChainID = "97"
      MinContractPayment = '0'
      AutoCreateKey = true
      FinalityDepth = 1
      [[EVM.Nodes]]
      Name = 'bsc-testnet-official'
      HTTPURL = 'https://data-seed-prebsc-1-s.bnbchain.org:8545'
      WSURL = 'wss://data-seed-prebsc-1-s1.binance.org:8545/'
      [WebServer.TLS]
      HTTPSPort = 0

    overridesToml: |-
      [Feature]
      LogPoller = true

      [Log]
      Level = 'debug'
      JSONConsole = true

      [Log.File]
      MaxSize = '0b'

      [WebServer]
      AllowOrigins = '*'
      HTTPPort = 6688
      SecureCookies = false
      HTTPWriteTimeout = '1m'

      [WebServer.RateLimit]
      Authenticated = 2000
      Unauthenticated = 1000

      [WebServer.TLS]
      HTTPSPort = 0

      [Database]
      MaxIdleConns = 50
      MaxOpenConns = 50
      MigrateOnStartup = true

      [OCR2]
      Enabled = true
      DefaultTransactionQueueDepth = 0

      [OCR]
      Enabled = false
      DefaultTransactionQueueDepth = 0

      [P2P]
      [P2P.V2]
      Enabled = true
      ListenAddresses = ['0.0.0.0:6690']
      AnnounceAddresses = ['0.0.0.0:6690']
      DeltaDial = '500ms'
      DeltaReconcile = '5s'
tags:
  # Enable BlockScout Stack.
  blockscout: false
blockscout-stack1: &default_blockscout_stack_config
  blockscout:
    env:
      DATABASE_URL: "postgres://postgres:verylongdatabasepassword@app-blockscout-stack1-db:5432/blockscout"
      DATABASE_HOST: "app-blockscout-stack1-db"
      ETHEREUM_JSONRPC_HTTP_URL: "http://geth-1337:8544"
      ETHEREUM_JSONRPC_WS_URL: "ws://geth-1337:8546"
      ETHEREUM_JSONRPC_HTTP_INSECURE: "true"
      BLOCKSCOUT_PROTOCOL: "HTTPS"
      SECRET_KEY_BASE: "knilniahc"
    init:
      enabled: true
      command:
        - /bin/sh
      args:
        - -c
        - |
          until nc -z $DATABASE_HOST 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done;
          echo "PostgreSQL is ready, starting BlockScout migrations...";
          bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()"
  frontend:
    env:
      NEXT_PUBLIC_API_HOST: "app-blockscout-stack1-blockscout-svc:80"
blockscout-stack2:
  <<: *default_blockscout_stack_config
  blockscout:
    env:
      DATABASE_URL: "postgres://postgres:verylongdatabasepassword@app-blockscout-stack2-db:5432/blockscout"
      DATABASE_HOST: "app-blockscout-stack2-db"
      ETHEREUM_JSONRPC_HTTP_URL: "http://geth-2337:8544"
      ETHEREUM_JSONRPC_WS_URL: "ws://geth-2337:8546"
  frontend:
    env:
      NEXT_PUBLIC_API_HOST: "app-blockscout-stack2-blockscout-svc:80"
blockscout-stack1-db: &default_blockscout_db_config
  auth:
    # For the `postgres` user.
    postgresPassword: verylongdatabasepassword
    database: blockscout
  primary:
    resources:
      requests:
        cpu: 2
        memory: 512Mi
      limits:
        cpu: 3
        memory: 1024Mi
    extendedConfiguration: |
      max_connections = 500
blockscout-stack2-db:
  <<: *default_blockscout_db_config