# This is a reusable workflow that runs E2E tests for Chainlink. 
# It is not meant to be run on its own.
name: Run E2E Tests
on:
  workflow_call:
    inputs:
      chainlink-version:
        description: 'Enter Chainlink version to use for the tests. Example: "v2.10.0" or sha'
        required: true
        type: string
      test-ids:
        description: 'Run tests by test ids separated by commas. Example: "run_all_in_ocr_tests_go,run_TestOCRv2Request_in_ocr2_test_go". Check all test IDs in .github/e2e-tests.yml'
        required: false
        type: string
      test-workflow:
        description: 'Run tests by workflow name. Example: "Run Nightly E2E Tests"'
        required: false
        type: string        
      test_config_base64_override:
        description: 'This is an unsafe way to pass custom base64 test config. It cannot contain any secrets as this value is exposed in Github logs (Set up job -> Inputs) when the workflow is called! The caller workflow must make sure to remove secrets from this input.'
        required: false
        type: string        
      enable-check-test-configurations:
        description: 'Set to "true" to enable check-test-configurations job'
        required: false
        type: boolean
        default: false
      with-existing-remote-runner-version:
        description: 'Use the existing remote runner version for k8s tests. Example: "d3bf5044af33e08be788a2df31c4a745cf69d787"'
        required: false
        type: string
    secrets:
      QA_AWS_REGION:
        required: true
      QA_AWS_ROLE_TO_ASSUME:
        required: true
      QA_AWS_ACCOUNT_NUMBER:
        required: true
      QA_PYROSCOPE_INSTANCE:
        required: true
      QA_PYROSCOPE_KEY:
        required: true
      QA_KUBECONFIG:
        required: true
      GRAFANA_INTERNAL_TENANT_ID:
        required: true
      GRAFANA_INTERNAL_BASIC_AUTH:
        required: true
      GRAFANA_INTERNAL_HOST:
        required: true
      GRAFANA_INTERNAL_URL_SHORTENER_TOKEN:
        required: true
      GH_TOKEN:
        required: true  
      AWS_REGION:
        required: true
      AWS_OIDC_IAM_ROLE_VALIDATION_PROD_ARN:
        required: true
      AWS_API_GW_HOST_GRAFANA:
        required: true        
               
env: 
  CHAINLINK_IMAGE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink

jobs:
  validate-inputs:
    name: Validate Workflow Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Check input conditions
        run: |
          if [[ "${{ inputs.test-ids }}" != "" && "${{ inputs.test-workflow }}" != "" ]]; then
            echo "Error: Both 'test-ids' and 'test-workflow' are provided. Please specify only one."
            exit 1
          fi

  check-test-configurations:
    name: Check Test Configurations
    if: ${{ inputs.enable-check-test-configurations }}
    needs: validate-inputs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21.7'
      - name: Run Check Tests Command
        run: |
          if ! go run integration-tests/e2e_tests_ci_tool/main.go check-tests ./integration-tests .github/e2e-tests.yml; then
            echo "::error::Some E2E test configurations have to be added to .github/e2e-tests.yml. This file defines Github CI configuration for each E2E test or set of E2E tests." && exit 1
          fi

  load-test-configurations:
    name: Load Test Configurations
    runs-on: ubuntu-latest
    needs: validate-inputs
    outputs:
      run-docker-tests: ${{ steps.check-matrices.outputs.run-docker-tests }}
      run-k8s-tests: ${{ steps.check-matrices.outputs.run-k8s-tests }}
      docker-matrix: ${{ steps.set-docker-matrix.outputs.matrix }}
      k8s-runner-matrix: ${{ steps.set-k8s-runner-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21.7'
      - name: Install jq
        run: sudo apt-get install jq
      - name: Generate Docker Tests Matrix
        id: set-docker-matrix
        run: |
          cd integration-tests/e2e_tests_ci_tool/
          MATRIX_JSON=$(go run main.go filter --file ../../.github/e2e-tests.yml --test-type 'docker' --test-ids '${{ inputs.test-ids }}' --workflow '${{ inputs.test-workflow }}')
          echo "Docker tests:"
          echo "$MATRIX_JSON" | jq
          echo "::set-output name=matrix::$MATRIX_JSON"
      - name: Generate K8s Tests Matrix
        id: set-k8s-runner-matrix
        run: |
          cd integration-tests/e2e_tests_ci_tool/
          MATRIX_JSON=$(go run main.go filter --file ../../.github/e2e-tests.yml --test-type 'k8s-remote-runner' --test-ids '${{ inputs.test-ids }}' --workflow '${{ inputs.test-workflow }}')
          echo "K8s tests:"
          echo "$MATRIX_JSON" | jq
          echo "::set-output name=matrix::$MATRIX_JSON"
      - name: Check Test Matrices
        id: check-matrices
        run: |
          DOCKER_MATRIX_EMPTY=$(echo '${{ steps.set-docker-matrix.outputs.matrix }}' | jq '.tests == null or .tests == []')
          K8S_MATRIX_EMPTY=$(echo '${{ steps.set-k8s-runner-matrix.outputs.matrix }}' | jq '.tests == null or .tests == []')

          # Check if jq commands succeeded
          if [ $? -ne 0 ]; then
            echo "JSON parse error occurred."
            exit 1
          fi

          if [[ "$DOCKER_MATRIX_EMPTY" == "true" ]]; then
            echo "::set-output name=run-docker-tests::false"
          else
            echo "::set-output name=run-docker-tests::true"
          fi
          if [[ "$K8S_MATRIX_EMPTY" == "true" ]]; then
            echo "::set-output name=run-k8s-tests::false"
          else
            echo "::set-output name=run-k8s-tests::true"
          fi

          # Check if both matrices are empty
          if [[ "$DOCKER_MATRIX_EMPTY" == "true" ]] && [[ "$K8S_MATRIX_EMPTY" == "true" ]]; then
            echo "No tests found for inputs: '${{ toJson(inputs) }}'. Both Docker and Kubernetes tests matrices are empty"
            exit 1
          fi
        shell: bash   

  # Run Docker tests
  docker-tests:
    name: Run Docker Tests (${{ matrix.tests.id }})
    needs: load-test-configurations
    if: ${{ needs.load-test-configurations.outputs.run-docker-tests == 'true' }}
    runs-on: ${{ matrix.tests.runsOn }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.load-test-configurations.outputs.docker-matrix)}}
    environment: integration
    permissions:
      actions: read
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    env:
      SELECTED_NETWORKS: SIMULATED
      CHAINLINK_ENV_USER: ${{ github.actor }}
      TEST_LOG_LEVEL: debug

    steps:
      - name: Checkout repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Show test configuration
        run: echo '${{ toJson(matrix.tests) }}' | jq .
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21.7'

      - name: Set default test config override
        if: ${{ inputs.test_config_base64_override == '' }}
        run: |      
          # Mask secret args before using them
          # For more, see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#masking-a-value-in-a-log
          echo ::add-mask::${{ env.CHAINLINK_IMAGE }}
          echo "cl image: ${{ env.CHAINLINK_IMAGE }}"

          # Use overrides from e2e-tests.yml or defaults 
          chainlink_version="${{ matrix.tests.testConfigOverride.chainlinkVersion || github.sha }}"
          chainlink_image="${{ matrix.tests.testConfigOverride.chainlinkImage || env.CHAINLINK_IMAGE }}"
          chainlink_postgres_version="${{ matrix.tests.testConfigOverride.chainlinkPostgresVersion }}"
          chainlink_upgrade_version="${{ matrix.tests.testConfigOverride.chainlinkUpgradeVersion }}"
          selected_networks="${{ matrix.tests.testConfigOverride.selectedNetworks || env.SELECTED_NETWORKS}}"

          # Build the command line arguments
          # Need to check if the variable is set before adding it to the command
          # Otherwise "" will be passed as an argument which is not what we want
          cmd_args=""
          if [ -n "$chainlink_image" ]; then
            cmd_args+="--chainlink-image=$chainlink_image "
          fi
          if [ -n "$chainlink_version" ]; then
            cmd_args+="--chainlink-version=$chainlink_version "
          fi
          if [ -n "$chainlink_postgres_version" ]; then
            cmd_args+="--chainlink-postgres-version=$chainlink_postgres_version "
          fi
          if [ -n "$chainlink_upgrade_version" ]; then
            cmd_args+="--chainlink-upgrade-version=$chainlink_upgrade_version "
          fi
          if [ -n "$selected_networks" ]; then
            cmd_args+="--selected-networks=$selected_networks "
          fi    
          
          cd integration-tests/e2e_tests_ci_tool/

          # Mask secrets inside the test config override (like resolved env vars)
          go run main.go test-config mask-secrets $cmd_args

          echo $chainlink_version

          # Create a base64 encoded string of the test config override
          config_override=$(go run main.go test-config create $cmd_args)

          BASE64_CONFIG_OVERRIDE=$(echo "$config_override" | base64 -w 0)
          echo ::add-mask::$BASE64_CONFIG_OVERRIDE
          echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV

      - name: Mask secrets in test config base64 override
        id: mask-secrets-in-test_config_base64_override
        if: ${{ inputs.test_config_base64_override != '' }}
        run: "to do"
          # - name: Remove secrets from test config base64 override
          #   id: mask-in
          # - name: Set outputs
          #   id: set-outputs
          #   run: |
          #     echo "::set-output name=base64ConfigNoSecrets::$BASE64_CONFIG_OVERRIDE"

      # TODO: Remove this step since we allow custom secrets in the test config but we mask them    
      # - name: Override secrets in custom test config
      #   if: ${{ inputs.test_config_base64_override != '' }}          
      #   run: |
      #     # Show what parts of the test config are being overridden
      #     go run main.go test-config override \
      #       --dry-run \
      #       --from-base64-config ${{ inputs.test_config_base64_override }} \
      #       --perycope-server-url ${{ secrets.QA_PYROSCOPE_INSTANCE }} \
      #       --peryscope-key ${{ secrets.QA_PYROSCOPE_KEY }} \
      #       --loki-endpoint https://${{ secrets.GRAFANA_INTERNAL_HOST }}/loki/api/v1/push \
      #       --loki-tenant-id ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }} \
      #       --loki-basic-auth ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }} \
      #       --grafana-url "http://localhost:8080/primary" \
      #       --grafana-dashboard-url "/d/ddf75041-1e39-42af-aa46-361fe4c36e9e/ci-e2e-tests-logs" \
      #       --grafana-bearer-token ${{ secrets.GRAFANA_INTERNAL_URL_SHORTENER_TOKEN }}

      #     # Override custom test config with CI secrets
      #     config_override=$(go run main.go test-config override \
      #       --from-base64-config ${{ inputs.test_config_base64_override }} \
      #       --perycope-server-url ${{ secrets.QA_PYROSCOPE_INSTANCE }} \
      #       --peryscope-key ${{ secrets.QA_PYROSCOPE_KEY }} \
      #       --loki-endpoint https://${{ secrets.GRAFANA_INTERNAL_HOST }}/loki/api/v1/push \
      #       --loki-tenant-id ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }} \
      #       --loki-basic-auth ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }} \
      #       --grafana-url "http://localhost:8080/primary" \
      #       --grafana-dashboard-url "/d/ddf75041-1e39-42af-aa46-361fe4c36e9e/ci-e2e-tests-logs" \
      #       --grafana-bearer-token ${{ secrets.GRAFANA_INTERNAL_URL_SHORTENER_TOKEN }}
      #     )

      #     BASE64_CONFIG_OVERRIDE=$(echo "$config_override" | base64 -w 0)
      #     echo ::add-mask::$BASE64_CONFIG_OVERRIDE
      #     echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV

      - name: Setup GAP for Grafana
        uses: smartcontractkit/.github/actions/setup-gap@6c9d62fdad050cfb8b59376ded291f1350705944 # setup-gap@0.2.2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-role-arn: ${{ secrets.AWS_OIDC_IAM_ROLE_VALIDATION_PROD_ARN }}
          api-gateway-host: ${{ secrets.AWS_API_GW_HOST_GRAFANA }}
          duplicate-authorization-header: "true"
      # - name: Prepare Base64 TOML override
      #   uses: ./.github/actions/setup-create-base64-config
      #   with:
      #     runId: ${{ github.run_id }}
      #     # testLogCollect: ${{ vars.TEST_LOG_COLLECT }}
      #     selectedNetworks: ${{ env.SELECTED_NETWORKS }}
      #     chainlinkImage: ${{ env.CHAINLINK_IMAGE }}
      #     chainlinkVersion: ${{ inputs.chainlink-version }}
      #     pyroscopeServer: ${{ secrets.QA_PYROSCOPE_INSTANCE }} # Avoid sending blank envs https://github.com/orgs/community/discussions/25725
      #     pyroscopeEnvironment: ${{ matrix.tests.pyroscopeEnv }}
      #     pyroscopeKey: ${{ secrets.QA_PYROSCOPE_KEY }}
      #     lokiEndpoint: https://${{ secrets.GRAFANA_INTERNAL_HOST }}/loki/api/v1/push
      #     lokiTenantId: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
      #     lokiBasicAuth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
      #     logstreamLogTargets: ${{ vars.LOGSTREAM_LOG_TARGETS }}
      #     grafanaUrl: "http://localhost:8080/primary" # This is GAP's address
      #     grafanaDashboardUrl: "/d/ddf75041-1e39-42af-aa46-361fe4c36e9e/ci-e2e-tests-logs"
      #     grafanaBearerToken: ${{ secrets.GRAFANA_INTERNAL_URL_SHORTENER_TOKEN }}
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@af92c5fae8dcf1659201e907db82d221fc304b94 # v2.3.21
        with:
          test_command_to_run: ${{ matrix.tests.testCmd }} 2>&1 | tee /tmp/gotest.log | gotestloghelper -ci -singlepackage -hidepassingtests=false -hidepassinglogs
          test_download_vendor_packages_command: cd ./integration-tests && go mod download
          cl_repo: ${{ env.CHAINLINK_IMAGE }}
          cl_image_tag: ${{ inputs.chainlink-version }}
          aws_registries: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}
          artifacts_name: ${{ matrix.tests.id }}-test-logs
          artifacts_location: |
            ./integration-tests/smoke/logs/
            /tmp/gotest.log
          publish_check_name: ${{ matrix.tests.id }}
          token: ${{ secrets.GH_TOKEN }}
          go_mod_path: ./integration-tests/go.mod
          cache_key_id: core-e2e-${{ env.MOD_CACHE_VERSION }}
          cache_restore_only: "true"
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ""
          should_tidy: "false"
          go_coverage_src_dir: /var/tmp/go-coverage
          go_coverage_dest_dir: ${{ github.workspace }}/.covdata

  # Run K8s tests using old remote runner

  prepare-remote-runner-test-image:
    needs: load-test-configurations
    if: ${{ needs.load-test-configurations.outputs.run-k8s-tests == 'true' }}
    name: Prepare Remote Runner Test Image
    runs-on: ubuntu-latest
    environment: integration
    permissions:
      actions: read
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    outputs:
      remote-runner-version: ${{ steps.set-remote-runner-version.outputs.remote-runner-version }}
    env:
      ENV_JOB_IMAGE_BASE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2      
      - name: Build Test Runner Image
        uses: ./.github/actions/build-test-image
        if: ${{ inputs.with-existing-remote-runner-version == '' }}
        with:
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ACCOUNT_NUMBER: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}
      - name: Set Remote Runner Version
        id: set-remote-runner-version
        run: |
          if [[ -z "${{ inputs.with-existing-remote-runner-version }}" ]]; then
            echo "::set-output name=remote-runner-version::${{ github.sha }}"
          else
            echo "::set-output name=remote-runner-version::${{ inputs.with-existing-remote-runner-version }}"
          fi

  run-k8s-runner-tests:
    needs: [load-test-configurations, prepare-remote-runner-test-image]
    if: ${{ needs.load-test-configurations.outputs.run-k8s-tests == 'true' }}
    name: Run K8s Tests (${{ matrix.tests.id }})
    runs-on: ${{ matrix.tests.runsOn }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.load-test-configurations.outputs.k8s-runner-matrix)}}
    environment: integration
    permissions:
      actions: read
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    env:
      SELECTED_NETWORKS: SIMULATED
      CHAINLINK_COMMIT_SHA: ${{ inputs.evm-ref || github.sha }}
      CHAINLINK_ENV_USER: ${{ github.actor }}
      TEST_LOG_LEVEL: debug

    steps:
      - name: Checkout repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Show Test Configuration
        run: echo '${{ toJson(matrix.tests) }}' | jq .
      - name: Show Remote Runner Version
        run: |
          echo "Remote Runner Version: ${{ needs.prepare-remote-runner-test-image.outputs.remote-runner-version }}"
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@af92c5fae8dcf1659201e907db82d221fc304b94 # v2.3.21
        env:
          DETACH_RUNNER: true
          TEST_SUITE: ${{ matrix.tests.remoteRunnerTestSuite }}
          TEST_TYPE: ${{ matrix.tests.remoteRunnerTestSuite }}
          TEST_TEST_TYPE: ${{ matrix.tests.remoteRunnerTestSuite }}
          RR_MEM: ${{ matrix.tests.remoteRunnerMemory }}
          TEST_ARGS: -test.timeout 900h -test.memprofile memprofile.out -test.cpuprofile profile.out
          ENV_JOB_IMAGE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink-tests:${{ needs.prepare-remote-runner-test-image.outputs.remote-runner-version }}
          INTERNAL_DOCKER_REPO: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com
          # We can comment these out when we have a stable soak test and aren't worried about resource consumption
          TEST_UPLOAD_CPU_PROFILE: true
          TEST_UPLOAD_MEM_PROFILE: true
        with:
          test_command_to_run: ${{ matrix.tests.testCmd }}
          test_download_vendor_packages_command: make gomod
          cl_repo: ${{ env.CHAINLINK_IMAGE }}
          cl_image_tag: ${{ env.CHAINLINK_VERSION }}
          token: ${{ secrets.GH_TOKEN }}
          should_cleanup: false
          go_mod_path: ./integration-tests/go.mod
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ${{ secrets.QA_KUBECONFIG }} 

  # Run K8s tests using new remote runner
  # remote-runner-k8s-tests:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: golang:1.18
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
      
  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.18'
      
  #     - name: Load Runner Config
  #       run: echo "$RUNNER_CONFIG" > runner.toml
  #       env:
  #         RUNNER_CONFIG: |
  #           # Runner configuration
  #           detached_mode = true
  #           debug = false
            
  #           [[test_runs]]
  #           namespace = "dev-env"
  #           rbac_role_name = "dev-role"
  #           rbac_service_account_name = "dev-service-account"
  #           sync_value = "unique-sync-value-1"
  #           ttl_seconds_after_finished = 300
  #           image_registry_url = "https://myregistry.dev/"
  #           image_name = "dev-image"
  #           image_tag = "v1.0.0"
  #           test_name = "TestMercuryLoad/all_endpoints"
  #           test_config_base64_env_name = "CONFIG_ENV_DEV"
  #           test_config_file_path = "/configs/dev/test-config.toml"
  #           test_config_base64 = "dGVzdCBjb25maWcgdmFsdWUgZGV2"
  #           test_timeout = "30m"
  #           resources_requests_cpu = "500m"
  #           resources_requests_memory = "1Gi"
  #           resources_limits_cpu = "1000m"
  #           resources_limits_memory = "2Gi"
  #           job_count = 2
  #           chart_path = "/charts/dev"
  #           [envs]
  #           WASP_LOG_LEVEL = "info"
  #           TEST_LOG_LEVEL = "info"
  #           MERCURY_TEST_LOG_LEVEL = "info"
            
  #           [[test_runs]]
  #           namespace = "prod-env"
  #           rbac_role_name = "prod-role"
  #           rbac_service_account_name = "prod-service-account"
  #           sync_value = "unique-sync-value-2"
  #           ttl_seconds_after_finished = 600
  #           image_registry_url = "https://myregistry.prod/"
  #           image_name = "prod-image"
  #           image_tag = "v1.0.1"
  #           test_name = "TestMercuryLoad/all_endpoints"
  #           test_config_base64_env_name = "CONFIG_ENV_PROD"
  #           test_config_file_path = "/configs/prod/test-config.toml"
  #           test_config_base64 = "dGVzdCBjb25maWcgdmFsdWUgcHJvZA=="
  #           test_timeout = "45m"
  #           resources_requests_cpu = "800m"
  #           resources_requests_memory = "2Gi"
  #           resources_limits_cpu = "1500m"
  #           resources_limits_memory = "4Gi"
  #           job_count = 3
  #           chart_path = "/charts/prod"
  #           [envs]
  #           WASP_LOG_LEVEL = "info"
  #           TEST_LOG_LEVEL = "info"
  #           MERCURY_TEST_LOG_LEVEL = "info"
        
  #     # Schedule the tests in K8s in remote runner
  #     - name: Run Kubernetes Tests
  #       run: go run ./cmd/main.go run -c runner.toml        