name: CI Core

on:
  push:
  schedule:
    - cron: "0 0 * * *"

jobs:
  shard-packages:
    name: Shard Go Tests
    runs-on: ubuntu-latest
    outputs:
      shards: ${{ steps.shard.outputs.shards }} 
    env:
      SHARDS: 10 
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@v1
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Shard Go Tests 
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: false
      - name: Touching core/web/assets/index.html
        run: mkdir -p core/web/assets && touch core/web/assets/index.html
      - name: Install zx shell
        run: npm i -g zx
      - name: Shard list of go packages
        id: shard
        # FIXME: handle different types of lists for race tests and non-race tests
        env:
          TEST_TYPE: "go_core_tests"
        run: ./tools/ci/shard_packages

  core:
    needs: [shard-packages]
    strategy:
      fail-fast: false
      matrix:
        cmd: ["go_core_tests", "go_core_race_tests"]
        shard: ${{ fromJson(needs.shard-packages.outputs.shards) }}  
    name: Core Tests (${{ matrix.cmd }}) ${{ matrix.shard.id }}
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chainlink_test?sslmode=disable
      LOG_LEVEL: debug
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chainlink_test
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@v1
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: Core Tests (${{ matrix.cmd }}) ${{ matrix.shard.id }}
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: yarn
      - name: Install contract dependencies
        run: yarn install --prod --frozen-lockfile
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: false
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@09ab61130975078eb7cde103fe8d2ae1649a1853 #v6.1
      - name: Set go cache keys
        id: go-cache-dir
        run: |
          echo "::set-output name=gomodcache::$(go env GOMODCACHE)" 
          echo "::set-output name=gocache::$(go env GOCACHE)" 
      - uses: actions/cache@v3
        name: Cache Go Modules
        env: 
          # Increase this to cache-bust
          CACHE_VERSION: 1
        with:
          path: |
            ${{ steps.go-cache-dir.outputs.gomodcache }}
          # The lifetime of go modules is much higher than the build outputs, so we increase cache efficiency
          # here by not having the primary key contain the branch name
          key: ${{ runner.os }}-gomod-${{ env.CACHE_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod-${{ env.CACHE_VERSION }}-
      - uses: actions/cache@v3
        name: Cache Go Build Outputs
        env: 
          # Increase this to cache-bust
          CACHE_VERSION: 1
        with:
          path: |
            ${{ steps.go-cache-dir.outputs.gomodcache }}
          # The lifetime of go build outputs is pretty short, so we make our primary cache key be the branch name
          key: ${{ runner.os }}-gobuild-${{ env.CACHE_VERSION }}-${{ hashFiles('**/go.sum') }}-${{ steps.branch-name.outputs.current_branch }}
          restore-keys: |
            ${{ runner.os }}-gobuild-${{ env.CACHE_VERSION }}-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-gobuild-${{ env.CACHE_VERSION }}-
      - name: Touching core/web/assets/index.html
        run: mkdir -p core/web/assets && touch core/web/assets/index.html
      - name: Download Go vendor packages
        run: go mod download
      - uses: actions/cache@v3
        name: Cache solana CLI
        with:
          path: |
            ~/.local/share/solana/install/active_release/bin
          key: ${{ runner.os }}-solana-cli-${{ hashFiles('./tools/ci/install_solana') }}
      - name: Install solana cli
        run: ./tools/ci/install_solana
      - name: Build binary
        run: go build -o chainlink.test ./core
      - name: Setup DB
        run: ./chainlink.test local db preparetest
      - name: Increase Race Timeout
        if: github.event.schedule != ''
        run: echo "TIMEOUT=5m" >> $GITHUB_ENV
      - name: Run tests
        run: ./tools/bin/${{ matrix.cmd }} "${{ matrix.shard.pkgs }}"
      - name: Store logs artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v2.3.0
        with:
          name: ${{ matrix.cmd }}_${{ matrix.shard.id }}_logs
          path: |
            ./output.txt
            ./race.*
      - name: Print postgres logs
        if: always()
        uses: docker://docker:latest
        with:
          args: logs ${{ job.services.postgres.id }}
