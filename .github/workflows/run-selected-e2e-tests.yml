name: Run Selected E2E Tests

on:
  workflow_dispatch:
    inputs:
      chainlink-version:
        description: 'Enter Chainlink version to use for the tests. Example: "v2.10.0" or sha'
        default: develop
        required: false
        type: string
      test-ids:
        description: 'Run all tests "*" by default. Or, enter test IDs to run separated by commas. Example: "run_all_in_ocr_tests_go,run_TestOCRv2Request_in_ocr2_test_go". Check all test IDs in .github/e2e-tests.yml'
        default: "*"
        required: true
        type: string
      test_config_base64_override_unsafe:
        description: 'Custom base64 test config'
        required: false
        type: string          
      enable-check-test-configurations:
        description: 'Set to "true" to enable check-test-configurations job'
        required: false
        type: boolean
        default: false
      with-existing-remote-runner-version:
        description: 'Use the existing remote runner version for k8s tests. Example: "d3bf5044af33e08be788a2df31c4a745cf69d787"'
        required: false
        type: string                 

jobs:
  mask:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.mask-config.outputs.config }}
    steps:
      - name: Run Check Tests Command
        id: mask-config 
        run: |
          BASE64_CONFIG_OVERRIDE=$(jq -r '.inputs.test_config_base64_override_unsafe' $GITHUB_EVENT_PATH)
          echo ::add-mask::$BASE64_CONFIG_OVERRIDE
          echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV
          echo "::set-output name=config::$BASE64_CONFIG_OVERRIDE"
        shell: bash

  call-run-e2e-tests-workflow:
    name: Run E2E Tests
    uses: ./.github/workflows/run-e2e-tests-reusable-workflow.yml
    needs: mask
    permissions:
      actions: read
      checks: write
      pull-requests: write
      id-token: write
      contents: read    
    with:
      chainlink-version: ${{ github.event.inputs.chainlink-version }}
      test-ids: ${{ github.event.inputs.test-ids }}
      with-existing-remote-runner-version: ${{ github.event.inputs.with-existing-remote-runner-version }}
      # Use fromJSON to convert string to boolean. More info: https://github.com/actions/runner/issues/2206#issuecomment-1532246677
      enable-check-test-configurations: ${{ fromJSON(github.event.inputs.enable-check-test-configurations) }}
    secrets:
      QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
      QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
      QA_AWS_ACCOUNT_NUMBER: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}
      QA_PYROSCOPE_INSTANCE: ${{ secrets.QA_PYROSCOPE_INSTANCE }}
      QA_PYROSCOPE_KEY: ${{ secrets.QA_PYROSCOPE_KEY }}
      QA_KUBECONFIG: ${{ secrets.QA_KUBECONFIG }}
      GRAFANA_INTERNAL_TENANT_ID: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
      GRAFANA_INTERNAL_BASIC_AUTH: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
      GRAFANA_INTERNAL_HOST: ${{ secrets.GRAFANA_INTERNAL_HOST }}
      GRAFANA_INTERNAL_URL_SHORTENER_TOKEN: ${{ secrets.GRAFANA_INTERNAL_URL_SHORTENER_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      AWS_REGION: ${{ secrets.QA_AWS_REGION }}
      AWS_OIDC_IAM_ROLE_VALIDATION_PROD_ARN: ${{ secrets.AWS_OIDC_IAM_ROLE_VALIDATION_PROD_ARN }}
      AWS_API_GW_HOST_GRAFANA: ${{ secrets.AWS_API_GW_HOST_GRAFANA }}   
      CUSTOM_SECRET: ${{ needs.mask.outputs.config }} # Add your custom secret here

