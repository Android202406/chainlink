name: Setup NodeJS
inputs:
  shard:
    required: true
    description: The shard to cache under, such as "v0.5", "cross-version"
  cache-version:
    default: "1"
    description: Change to bust cache
description: Setup pnpm for contracts
runs:
  using: composite
  steps:
    - name: Generate hash cache key
      uses: actions/github-script@v6
      id: cache-key
      env:
        SHARD: ${{ inputs.shard }}
      with:
        script: |
          const shard = process.env.SHARD 
          const validShards = ['cross-version', 'v0.6', 'v0.7', 'v0.8']
          if(!validShards.includes(shard)) throw Error(`No valid shard found, valid shards are ${JSON.stringify(validShards)}`)
          const dirToCache = shard === 'cross-version' ? '' : `${shard}/`

          // When the shard is 'cross-version', the resulting hashFiles input ends up being 'contracts/src/**/*.sol', since we are possibly testing any version of contracts
          // Otherwise, it is 'contracts/src/v0.8/**/*.sol', if the 'shard' was 'v0.8'.
          const cacheKey = `contracts/src/${dirToCache}**/*.sol`
          console.log(`Generated cache key for shard "${shard}": ${cacheKey}`)
          return cacheKey

    - name: Cache Compilers
      uses: actions/cache@v3
      with:
        path: ~/.cache/hardhat-nodejs/
        key: contracts-compilers-${{ runner.os }}-${{ inputs.cache-version }}-${{ hashFiles('contracts/pnpm.lock', 'contracts/hardhat.config.ts') }}

    - name: Cache contracts build outputs
      uses: actions/cache@v3
      with:
        path: |
          contracts/cache/
          contracts/artifacts/
        key: ${{ format('contracts-{0}-{1}-{2}-{3}', inputs.shard, runner.os, inputs.cache-version, hashFiles('contracts/pnpm.lock', 'contracts/hardhat.config.ts', steps.cache-key.outputs.result)) }}
        restore-keys: |
          ${{ format('contracts-{0}-{1}-{2}', inputs.shard, runner.os, inputs.cache-version) }}

    # - name: Compile contracts
    #   shell: bash
    #   run: pnpm compile
    #   working-directory: contracts
