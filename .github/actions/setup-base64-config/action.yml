name: Setup Base64 Config
description: A composite action that allows building and publishing the Chainlink image for integration testing

inputs:
  run_id:
    description: The run id
  test_log_collect:
    description: Whether to always collect logs, even for passing tests
    default: "false"
  chainlink_image:
    description: The chainlink image to use
    default: "public.ecr.aws/chainlink/chainlink"
  chainlink_version:
    description: The git commit sha to use for the image tag
  pyroscope_server:
    description: URL of Pyroscope server
  pyroscope_environment: 
    description: Name of Pyroscope environment
  pyroscope_key:
    description: Pyroscope server key
  loki_endpoint:
    description: Loki push endpoint
  loki_tenant_id:
    description: Loki tenant id
  loki_basic_auth:
    description: Loki basic auth
  logstream_log_targets:
    description: Where to send logs (e.g. file, loki)
  grafana_url:
    description: Grafana URL
  grafana_dashboard_url:
    description: Grafana dashboard URL

runs:
  using: composite
  steps:
    - name: Prepare Base64 TOML override
      shell: bash
      id: base64-config-override
      env:
        RUN_ID: ${{ inputs.run_id }}
        TEST_LOG_COLLECT: ${{ inputs.test_log_collect }}      
        PYROSCOPE_SERVER: ${{ inputs.pyroscope_server }} 
        PYROSCOPE_ENVIRONMENT: ${{ inputs.pyroscope_environment }} 
        PYROSCOPE_KEY: ${{ inputs.pyroscope_key }} 
        CHAINLINK_IMAGE: ${{ inputs.chainlink_image }}
        CHAINLINK_VERSION: ${{ inputs.chainlink_version }}
        LOKI_ENDPOINT: ${{ inputs.loki_endpoint }}
        LOKI_TENANT_ID: ${{ inputs.loki_tenant_id }}
        LOKI_BASIC_AUTH: ${{ inputs.loki_basic_auth }}
        LOGSTREAM_LOG_TARGETS: ${{ inputs.logstream_log_targets }}
        GRAFANA_URL: ${{ inputs.grafana_url }}
        GRAFANA_DASHBOARD_URL: ${{ inputs.grafana_dashboard_url }}
      run: |
        echo ::add-mask::$CHAINLINK_IMAGE        
        function convert_to_toml_array() {
          local IFS=','
          local input_array=($1)
          local toml_array_format="["

          for element in "${input_array[@]}"; do
              toml_array_format+="\"$element\","
          done

          toml_array_format="${toml_array_format%,}]"
          echo "$toml_array_format"
        }
        
        selected_networks=$(convert_to_toml_array "$SELECTED_NETWORKS")      
        log_targets=$(convert_to_toml_array "$LOGSTREAM_LOG_TARGETS")             
        
        if [ -n "$PYROSCOPE_SERVER" ]; then
          pyroscope_enabled=true
        else
          pyroscope_enabled=false
        fi

        if [ -n "$TEST_LOG_COLLECT" ]; then
          test_log_collect=true
        else
          test_log_collect=false
        fi              

        cat << EOF > config.toml
        [Network]
        selected_networks=$selected_networks
        
        [ChainlinkImage]
        image="$CHAINLINK_IMAGE"
        version="$CHAINLINK_VERSION"
        
        [Pyroscope]
        enabled=$pyroscope_enabled
        server_url="$PYROSCOPE_SERVER"
        environment="$PYROSCOPE_ENVIRONMENT"
        key="$PYROSCOPE_KEY"

        [Logging]
        test_log_collect=$test_log_collect
        run_id="$RUN_ID"

        [Logging.LogStream]
        log_targets=$log_targets

        [Logging.Loki]
        tenant_id="$LOKI_TENANT_ID"
        endpoint="$LOKI_ENDPOINT"
        basic_auth="$LOKI_BASIC_AUTH"
        # legacy, you only need this to access the cloud version
        # bearer_token="bearer_token"

        [Logging.Grafana]
        base_url="$GRAFANA_URL"
        dasboard_url="$GRAFANA_DASHBOARD_URL"
        EOF
        
        BASE64_CONFIG_OVERRIDE=$(cat config.toml | base64 -w 0)
        echo ::add-mask::$BASE64_CONFIG_OVERRIDE
        echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV
