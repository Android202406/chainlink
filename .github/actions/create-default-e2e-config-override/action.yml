name: 'Create Default E2E Test Config Override From Inputs'
inputs:
  chainlink_image:
    required: false
    description: 'Chainlink image to use for the tests. Example: "chainlink/chainlink:develop"'
  chainlink_version:
    required: false
    description: 'Chainlink version to use for the tests. Example: "v2.10.0" or sha'
  chainlink_postgres_version:
    required: false
    description: 'Chainlink Postgres version to use for the tests'
  chainlink_upgrade_image:
    required: false
    description: 'Chainlink upgrade image to use for the tests'
  chainlink_upgrade_version:
    required: false
    description: 'Chainlink upgrade version to use for the tests'
  selected_networks:
    required: false
    description: 'Selected networks for the tests (comma separated)'
  pyroscope_server:
    required: false
    description: 'Pyroscope server for the tests'
  pyroscope_environment:
    required: false
    description: 'Pyroscope environment for the tests'
  pyroscope_key:
    required: false
    description: 'Pyroscope key for the tests'
  test_log_collect:
    required: false
    description: 'Whether to always collect test logs'
  loki_run_id:
    required: false
    description: 'Loki run ID for the tests'
  loki_endpoint:
    required: false
    description: 'Loki endpoint for the tests'
  loki_tenant_id:
    required: false
    description: 'Loki tenant ID for the tests'
  loki_basic_auth:
    required: false
    description: 'Loki basic authentication for the tests'
  logstream_log_targets:
    required: false
    description: 'Logstream log targets for the tests (comma separated)'
  grafana_url:
    required: false
    description: 'Grafana URL for the tests'
  grafana_dashboard_url:
    required: false
    description: 'Grafana dashboard URL for the tests'
  grafana_bearer_token:
    required: false
    description: 'Grafana bearer token for the tests'
  private_ethereum_network_execution_layer:
    required: false
    description: 'Private Ethereum network execution layer for the tests'    
  private_ethereum_network_custom_docker_image:
    required: false
    description: 'Private Ethereum network custom Docker image for the tests'

runs:
  using: 'composite'
  steps:
    - name: Build the command line arguments
      shell: bash
      run: |
        cmd_args=""
        if [ -n "${{ inputs.chainlink_image }}" ]; then
          cmd_args+="--chainlink-image=\"${{ inputs.chainlink_image }}\" "
        fi
        if [ -n "${{ inputs.chainlink_version }}" ]; then
          cmd_args+="--chainlink-version=\"${{ inputs.chainlink_version }}\" "
        fi
        if [ -n "${{ inputs.chainlink_postgres_version }}" ]; then
          cmd_args+="--chainlink-postgres-version=\"${{ inputs.chainlink_postgres_version }}\" "
        fi
        if [ -n "${{ inputs.chainlink_upgrade_image }}" ]; then
          cmd_args+="--chainlink-upgrade-image=\"${{ inputs.chainlink_upgrade_image }}\" "
        fi
        if [ -n "${{ inputs.chainlink_upgrade_version }}" ]; then
          cmd_args+="--chainlink-upgrade-version=\"${{ inputs.chainlink_upgrade_version }}\" "
        fi
        if [ -n "${{ inputs.pyroscope_server }}" ]; then
          cmd_args+="--pyroscope-server-url=\"${{ inputs.pyroscope_server }}\" "
        fi
        if [ -n "${{ inputs.pyroscope_environment }}" ]; then
          cmd_args+="--pyroscope-environment=\"${{ inputs.pyroscope_environment }}\" "
        fi
        if [ -n "${{ inputs.pyroscope_key }}" ]; then
          cmd_args+="--pyroscope-key=\"${{ inputs.pyroscope_key }}\" "
        fi
        if [ -n "${{ inputs.loki_endpoint }}" ]; then
          cmd_args+="--logging-loki-endpoint=\"${{ inputs.loki_endpoint }}\" "
        fi
        if [ -n "${{ inputs.loki_tenant_id }}" ]; then
          cmd_args+="--logging-loki-tenant-id=\"${{ inputs.loki_tenant_id }}\" "
        fi
        if [ -n "${{ inputs.loki_basic_auth }}" ]; then
          cmd_args+="--logging-loki-basic-auth=\"${{ inputs.loki_basic_auth }}\" "
        fi
        if [ -n "${{ inputs.loki_run_id }}" ]; then
          cmd_args+="--logging-run-id=\"${{ inputs.loki_run_id }}\" "
        fi
        if [ -n "${{ inputs.test_log_collect }}" ]; then
          cmd_args+="--logging-test-log-collect=\"${{ inputs.test_log_collect }}\" "
        fi
        if [ -n "${{ inputs.private_ethereum_network_execution_layer }}" ]; then
          cmd_args+="--private-ethereum-network-execution-layer=\"${{ inputs.private_ethereum_network_execution_layer }}\" "
        fi
        if [ -n "${{ inputs.private_ethereum_network_custom_docker_image }}" ]; then
          cmd_args+="--private-ethereum-network-custom-docker-image=\"${{ inputs.private_ethereum_network_custom_docker_image }}\" "
        fi
        
        # Split the log targets input by comma and add to the command line arguments
        IFS=',' read -ra ADDR <<< "${{ inputs.logstream_log_targets }}"
        for i in "${ADDR[@]}"; do
          cmd_args+="--logging-log-targets=\"$i\" "
        done

        # Split selected_networks input by comma and add to the command line arguments
        IFS=',' read -ra ADDR <<< "${{ inputs.selected_networks }}"
        for i in "${ADDR[@]}"; do
          cmd_args+="--selected-networks=\"$i\" "
        done

        echo "Command line arguments: $cmd_args" 
        echo "CMD_ARGS=$cmd_args" >> $GITHUB_ENV

    - name: Run the command to create the test config and set it as BASE64_CONFIG_OVERRIDE env variable
      shell: bash
      run: |      
        cd integration-tests/e2e_tests_ci_tool/
        config_override=$(go run main.go test-config create ${{ env.CMD_ARGS }})

        BASE64_CONFIG_OVERRIDE=$(echo "$config_override" | base64 -w 0)
        echo ::add-mask::$BASE64_CONFIG_OVERRIDE
        echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV
    