name: 'Run E2E Docker Test'
inputs:
  test:
    required: true
    description: 'Test to run'
  test_config_base64_override:
    description: 'This is an unsafe way to pass custom base64 test config. It cannot contain any secrets as this value is exposed in Github logs (Set up job -> Inputs) when the workflow is called! The caller workflow must make sure to remove secrets from this input.'
    required: false
    type: string        

runs:
  using: 'composite'
  steps:
    - name: Install jq
      run: sudo apt-get install -y jq
    - name: Show test configuration
      run: echo '${{ toJson(inputs.test) }}' | jq .
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21.7'

    - name: Set default test config override
      if: ${{ inputs.test_config_base64_override == '' }}
      run: |      
        # Mask secret args before using them
        # For more, see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#masking-a-value-in-a-log
        echo ::add-mask::${{ env.CHAINLINK_IMAGE }}
        echo "cl image: ${{ env.CHAINLINK_IMAGE }}"

        # Use overrides from e2e-tests.yml or defaults 
        chainlink_version="${{ inputs.test.testConfigOverride.chainlinkVersion || github.sha }}"
        chainlink_image="${{ inputs.test.testConfigOverride.chainlinkImage || env.CHAINLINK_IMAGE }}"
        chainlink_postgres_version="${{ inputs.test.testConfigOverride.chainlinkPostgresVersion }}"
        chainlink_upgrade_version="${{ inputs.test.testConfigOverride.chainlinkUpgradeVersion }}"
        selected_networks="${{ inputs.test.testConfigOverride.selectedNetworks || env.SELECTED_NETWORKS}}"

        # Build the command line arguments
        # Need to check if the variable is set before adding it to the command
        # Otherwise "" will be passed as an argument which is not what we want
        cmd_args=""
        if [ -n "$chainlink_image" ]; then
          cmd_args+="--chainlink-image=$chainlink_image "
        fi
        if [ -n "$chainlink_version" ]; then
          cmd_args+="--chainlink_version=$chainlink_version "
        fi
        if [ -n "$chainlink_postgres_version" ]; then
          cmd_args+="--chainlink-postgres-version=$chainlink_postgres_version "
        fi
        if [ -n "$chainlink_upgrade_version" ]; then
          cmd_args+="--chainlink-upgrade-version=$chainlink_upgrade_version "
        fi
        if [ -n "$selected_networks" ]; then
          cmd_args+="--selected-networks=$selected_networks "
        fi    
        
        cd integration-tests/e2e_tests_ci_tool/

        # Mask secrets inside the test config override (like resolved env vars)
        go run main.go test-config mask-secrets $cmd_args

        echo $chainlink_version

        # Create a base64 encoded string of the test config override
        config_override=$(go run main.go test-config create $cmd_args)

        BASE64_CONFIG_OVERRIDE=$(echo "$config_override" | base64 -w 0)
        echo ::add-mask::$BASE64_CONFIG_OVERRIDE
        echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV

    - name: Mask secrets in test config base64 override
      id: mask-secrets-in-test_config_base64_override
      if: ${{ inputs.test_config_base64_override != '' }}
      run: |
        # Mask secrets inside the test config override
        cd integration-tests/e2e_tests_ci_tool/
        go run main.go test-config mask-secrets --from-base64-config ${{ inputs.test_config_base64_override }}

        exit 1 # Fail the job

    - name: Setup GAP for Grafana
      uses: smartcontractkit/.github/actions/setup-gap@6c9d62fdad050cfb8b59376ded291f1350705944 # setup-gap@0.2.2
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-role-arn: ${{ secrets.AWS_OIDC_IAM_ROLE_VALIDATION_PROD_ARN }}
        api-gateway-host: ${{ secrets.AWS_API_GW_HOST_GRAFANA }}
        duplicate-authorization-header: "true"
    - name: Run Tests
      uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@af92c5fae8dcf1659201e907db82d221fc304b94 # v2.3.21
      with:
        test_command_to_run: ${{ inputs.test.testCmd }} 2>&1 | tee /tmp/gotest.log | gotestloghelper -ci -singlepackage -hidepassingtests=false -hidepassinglogs
        test_download_vendor_packages_command: cd ./integration-tests && go mod download
        cl_repo: ${{ env.CHAINLINK_IMAGE }}
        cl_image_tag: ${{ inputs.chainlink_version }}
        aws_registries: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}
        artifacts_name: ${{ inputs.test.id }}-test-logs
        artifacts_location: |
          ./integration-tests/smoke/logs/
          /tmp/gotest.log
        publish_check_name: ${{ inputs.test.id }}
        token: ${{ secrets.GITHUB_TOKEN }}
        go_mod_path: ./integration-tests/go.mod
        cache_key_id: core-e2e-${{ env.MOD_CACHE_VERSION }}
        cache_restore_only: "true"
        QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
        QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
        QA_KUBECONFIG: ""
        should_tidy: "false"
        go_coverage_src_dir: /var/tmp/go-coverage
        go_coverage_dest_dir: ${{ github.workspace }}/.covdata