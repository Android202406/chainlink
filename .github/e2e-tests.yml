# This file defines Github CI configuration for each E2E test and is used by CI workflows to run E2E tests.
#
# Each test entry details the Github runner configuration, test environment (Docker or Kubernetes), Go test command, and triggers
# that determine under what conditions the test should be executed (e.g., on push or nightly builds).
#
test-runner-matrix:

  # Example of 1 runner for all tests in integration-tests/smoke/ocr_test.go
  - id: smoke/ocr_test.go:* 
    path: integration-tests/smoke/ocr_test.go
    test-type: docker
    runs-on: ubuntu-latest
    trigger: ["push", "nightly", "pull-request", "release-tag"]
    test-cmd: cd integration-tests/ && go test smoke/ocr_test.go -timeout 30m -count=1 -json
    pyroscope-env: ci-smoke-ocr-evm-simulated-nightly

  # Example of 2 separate runners for the same test file but different tests. Can be used if tests if are too heavy to run on the same runner
  - id: smoke/ocr2_test.go:^TestOCRv2Request$
    path: integration-tests/smoke/ocr2_test.go
    test-type: docker
    runs-on: ubuntu-latest
    trigger: ["push", "nightly", "pull-request", "release-tag"]
    test-cmd: cd integration-tests/ && go test smoke/ocr2_test.go -test.run ^TestOCRv2Request$ -test.parallel=1 -timeout 30m -count=1 -json
    pyroscope-env: ci-smoke-ocr2-evm-simulated-nightly

  - id: smoke/ocr2_test.go:^TestOCRv2Basic$
    path: integration-tests/smoke/ocr2_test.go
    test-type: docker
    runs-on: ubuntu-latest
    trigger: ["push", "nightly", "pull-request", "release-tag"]
    test-cmd: cd integration-tests/ && go test smoke/ocr2_test.go -test.run ^TestOCRv2Basic$ -test.parallel=1 -timeout 30m -count=1 -json
    pyroscope-env: ci-smoke-ocr2-evm-simulated-nightly

  # Automation upgrade tests
  
  - id: smoke/automation_upgrade_test.go:^TestAutomationNodeUpgrade/registry_2_0
    path: integration-tests/smoke/automation_upgrade_test.go
    test-type: docker
    runs-on: ubuntu22.04-8cores-32GB
    trigger: ["push", "nightly", "pull-request", "release-tag"]
    test-cmd: cd integration-tests/smoke && go test -test.run ^TestAutomationNodeUpgrade/registry_2_0 -test.parallel=1 -timeout 60m -count=1 -json
    test-config-override: |
      [ChainlinkUpgradeImage]
      image="${{ env.CHAINLINK_IMAGE }}"
      version="${{ env.GITHUB_SHA }}"
      [ChainlinkImage]
      image="public.ecr.aws/chainlink/chainlink"
      version="latest"
    pyroscope-env: ci-smoke-automation-upgrade-tests

  - id: smoke/automation_upgrade_test.go:^TestAutomationNodeUpgrade/registry_2_1
    path: integration-tests/smoke/automation_upgrade_test.go
    test-type: docker
    runs-on: ubuntu22.04-8cores-32GB
    trigger: ["push", "nightly", "pull-request", "release-tag"]
    test-cmd: cd integration-tests/smoke && go test -test.run ^TestAutomationNodeUpgrade/registry_2_1 -test.parallel=1 -timeout 60m -count=1 -json
    test-config-override: |
      [ChainlinkUpgradeImage]
      image="${{ env.CHAINLINK_IMAGE }}"
      version="${{ env.GITHUB_SHA }}"
      [ChainlinkImage]
      image="public.ecr.aws/chainlink/chainlink"
      version="latest"
    pyroscope-env: ci-smoke-automation-upgrade-tests

  - id: smoke/automation_upgrade_test.go:^TestAutomationNodeUpgrade/registry_2_2
    path: integration-tests/smoke/automation_upgrade_test.go
    test-type: docker
    runs-on: ubuntu22.04-8cores-32GB
    trigger: ["push", "nightly", "pull-request", "release-tag"]
    test-cmd: cd integration-tests/smoke && go test -test.run ^TestAutomationNodeUpgrade/registry_2_2 -test.parallel=1 -timeout 60m -count=1 -json
    test-config-override: |
      [ChainlinkUpgradeImage]
      image="${{ env.CHAINLINK_IMAGE }}"
      version="${{ env.GITHUB_SHA }}"
      [ChainlinkImage]
      image="public.ecr.aws/chainlink/chainlink"
      version="latest"
    pyroscope-env: ci-smoke-automation-upgrade-tests

  # END Automation upgrade tests

  # Example of a configuration for running a single soak test in Kubernetes Remote Runner
  - id: soak/ocr_test.go:^TestOCRSoak$
    path: integration-tests/soak/ocr_test.go
    test-type: k8s-remote-runner
    remote-runner-test-suite: soak
    runs-on: ubuntu-latest
    trigger: ["nightly", "release-tag"] # Run nightly and on release tags
    test-cmd: cd integration-tests/ && go test soak/ocr_test.go -test.run ^TestOCRSoak$ -test.parallel=1 -timeout 30m -count=1 -json
    pyroscope-env: ci-smoke-ocr2-evm-simulated-nightly
