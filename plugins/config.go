package plugins

import (
	"fmt"
	"os"
	"os/exec"
	"strconv"
	"strings"

	"github.com/google/uuid"
	"go.uber.org/zap/zapcore"
)

// AppConfig is a subset of configuration inherited from the chainlink application.
type AppConfig interface {
	AppID() uuid.UUID
	LogLevel() zapcore.Level
	JSONConsole() bool
	LogUnixTimestamps() bool
}

// RegistrarConfig generates contains static configuration inher
type RegistrarConfig interface {
	AppConfig
	RegisterLOOP(loopId string) (*RegisteredLoop, error)
}

type registarConfig struct {
	AppConfig
	loopRegistrationFn func(loopId string, loopStaticCfg AppConfig) (*RegisteredLoop, error)
}

// NewRegistrarConfig creates a RegistarConfig
// loopRegistrationFn must act as a global registry function of LOOPs and must be idempotent.
// The [EnvConfig] for a LOOP should be generated by calling [RegistrarConfig.RegisterLOOP]
func NewRegistrarConfig(c AppConfig, loopRegistrationFn func(loopId string, loopStaticCfg AppConfig) (*RegisteredLoop, error)) RegistrarConfig {
	return &registarConfig{
		AppConfig:          c,
		loopRegistrationFn: loopRegistrationFn,
	}
}

// RegisterLOOP calls the configured loopRegistrationFn. The loopRegistrationFn must act as a global registry for LOOPs and must be idempotent.
func (pc *registarConfig) RegisterLOOP(id string) (*RegisteredLoop, error) {
	return pc.loopRegistrationFn(id, pc.AppConfig)
}

// EnvConfig is the configuration interface between the application and the LOOP executable. The values
// are fully resolved and static and passed via the environment.
type EnvConfig interface {
	AppConfig
	PrometheusPort() int
}

// SetCmdEnvFromConfig sets LOOP-specific vars in the env of the given cmd.
func SetCmdEnvFromConfig(cmd *exec.Cmd, cfg EnvConfig) {
	forward := func(name string) {
		if v, ok := os.LookupEnv(name); ok {
			cmd.Env = append(cmd.Env, name+"="+v)
		}
	}
	forward("CL_DEV")
	forward("CL_LOG_SQL_MIGRATIONS")
	forward("CL_LOG_COLOR")
	cmd.Env = append(cmd.Env,
		"CL_APP_ID="+cfg.AppID().String(),
		"CL_LOG_LEVEL="+cfg.LogLevel().String(),
		"CL_JSON_CONSOLE="+strconv.FormatBool(cfg.JSONConsole()),
		"CL_UNIX_TS="+strconv.FormatBool(cfg.LogUnixTimestamps()),
		"CL_PROMETHEUS_PORT="+strconv.FormatInt(int64(cfg.PrometheusPort()), 10),
	)
}

// GetEnvConfig deserializes LOOP-specific environment variables to an EnvConfig
func GetEnvConfig() (EnvConfig, error) {
	appIDStr := os.Getenv("CL_APP_ID")
	appID, err := uuid.Parse(appIDStr)
	if err != nil {
		return nil, fmt.Errorf("failed to parse CL_APP_ID = %q: %w", appIDStr, err)
	}
	logLevelStr := os.Getenv("CL_LOG_LEVEL")
	logLevel, err := zapcore.ParseLevel(logLevelStr)
	if err != nil {
		return nil, fmt.Errorf("failed to parse CL_LOG_LEVEL = %q: %w", logLevelStr, err)
	}
	promPortStr := os.Getenv("CL_PROMETHEUS_PORT")
	promPort, err := strconv.Atoi(promPortStr)
	if err != nil {
		return nil, fmt.Errorf("failed to parse CL_PROMETHEUS_PORT = %q: %w", promPortStr, err)
	}
	return &envConfig{
		AppConfig: &appConfig{
			appID:          appID,
			logLevel:       logLevel,
			jsonConsole:    strings.EqualFold("true", os.Getenv("CL_JSON_CONSOLE")),
			unixTimestamps: strings.EqualFold("true", os.Getenv("CL_UNIX_TS")),
		},
		prometheusPort: promPort,
	}, nil
}

// appConfig is an implementation of AppConfig.
type appConfig struct {
	appID          uuid.UUID
	logLevel       zapcore.Level
	jsonConsole    bool
	unixTimestamps bool
}

func (lc *appConfig) AppID() uuid.UUID {
	return lc.appID
}

func (lc *appConfig) LogLevel() zapcore.Level {
	return lc.logLevel
}

func (lc *appConfig) JSONConsole() bool {
	return lc.jsonConsole
}

func (lc *appConfig) LogUnixTimestamps() bool {
	return lc.unixTimestamps
}

// envConfig extends AppConfig to implement EnvConfig.
type envConfig struct {
	AppConfig
	prometheusPort int
}

func newEnvConfig(c AppConfig, prometheusPort int) EnvConfig {
	return &envConfig{
		AppConfig:      c,
		prometheusPort: prometheusPort,
	}
}

func (e *envConfig) PrometheusPort() int {
	return e.prometheusPort
}
