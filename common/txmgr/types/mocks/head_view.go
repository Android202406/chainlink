// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink/common/txmgr/types"
)

// HeadView is an autogenerated mock type for the HeadView type
type HeadView[HEAD interface{}] struct {
	mock.Mock
}

// BlockNumber provides a mock function with given fields:
func (_m *HeadView[HEAD]) BlockNumber() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ChainLength provides a mock function with given fields:
func (_m *HeadView[HEAD]) ChainLength() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EarliestInChain provides a mock function with given fields:
func (_m *HeadView[HEAD]) EarliestInChain() types.HeadView[HEAD] {
	ret := _m.Called()

	var r0 types.HeadView[HEAD]
	if rf, ok := ret.Get(0).(func() types.HeadView[HEAD]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.HeadView[HEAD])
		}
	}

	return r0
}

// GetNativeHead provides a mock function with given fields:
func (_m *HeadView[HEAD]) GetNativeHead() HEAD {
	ret := _m.Called()

	var r0 HEAD
	if rf, ok := ret.Get(0).(func() HEAD); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(HEAD)
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *HeadView[HEAD]) Hash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// HashAtHeight provides a mock function with given fields: blockNum
func (_m *HeadView[HEAD]) HashAtHeight(blockNum int64) common.Hash {
	ret := _m.Called(blockNum)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(int64) common.Hash); ok {
		r0 = rf(blockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Parent provides a mock function with given fields:
func (_m *HeadView[HEAD]) Parent() types.HeadView[HEAD] {
	ret := _m.Called()

	var r0 types.HeadView[HEAD]
	if rf, ok := ret.Get(0).(func() types.HeadView[HEAD]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.HeadView[HEAD])
		}
	}

	return r0
}

type mockConstructorTestingTNewHeadView interface {
	mock.TestingT
	Cleanup(func())
}

// NewHeadView creates a new instance of HeadView. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHeadView[HEAD interface{}](t mockConstructorTestingTNewHeadView) *HeadView[HEAD] {
	mock := &HeadView[HEAD]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
